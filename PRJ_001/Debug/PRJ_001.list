
PRJ_001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002790  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08002924  08002924  00003924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029e8  080029e8  0000405c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080029e8  080029e8  000039e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080029f0  080029f0  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029f0  080029f0  000039f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080029f4  080029f4  000039f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080029f8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  2000005c  08002a54  0000405c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002cc  08002a54  000042cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001223c  00000000  00000000  0000408c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002835  00000000  00000000  000162c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b20  00000000  00000000  00018b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000875  00000000  00000000  00019620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b32e  00000000  00000000  00019e95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ea99  00000000  00000000  000351c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097df0  00000000  00000000  00043c5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dba4c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045f0  00000000  00000000  000dba90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000e0080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000005c 	.word	0x2000005c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800290c 	.word	0x0800290c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000060 	.word	0x20000060
 80001d0:	0800290c 	.word	0x0800290c

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_uldivmod>:
 80001e4:	b953      	cbnz	r3, 80001fc <__aeabi_uldivmod+0x18>
 80001e6:	b94a      	cbnz	r2, 80001fc <__aeabi_uldivmod+0x18>
 80001e8:	2900      	cmp	r1, #0
 80001ea:	bf08      	it	eq
 80001ec:	2800      	cmpeq	r0, #0
 80001ee:	bf1c      	itt	ne
 80001f0:	f04f 31ff 	movne.w	r1, #4294967295
 80001f4:	f04f 30ff 	movne.w	r0, #4294967295
 80001f8:	f000 b988 	b.w	800050c <__aeabi_idiv0>
 80001fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000200:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000204:	f000 f806 	bl	8000214 <__udivmoddi4>
 8000208:	f8dd e004 	ldr.w	lr, [sp, #4]
 800020c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000210:	b004      	add	sp, #16
 8000212:	4770      	bx	lr

08000214 <__udivmoddi4>:
 8000214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000218:	9d08      	ldr	r5, [sp, #32]
 800021a:	468e      	mov	lr, r1
 800021c:	4604      	mov	r4, r0
 800021e:	4688      	mov	r8, r1
 8000220:	2b00      	cmp	r3, #0
 8000222:	d14a      	bne.n	80002ba <__udivmoddi4+0xa6>
 8000224:	428a      	cmp	r2, r1
 8000226:	4617      	mov	r7, r2
 8000228:	d962      	bls.n	80002f0 <__udivmoddi4+0xdc>
 800022a:	fab2 f682 	clz	r6, r2
 800022e:	b14e      	cbz	r6, 8000244 <__udivmoddi4+0x30>
 8000230:	f1c6 0320 	rsb	r3, r6, #32
 8000234:	fa01 f806 	lsl.w	r8, r1, r6
 8000238:	fa20 f303 	lsr.w	r3, r0, r3
 800023c:	40b7      	lsls	r7, r6
 800023e:	ea43 0808 	orr.w	r8, r3, r8
 8000242:	40b4      	lsls	r4, r6
 8000244:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000248:	fa1f fc87 	uxth.w	ip, r7
 800024c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000250:	0c23      	lsrs	r3, r4, #16
 8000252:	fb0e 8811 	mls	r8, lr, r1, r8
 8000256:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800025a:	fb01 f20c 	mul.w	r2, r1, ip
 800025e:	429a      	cmp	r2, r3
 8000260:	d909      	bls.n	8000276 <__udivmoddi4+0x62>
 8000262:	18fb      	adds	r3, r7, r3
 8000264:	f101 30ff 	add.w	r0, r1, #4294967295
 8000268:	f080 80ea 	bcs.w	8000440 <__udivmoddi4+0x22c>
 800026c:	429a      	cmp	r2, r3
 800026e:	f240 80e7 	bls.w	8000440 <__udivmoddi4+0x22c>
 8000272:	3902      	subs	r1, #2
 8000274:	443b      	add	r3, r7
 8000276:	1a9a      	subs	r2, r3, r2
 8000278:	b2a3      	uxth	r3, r4
 800027a:	fbb2 f0fe 	udiv	r0, r2, lr
 800027e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000282:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000286:	fb00 fc0c 	mul.w	ip, r0, ip
 800028a:	459c      	cmp	ip, r3
 800028c:	d909      	bls.n	80002a2 <__udivmoddi4+0x8e>
 800028e:	18fb      	adds	r3, r7, r3
 8000290:	f100 32ff 	add.w	r2, r0, #4294967295
 8000294:	f080 80d6 	bcs.w	8000444 <__udivmoddi4+0x230>
 8000298:	459c      	cmp	ip, r3
 800029a:	f240 80d3 	bls.w	8000444 <__udivmoddi4+0x230>
 800029e:	443b      	add	r3, r7
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a6:	eba3 030c 	sub.w	r3, r3, ip
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa2>
 80002ae:	40f3      	lsrs	r3, r6
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xb6>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb0>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa2>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x14c>
 80002d2:	4573      	cmp	r3, lr
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xc8>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 8105 	bhi.w	80004e6 <__udivmoddi4+0x2d2>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb6e 0203 	sbc.w	r2, lr, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	4690      	mov	r8, r2
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e5      	beq.n	80002b6 <__udivmoddi4+0xa2>
 80002ea:	e9c5 4800 	strd	r4, r8, [r5]
 80002ee:	e7e2      	b.n	80002b6 <__udivmoddi4+0xa2>
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f000 8090 	beq.w	8000416 <__udivmoddi4+0x202>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f040 80a4 	bne.w	8000448 <__udivmoddi4+0x234>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	0c03      	lsrs	r3, r0, #16
 8000304:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000308:	b280      	uxth	r0, r0
 800030a:	b2bc      	uxth	r4, r7
 800030c:	2101      	movs	r1, #1
 800030e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000312:	fb0e 221c 	mls	r2, lr, ip, r2
 8000316:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800031a:	fb04 f20c 	mul.w	r2, r4, ip
 800031e:	429a      	cmp	r2, r3
 8000320:	d907      	bls.n	8000332 <__udivmoddi4+0x11e>
 8000322:	18fb      	adds	r3, r7, r3
 8000324:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000328:	d202      	bcs.n	8000330 <__udivmoddi4+0x11c>
 800032a:	429a      	cmp	r2, r3
 800032c:	f200 80e0 	bhi.w	80004f0 <__udivmoddi4+0x2dc>
 8000330:	46c4      	mov	ip, r8
 8000332:	1a9b      	subs	r3, r3, r2
 8000334:	fbb3 f2fe 	udiv	r2, r3, lr
 8000338:	fb0e 3312 	mls	r3, lr, r2, r3
 800033c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000340:	fb02 f404 	mul.w	r4, r2, r4
 8000344:	429c      	cmp	r4, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x144>
 8000348:	18fb      	adds	r3, r7, r3
 800034a:	f102 30ff 	add.w	r0, r2, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x142>
 8000350:	429c      	cmp	r4, r3
 8000352:	f200 80ca 	bhi.w	80004ea <__udivmoddi4+0x2d6>
 8000356:	4602      	mov	r2, r0
 8000358:	1b1b      	subs	r3, r3, r4
 800035a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x98>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa0e f401 	lsl.w	r4, lr, r1
 8000370:	fa20 f306 	lsr.w	r3, r0, r6
 8000374:	fa2e fe06 	lsr.w	lr, lr, r6
 8000378:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fa00 f801 	lsl.w	r8, r0, r1
 8000382:	fa1f fc87 	uxth.w	ip, r7
 8000386:	fbbe f0f9 	udiv	r0, lr, r9
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000390:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000394:	fb00 fe0c 	mul.w	lr, r0, ip
 8000398:	45a6      	cmp	lr, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1a0>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f100 3aff 	add.w	sl, r0, #4294967295
 80003a6:	f080 809c 	bcs.w	80004e2 <__udivmoddi4+0x2ce>
 80003aa:	45a6      	cmp	lr, r4
 80003ac:	f240 8099 	bls.w	80004e2 <__udivmoddi4+0x2ce>
 80003b0:	3802      	subs	r0, #2
 80003b2:	443c      	add	r4, r7
 80003b4:	eba4 040e 	sub.w	r4, r4, lr
 80003b8:	fa1f fe83 	uxth.w	lr, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003c8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003cc:	45a4      	cmp	ip, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1ce>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003d6:	f080 8082 	bcs.w	80004de <__udivmoddi4+0x2ca>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d97f      	bls.n	80004de <__udivmoddi4+0x2ca>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003e6:	eba4 040c 	sub.w	r4, r4, ip
 80003ea:	fba0 ec02 	umull	lr, ip, r0, r2
 80003ee:	4564      	cmp	r4, ip
 80003f0:	4673      	mov	r3, lr
 80003f2:	46e1      	mov	r9, ip
 80003f4:	d362      	bcc.n	80004bc <__udivmoddi4+0x2a8>
 80003f6:	d05f      	beq.n	80004b8 <__udivmoddi4+0x2a4>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x1fe>
 80003fa:	ebb8 0203 	subs.w	r2, r8, r3
 80003fe:	eb64 0409 	sbc.w	r4, r4, r9
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	fa22 f301 	lsr.w	r3, r2, r1
 800040a:	431e      	orrs	r6, r3
 800040c:	40cc      	lsrs	r4, r1
 800040e:	e9c5 6400 	strd	r6, r4, [r5]
 8000412:	2100      	movs	r1, #0
 8000414:	e74f      	b.n	80002b6 <__udivmoddi4+0xa2>
 8000416:	fbb1 fcf2 	udiv	ip, r1, r2
 800041a:	0c01      	lsrs	r1, r0, #16
 800041c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000420:	b280      	uxth	r0, r0
 8000422:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000426:	463b      	mov	r3, r7
 8000428:	4638      	mov	r0, r7
 800042a:	463c      	mov	r4, r7
 800042c:	46b8      	mov	r8, r7
 800042e:	46be      	mov	lr, r7
 8000430:	2620      	movs	r6, #32
 8000432:	fbb1 f1f7 	udiv	r1, r1, r7
 8000436:	eba2 0208 	sub.w	r2, r2, r8
 800043a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800043e:	e766      	b.n	800030e <__udivmoddi4+0xfa>
 8000440:	4601      	mov	r1, r0
 8000442:	e718      	b.n	8000276 <__udivmoddi4+0x62>
 8000444:	4610      	mov	r0, r2
 8000446:	e72c      	b.n	80002a2 <__udivmoddi4+0x8e>
 8000448:	f1c6 0220 	rsb	r2, r6, #32
 800044c:	fa2e f302 	lsr.w	r3, lr, r2
 8000450:	40b7      	lsls	r7, r6
 8000452:	40b1      	lsls	r1, r6
 8000454:	fa20 f202 	lsr.w	r2, r0, r2
 8000458:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800045c:	430a      	orrs	r2, r1
 800045e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000462:	b2bc      	uxth	r4, r7
 8000464:	fb0e 3318 	mls	r3, lr, r8, r3
 8000468:	0c11      	lsrs	r1, r2, #16
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb08 f904 	mul.w	r9, r8, r4
 8000472:	40b0      	lsls	r0, r6
 8000474:	4589      	cmp	r9, r1
 8000476:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800047a:	b280      	uxth	r0, r0
 800047c:	d93e      	bls.n	80004fc <__udivmoddi4+0x2e8>
 800047e:	1879      	adds	r1, r7, r1
 8000480:	f108 3cff 	add.w	ip, r8, #4294967295
 8000484:	d201      	bcs.n	800048a <__udivmoddi4+0x276>
 8000486:	4589      	cmp	r9, r1
 8000488:	d81f      	bhi.n	80004ca <__udivmoddi4+0x2b6>
 800048a:	eba1 0109 	sub.w	r1, r1, r9
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fb09 f804 	mul.w	r8, r9, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	b292      	uxth	r2, r2
 800049c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d229      	bcs.n	80004f8 <__udivmoddi4+0x2e4>
 80004a4:	18ba      	adds	r2, r7, r2
 80004a6:	f109 31ff 	add.w	r1, r9, #4294967295
 80004aa:	d2c4      	bcs.n	8000436 <__udivmoddi4+0x222>
 80004ac:	4542      	cmp	r2, r8
 80004ae:	d2c2      	bcs.n	8000436 <__udivmoddi4+0x222>
 80004b0:	f1a9 0102 	sub.w	r1, r9, #2
 80004b4:	443a      	add	r2, r7
 80004b6:	e7be      	b.n	8000436 <__udivmoddi4+0x222>
 80004b8:	45f0      	cmp	r8, lr
 80004ba:	d29d      	bcs.n	80003f8 <__udivmoddi4+0x1e4>
 80004bc:	ebbe 0302 	subs.w	r3, lr, r2
 80004c0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004c4:	3801      	subs	r0, #1
 80004c6:	46e1      	mov	r9, ip
 80004c8:	e796      	b.n	80003f8 <__udivmoddi4+0x1e4>
 80004ca:	eba7 0909 	sub.w	r9, r7, r9
 80004ce:	4449      	add	r1, r9
 80004d0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004d4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d8:	fb09 f804 	mul.w	r8, r9, r4
 80004dc:	e7db      	b.n	8000496 <__udivmoddi4+0x282>
 80004de:	4673      	mov	r3, lr
 80004e0:	e77f      	b.n	80003e2 <__udivmoddi4+0x1ce>
 80004e2:	4650      	mov	r0, sl
 80004e4:	e766      	b.n	80003b4 <__udivmoddi4+0x1a0>
 80004e6:	4608      	mov	r0, r1
 80004e8:	e6fd      	b.n	80002e6 <__udivmoddi4+0xd2>
 80004ea:	443b      	add	r3, r7
 80004ec:	3a02      	subs	r2, #2
 80004ee:	e733      	b.n	8000358 <__udivmoddi4+0x144>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	443b      	add	r3, r7
 80004f6:	e71c      	b.n	8000332 <__udivmoddi4+0x11e>
 80004f8:	4649      	mov	r1, r9
 80004fa:	e79c      	b.n	8000436 <__udivmoddi4+0x222>
 80004fc:	eba1 0109 	sub.w	r1, r1, r9
 8000500:	46c4      	mov	ip, r8
 8000502:	fbb1 f9fe 	udiv	r9, r1, lr
 8000506:	fb09 f804 	mul.w	r8, r9, r4
 800050a:	e7c4      	b.n	8000496 <__udivmoddi4+0x282>

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <Clk_En>:
Pin_74H595 Pin_74H595_0;
Pin_74H595 Pin_74H595_1;
Pin_74H595 Pin_74H595_2;
Pin_74H595 Pin_74H595_3;

void Clk_En(uint8_t DS_GPIO_PIN_NUM){
 8000510:	b580      	push	{r7, lr}
 8000512:	b084      	sub	sp, #16
 8000514:	af00      	add	r7, sp, #0
 8000516:	4603      	mov	r3, r0
 8000518:	71fb      	strb	r3, [r7, #7]
	Pin_74H595 *Pin_74H595_t;
	if (DS_GPIO_PIN_NUM == DS0){
 800051a:	79fb      	ldrb	r3, [r7, #7]
 800051c:	2b01      	cmp	r3, #1
 800051e:	d102      	bne.n	8000526 <Clk_En+0x16>
		Pin_74H595_t = &Pin_74H595_0;
 8000520:	4b16      	ldr	r3, [pc, #88]	@ (800057c <Clk_En+0x6c>)
 8000522:	60fb      	str	r3, [r7, #12]
 8000524:	e010      	b.n	8000548 <Clk_En+0x38>
	}
	else if (DS_GPIO_PIN_NUM == DS1){
 8000526:	79fb      	ldrb	r3, [r7, #7]
 8000528:	2b03      	cmp	r3, #3
 800052a:	d102      	bne.n	8000532 <Clk_En+0x22>
		Pin_74H595_t = &Pin_74H595_1;
 800052c:	4b14      	ldr	r3, [pc, #80]	@ (8000580 <Clk_En+0x70>)
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	e00a      	b.n	8000548 <Clk_En+0x38>
	}
	else if (DS_GPIO_PIN_NUM == DS2){
 8000532:	79fb      	ldrb	r3, [r7, #7]
 8000534:	2b05      	cmp	r3, #5
 8000536:	d102      	bne.n	800053e <Clk_En+0x2e>
		Pin_74H595_t = &Pin_74H595_2;
 8000538:	4b12      	ldr	r3, [pc, #72]	@ (8000584 <Clk_En+0x74>)
 800053a:	60fb      	str	r3, [r7, #12]
 800053c:	e004      	b.n	8000548 <Clk_En+0x38>
	}
	else if (DS_GPIO_PIN_NUM == DS3){
 800053e:	79fb      	ldrb	r3, [r7, #7]
 8000540:	2b07      	cmp	r3, #7
 8000542:	d101      	bne.n	8000548 <Clk_En+0x38>
		Pin_74H595_t = &Pin_74H595_3;
 8000544:	4b10      	ldr	r3, [pc, #64]	@ (8000588 <Clk_En+0x78>)
 8000546:	60fb      	str	r3, [r7, #12]
	}
	GPIO_WriteToOutPutPin(Pin_74H595_t->SH_CP.pGPIOx, Pin_74H595_t->SH_CP.GPIO_Pin_Config.GPIO_PinNumber, High);
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	6858      	ldr	r0, [r3, #4]
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	7a1b      	ldrb	r3, [r3, #8]
 8000550:	2201      	movs	r2, #1
 8000552:	4619      	mov	r1, r3
 8000554:	f000 fb23 	bl	8000b9e <GPIO_WriteToOutPutPin>
	HAL_Delay(1);
 8000558:	2001      	movs	r0, #1
 800055a:	f000 ff5d 	bl	8001418 <HAL_Delay>
	GPIO_WriteToOutPutPin(Pin_74H595_t->SH_CP.pGPIOx, Pin_74H595_t->SH_CP.GPIO_Pin_Config.GPIO_PinNumber, Low);
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	6858      	ldr	r0, [r3, #4]
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	7a1b      	ldrb	r3, [r3, #8]
 8000566:	2200      	movs	r2, #0
 8000568:	4619      	mov	r1, r3
 800056a:	f000 fb18 	bl	8000b9e <GPIO_WriteToOutPutPin>
	HAL_Delay(1);
 800056e:	2001      	movs	r0, #1
 8000570:	f000 ff52 	bl	8001418 <HAL_Delay>
}
 8000574:	bf00      	nop
 8000576:	3710      	adds	r7, #16
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	20000078 	.word	0x20000078
 8000580:	200000a0 	.word	0x200000a0
 8000584:	200000c8 	.word	0x200000c8
 8000588:	200000f0 	.word	0x200000f0

0800058c <Write_data>:

void Write_data(uint8_t data, uint8_t DS_GPIO_PIN_NUM, uint8_t MSBorLSB){
 800058c:	b580      	push	{r7, lr}
 800058e:	b086      	sub	sp, #24
 8000590:	af00      	add	r7, sp, #0
 8000592:	4603      	mov	r3, r0
 8000594:	71fb      	strb	r3, [r7, #7]
 8000596:	460b      	mov	r3, r1
 8000598:	71bb      	strb	r3, [r7, #6]
 800059a:	4613      	mov	r3, r2
 800059c:	717b      	strb	r3, [r7, #5]
	Pin_74H595 *Pin_74H595_t;
	if (DS_GPIO_PIN_NUM == DS0){
 800059e:	79bb      	ldrb	r3, [r7, #6]
 80005a0:	2b01      	cmp	r3, #1
 80005a2:	d102      	bne.n	80005aa <Write_data+0x1e>
		Pin_74H595_t = &Pin_74H595_0;
 80005a4:	4b39      	ldr	r3, [pc, #228]	@ (800068c <Write_data+0x100>)
 80005a6:	617b      	str	r3, [r7, #20]
 80005a8:	e010      	b.n	80005cc <Write_data+0x40>
	}
	else if (DS_GPIO_PIN_NUM == DS1){
 80005aa:	79bb      	ldrb	r3, [r7, #6]
 80005ac:	2b03      	cmp	r3, #3
 80005ae:	d102      	bne.n	80005b6 <Write_data+0x2a>
		Pin_74H595_t = &Pin_74H595_1;
 80005b0:	4b37      	ldr	r3, [pc, #220]	@ (8000690 <Write_data+0x104>)
 80005b2:	617b      	str	r3, [r7, #20]
 80005b4:	e00a      	b.n	80005cc <Write_data+0x40>
	}
	else if (DS_GPIO_PIN_NUM == DS2){
 80005b6:	79bb      	ldrb	r3, [r7, #6]
 80005b8:	2b05      	cmp	r3, #5
 80005ba:	d102      	bne.n	80005c2 <Write_data+0x36>
		Pin_74H595_t = &Pin_74H595_2;
 80005bc:	4b35      	ldr	r3, [pc, #212]	@ (8000694 <Write_data+0x108>)
 80005be:	617b      	str	r3, [r7, #20]
 80005c0:	e004      	b.n	80005cc <Write_data+0x40>
	}
	else if (DS_GPIO_PIN_NUM == DS3){
 80005c2:	79bb      	ldrb	r3, [r7, #6]
 80005c4:	2b07      	cmp	r3, #7
 80005c6:	d101      	bne.n	80005cc <Write_data+0x40>
		Pin_74H595_t = &Pin_74H595_3;
 80005c8:	4b33      	ldr	r3, [pc, #204]	@ (8000698 <Write_data+0x10c>)
 80005ca:	617b      	str	r3, [r7, #20]
	}
	if (MSBorLSB == LSB){
 80005cc:	797b      	ldrb	r3, [r7, #5]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d12a      	bne.n	8000628 <Write_data+0x9c>
		for(int i = 7; i >= 0; i--){
 80005d2:	2307      	movs	r3, #7
 80005d4:	613b      	str	r3, [r7, #16]
 80005d6:	e01f      	b.n	8000618 <Write_data+0x8c>
			if((data >> i) & 0x01){
 80005d8:	79fa      	ldrb	r2, [r7, #7]
 80005da:	693b      	ldr	r3, [r7, #16]
 80005dc:	fa42 f303 	asr.w	r3, r2, r3
 80005e0:	f003 0301 	and.w	r3, r3, #1
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d008      	beq.n	80005fa <Write_data+0x6e>
				GPIO_WriteToOutPutPin(Pin_74H595_t->DS.pGPIOx, Pin_74H595_t->DS.GPIO_Pin_Config.GPIO_PinNumber, High);
 80005e8:	697b      	ldr	r3, [r7, #20]
 80005ea:	6918      	ldr	r0, [r3, #16]
 80005ec:	697b      	ldr	r3, [r7, #20]
 80005ee:	7d1b      	ldrb	r3, [r3, #20]
 80005f0:	2201      	movs	r2, #1
 80005f2:	4619      	mov	r1, r3
 80005f4:	f000 fad3 	bl	8000b9e <GPIO_WriteToOutPutPin>
 80005f8:	e007      	b.n	800060a <Write_data+0x7e>
			}else{
				GPIO_WriteToOutPutPin(Pin_74H595_t->DS.pGPIOx, Pin_74H595_t->DS.GPIO_Pin_Config.GPIO_PinNumber, Low);
 80005fa:	697b      	ldr	r3, [r7, #20]
 80005fc:	6918      	ldr	r0, [r3, #16]
 80005fe:	697b      	ldr	r3, [r7, #20]
 8000600:	7d1b      	ldrb	r3, [r3, #20]
 8000602:	2200      	movs	r2, #0
 8000604:	4619      	mov	r1, r3
 8000606:	f000 faca 	bl	8000b9e <GPIO_WriteToOutPutPin>
			}
			Clk_En(DS_GPIO_PIN_NUM);
 800060a:	79bb      	ldrb	r3, [r7, #6]
 800060c:	4618      	mov	r0, r3
 800060e:	f7ff ff7f 	bl	8000510 <Clk_En>
		for(int i = 7; i >= 0; i--){
 8000612:	693b      	ldr	r3, [r7, #16]
 8000614:	3b01      	subs	r3, #1
 8000616:	613b      	str	r3, [r7, #16]
 8000618:	693b      	ldr	r3, [r7, #16]
 800061a:	2b00      	cmp	r3, #0
 800061c:	dadc      	bge.n	80005d8 <Write_data+0x4c>
		}
		Latch_En(DS_GPIO_PIN_NUM);
 800061e:	79bb      	ldrb	r3, [r7, #6]
 8000620:	4618      	mov	r0, r3
 8000622:	f000 f83b 	bl	800069c <Latch_En>
			}
			Clk_En(DS_GPIO_PIN_NUM);
		}
		Latch_En(DS_GPIO_PIN_NUM);
	}
}
 8000626:	e02c      	b.n	8000682 <Write_data+0xf6>
	else if (MSBorLSB == MSB){
 8000628:	797b      	ldrb	r3, [r7, #5]
 800062a:	2b01      	cmp	r3, #1
 800062c:	d129      	bne.n	8000682 <Write_data+0xf6>
		for(int i = 0; i < 8; i++){
 800062e:	2300      	movs	r3, #0
 8000630:	60fb      	str	r3, [r7, #12]
 8000632:	e01f      	b.n	8000674 <Write_data+0xe8>
			if((data >> i) & 0x01){
 8000634:	79fa      	ldrb	r2, [r7, #7]
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	fa42 f303 	asr.w	r3, r2, r3
 800063c:	f003 0301 	and.w	r3, r3, #1
 8000640:	2b00      	cmp	r3, #0
 8000642:	d008      	beq.n	8000656 <Write_data+0xca>
				GPIO_WriteToOutPutPin(Pin_74H595_t->DS.pGPIOx, Pin_74H595_t->DS.GPIO_Pin_Config.GPIO_PinNumber, High);
 8000644:	697b      	ldr	r3, [r7, #20]
 8000646:	6918      	ldr	r0, [r3, #16]
 8000648:	697b      	ldr	r3, [r7, #20]
 800064a:	7d1b      	ldrb	r3, [r3, #20]
 800064c:	2201      	movs	r2, #1
 800064e:	4619      	mov	r1, r3
 8000650:	f000 faa5 	bl	8000b9e <GPIO_WriteToOutPutPin>
 8000654:	e007      	b.n	8000666 <Write_data+0xda>
				GPIO_WriteToOutPutPin(Pin_74H595_t->DS.pGPIOx, Pin_74H595_t->DS.GPIO_Pin_Config.GPIO_PinNumber, Low);
 8000656:	697b      	ldr	r3, [r7, #20]
 8000658:	6918      	ldr	r0, [r3, #16]
 800065a:	697b      	ldr	r3, [r7, #20]
 800065c:	7d1b      	ldrb	r3, [r3, #20]
 800065e:	2200      	movs	r2, #0
 8000660:	4619      	mov	r1, r3
 8000662:	f000 fa9c 	bl	8000b9e <GPIO_WriteToOutPutPin>
			Clk_En(DS_GPIO_PIN_NUM);
 8000666:	79bb      	ldrb	r3, [r7, #6]
 8000668:	4618      	mov	r0, r3
 800066a:	f7ff ff51 	bl	8000510 <Clk_En>
		for(int i = 0; i < 8; i++){
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	3301      	adds	r3, #1
 8000672:	60fb      	str	r3, [r7, #12]
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	2b07      	cmp	r3, #7
 8000678:	dddc      	ble.n	8000634 <Write_data+0xa8>
		Latch_En(DS_GPIO_PIN_NUM);
 800067a:	79bb      	ldrb	r3, [r7, #6]
 800067c:	4618      	mov	r0, r3
 800067e:	f000 f80d 	bl	800069c <Latch_En>
}
 8000682:	bf00      	nop
 8000684:	3718      	adds	r7, #24
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	20000078 	.word	0x20000078
 8000690:	200000a0 	.word	0x200000a0
 8000694:	200000c8 	.word	0x200000c8
 8000698:	200000f0 	.word	0x200000f0

0800069c <Latch_En>:

void Latch_En(uint8_t DS_GPIO_PIN_NUM){
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	71fb      	strb	r3, [r7, #7]
	Pin_74H595 *Pin_74H595_t;
	if (DS_GPIO_PIN_NUM == DS0){
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	2b01      	cmp	r3, #1
 80006aa:	d102      	bne.n	80006b2 <Latch_En+0x16>
		Pin_74H595_t = &Pin_74H595_0;
 80006ac:	4b17      	ldr	r3, [pc, #92]	@ (800070c <Latch_En+0x70>)
 80006ae:	60fb      	str	r3, [r7, #12]
 80006b0:	e010      	b.n	80006d4 <Latch_En+0x38>
	}
	else if (DS_GPIO_PIN_NUM == DS1){
 80006b2:	79fb      	ldrb	r3, [r7, #7]
 80006b4:	2b03      	cmp	r3, #3
 80006b6:	d102      	bne.n	80006be <Latch_En+0x22>
		Pin_74H595_t = &Pin_74H595_1;
 80006b8:	4b15      	ldr	r3, [pc, #84]	@ (8000710 <Latch_En+0x74>)
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	e00a      	b.n	80006d4 <Latch_En+0x38>
	}
	else if (DS_GPIO_PIN_NUM == DS2){
 80006be:	79fb      	ldrb	r3, [r7, #7]
 80006c0:	2b05      	cmp	r3, #5
 80006c2:	d102      	bne.n	80006ca <Latch_En+0x2e>
		Pin_74H595_t = &Pin_74H595_2;
 80006c4:	4b13      	ldr	r3, [pc, #76]	@ (8000714 <Latch_En+0x78>)
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	e004      	b.n	80006d4 <Latch_En+0x38>
	}
	else if (DS_GPIO_PIN_NUM == DS3){
 80006ca:	79fb      	ldrb	r3, [r7, #7]
 80006cc:	2b07      	cmp	r3, #7
 80006ce:	d101      	bne.n	80006d4 <Latch_En+0x38>
		Pin_74H595_t = &Pin_74H595_3;
 80006d0:	4b11      	ldr	r3, [pc, #68]	@ (8000718 <Latch_En+0x7c>)
 80006d2:	60fb      	str	r3, [r7, #12]
	}
	GPIO_WriteToOutPutPin(Pin_74H595_t->ST_CP.pGPIOx, Pin_74H595_t->ST_CP.GPIO_Pin_Config.GPIO_PinNumber, High);
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	69d8      	ldr	r0, [r3, #28]
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80006de:	2201      	movs	r2, #1
 80006e0:	4619      	mov	r1, r3
 80006e2:	f000 fa5c 	bl	8000b9e <GPIO_WriteToOutPutPin>
	HAL_Delay(5);
 80006e6:	2005      	movs	r0, #5
 80006e8:	f000 fe96 	bl	8001418 <HAL_Delay>
	GPIO_WriteToOutPutPin(Pin_74H595_t->ST_CP.pGPIOx, Pin_74H595_t->ST_CP.GPIO_Pin_Config.GPIO_PinNumber, Low);
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	69d8      	ldr	r0, [r3, #28]
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80006f6:	2200      	movs	r2, #0
 80006f8:	4619      	mov	r1, r3
 80006fa:	f000 fa50 	bl	8000b9e <GPIO_WriteToOutPutPin>
	HAL_Delay(5);
 80006fe:	2005      	movs	r0, #5
 8000700:	f000 fe8a 	bl	8001418 <HAL_Delay>
}
 8000704:	bf00      	nop
 8000706:	3710      	adds	r7, #16
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	20000078 	.word	0x20000078
 8000710:	200000a0 	.word	0x200000a0
 8000714:	200000c8 	.word	0x200000c8
 8000718:	200000f0 	.word	0x200000f0

0800071c <Set_74HC595>:

Pin_74H595 Set_74HC595(Pin_74H595 *Pin_74H595_t, uint8_t DS_GPIO_PIN_NUM, uint8_t ST_CP_GPIO_PIN_NUM){
 800071c:	b5b0      	push	{r4, r5, r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	60f8      	str	r0, [r7, #12]
 8000724:	60b9      	str	r1, [r7, #8]
 8000726:	4611      	mov	r1, r2
 8000728:	461a      	mov	r2, r3
 800072a:	460b      	mov	r3, r1
 800072c:	71fb      	strb	r3, [r7, #7]
 800072e:	4613      	mov	r3, r2
 8000730:	71bb      	strb	r3, [r7, #6]
	GPIOE_PCLK_EN;
 8000732:	4b30      	ldr	r3, [pc, #192]	@ (80007f4 <Set_74HC595+0xd8>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000736:	4a2f      	ldr	r2, [pc, #188]	@ (80007f4 <Set_74HC595+0xd8>)
 8000738:	f043 0310 	orr.w	r3, r3, #16
 800073c:	6313      	str	r3, [r2, #48]	@ 0x30
	Pin_74H595_t->SH_CP.pGPIOx = GPIOE;
 800073e:	68bb      	ldr	r3, [r7, #8]
 8000740:	4a2d      	ldr	r2, [pc, #180]	@ (80007f8 <Set_74HC595+0xdc>)
 8000742:	605a      	str	r2, [r3, #4]
	Pin_74H595_t->SH_CP.GPIO_Pin_Config.GPIO_PinNumber = GPIO_PIN_NUM_0;
 8000744:	68bb      	ldr	r3, [r7, #8]
 8000746:	2200      	movs	r2, #0
 8000748:	721a      	strb	r2, [r3, #8]
	Pin_74H595_t->SH_CP.GPIO_Pin_Config.GPIO_PinMode = GPIO_MODER_OUTPUT;
 800074a:	68bb      	ldr	r3, [r7, #8]
 800074c:	2201      	movs	r2, #1
 800074e:	725a      	strb	r2, [r3, #9]
	Pin_74H595_t->SH_CP.GPIO_Pin_Config.GPIO_PinOPType = GPIO_OTYPER_PP;
 8000750:	68bb      	ldr	r3, [r7, #8]
 8000752:	2200      	movs	r2, #0
 8000754:	731a      	strb	r2, [r3, #12]
	Pin_74H595_t->SH_CP.GPIO_Pin_Config.GPIO_PinSpeed = GPIO_OSPEEDR_HIGH;
 8000756:	68bb      	ldr	r3, [r7, #8]
 8000758:	2202      	movs	r2, #2
 800075a:	729a      	strb	r2, [r3, #10]
	Pin_74H595_t->SH_CP.GPIO_Pin_Config.GPIO_PinPuPdControl = GPIO_PUPDR_PU;
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	2201      	movs	r2, #1
 8000760:	72da      	strb	r2, [r3, #11]
	GPIO_Init(&(Pin_74H595_t->SH_CP));
 8000762:	68bb      	ldr	r3, [r7, #8]
 8000764:	3304      	adds	r3, #4
 8000766:	4618      	mov	r0, r3
 8000768:	f000 f929 	bl	80009be <GPIO_Init>

	Pin_74H595_t->DS.pGPIOx = GPIOE;
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	4a22      	ldr	r2, [pc, #136]	@ (80007f8 <Set_74HC595+0xdc>)
 8000770:	611a      	str	r2, [r3, #16]
	Pin_74H595_t->DS.GPIO_Pin_Config.GPIO_PinNumber = DS_GPIO_PIN_NUM;
 8000772:	68bb      	ldr	r3, [r7, #8]
 8000774:	79fa      	ldrb	r2, [r7, #7]
 8000776:	751a      	strb	r2, [r3, #20]
	Pin_74H595_t->DS.GPIO_Pin_Config.GPIO_PinMode = GPIO_MODER_OUTPUT;
 8000778:	68bb      	ldr	r3, [r7, #8]
 800077a:	2201      	movs	r2, #1
 800077c:	755a      	strb	r2, [r3, #21]
	Pin_74H595_t->DS.GPIO_Pin_Config.GPIO_PinOPType = GPIO_OTYPER_PP;
 800077e:	68bb      	ldr	r3, [r7, #8]
 8000780:	2200      	movs	r2, #0
 8000782:	761a      	strb	r2, [r3, #24]
	Pin_74H595_t->DS.GPIO_Pin_Config.GPIO_PinSpeed = GPIO_OSPEEDR_HIGH;
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	2202      	movs	r2, #2
 8000788:	759a      	strb	r2, [r3, #22]
	Pin_74H595_t->DS.GPIO_Pin_Config.GPIO_PinPuPdControl = GPIO_PUPDR_PU;
 800078a:	68bb      	ldr	r3, [r7, #8]
 800078c:	2201      	movs	r2, #1
 800078e:	75da      	strb	r2, [r3, #23]
	GPIO_Init(&(Pin_74H595_t->DS));
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	3310      	adds	r3, #16
 8000794:	4618      	mov	r0, r3
 8000796:	f000 f912 	bl	80009be <GPIO_Init>

	Pin_74H595_t->ST_CP.pGPIOx = GPIOE;
 800079a:	68bb      	ldr	r3, [r7, #8]
 800079c:	4a16      	ldr	r2, [pc, #88]	@ (80007f8 <Set_74HC595+0xdc>)
 800079e:	61da      	str	r2, [r3, #28]
	Pin_74H595_t->ST_CP.GPIO_Pin_Config.GPIO_PinNumber = ST_CP_GPIO_PIN_NUM;
 80007a0:	68bb      	ldr	r3, [r7, #8]
 80007a2:	79ba      	ldrb	r2, [r7, #6]
 80007a4:	f883 2020 	strb.w	r2, [r3, #32]
	Pin_74H595_t->ST_CP.GPIO_Pin_Config.GPIO_PinMode = GPIO_MODER_OUTPUT;
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	2201      	movs	r2, #1
 80007ac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	Pin_74H595_t->ST_CP.GPIO_Pin_Config.GPIO_PinOPType = GPIO_OTYPER_PP;
 80007b0:	68bb      	ldr	r3, [r7, #8]
 80007b2:	2200      	movs	r2, #0
 80007b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	Pin_74H595_t->ST_CP.GPIO_Pin_Config.GPIO_PinSpeed = GPIO_OSPEEDR_HIGH;
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	2202      	movs	r2, #2
 80007bc:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	Pin_74H595_t->ST_CP.GPIO_Pin_Config.GPIO_PinPuPdControl = GPIO_PUPDR_PU;
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	2201      	movs	r2, #1
 80007c4:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	GPIO_Init(&(Pin_74H595_t->ST_CP));
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	331c      	adds	r3, #28
 80007cc:	4618      	mov	r0, r3
 80007ce:	f000 f8f6 	bl	80009be <GPIO_Init>

	return *Pin_74H595_t;
 80007d2:	68fa      	ldr	r2, [r7, #12]
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	4614      	mov	r4, r2
 80007d8:	461d      	mov	r5, r3
 80007da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007e2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80007e6:	e884 0003 	stmia.w	r4, {r0, r1}
}
 80007ea:	68f8      	ldr	r0, [r7, #12]
 80007ec:	3710      	adds	r7, #16
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bdb0      	pop	{r4, r5, r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40023800 	.word	0x40023800
 80007f8:	40021000 	.word	0x40021000

080007fc <init_74HC595>:

void init_74HC595(uint8_t DS_GPIO_PIN_NUM){
 80007fc:	b5b0      	push	{r4, r5, r7, lr}
 80007fe:	b08c      	sub	sp, #48	@ 0x30
 8000800:	af00      	add	r7, sp, #0
 8000802:	4603      	mov	r3, r0
 8000804:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (DS_GPIO_PIN_NUM == DS0){
 8000808:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800080c:	2b01      	cmp	r3, #1
 800080e:	d112      	bne.n	8000836 <init_74HC595+0x3a>
		Pin_74H595_0 = Set_74HC595(&Pin_74H595_0, DS_GPIO_PIN_NUM, ST_CP0);
 8000810:	4c2d      	ldr	r4, [pc, #180]	@ (80008c8 <init_74HC595+0xcc>)
 8000812:	4638      	mov	r0, r7
 8000814:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000818:	2302      	movs	r3, #2
 800081a:	492b      	ldr	r1, [pc, #172]	@ (80008c8 <init_74HC595+0xcc>)
 800081c:	f7ff ff7e 	bl	800071c <Set_74HC595>
 8000820:	4625      	mov	r5, r4
 8000822:	463c      	mov	r4, r7
 8000824:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000826:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000828:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800082a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800082c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000830:	e885 0003 	stmia.w	r5, {r0, r1}
		Pin_74H595_2 = Set_74HC595(&Pin_74H595_2, DS_GPIO_PIN_NUM, ST_CP2);
	}
	else if (DS_GPIO_PIN_NUM == DS3){
		Pin_74H595_2 = Set_74HC595(&Pin_74H595_3, DS_GPIO_PIN_NUM, ST_CP3);
	}
}
 8000834:	e043      	b.n	80008be <init_74HC595+0xc2>
	else if (DS_GPIO_PIN_NUM == DS1){
 8000836:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800083a:	2b03      	cmp	r3, #3
 800083c:	d112      	bne.n	8000864 <init_74HC595+0x68>
		Pin_74H595_1 = Set_74HC595(&Pin_74H595_1, DS_GPIO_PIN_NUM, ST_CP1);
 800083e:	4c23      	ldr	r4, [pc, #140]	@ (80008cc <init_74HC595+0xd0>)
 8000840:	4638      	mov	r0, r7
 8000842:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000846:	2304      	movs	r3, #4
 8000848:	4920      	ldr	r1, [pc, #128]	@ (80008cc <init_74HC595+0xd0>)
 800084a:	f7ff ff67 	bl	800071c <Set_74HC595>
 800084e:	4625      	mov	r5, r4
 8000850:	463c      	mov	r4, r7
 8000852:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000854:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000856:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000858:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800085a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800085e:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000862:	e02c      	b.n	80008be <init_74HC595+0xc2>
	else if (DS_GPIO_PIN_NUM == DS2){
 8000864:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000868:	2b05      	cmp	r3, #5
 800086a:	d112      	bne.n	8000892 <init_74HC595+0x96>
		Pin_74H595_2 = Set_74HC595(&Pin_74H595_2, DS_GPIO_PIN_NUM, ST_CP2);
 800086c:	4c18      	ldr	r4, [pc, #96]	@ (80008d0 <init_74HC595+0xd4>)
 800086e:	4638      	mov	r0, r7
 8000870:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000874:	2306      	movs	r3, #6
 8000876:	4916      	ldr	r1, [pc, #88]	@ (80008d0 <init_74HC595+0xd4>)
 8000878:	f7ff ff50 	bl	800071c <Set_74HC595>
 800087c:	4625      	mov	r5, r4
 800087e:	463c      	mov	r4, r7
 8000880:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000882:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000884:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000886:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000888:	e894 0003 	ldmia.w	r4, {r0, r1}
 800088c:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000890:	e015      	b.n	80008be <init_74HC595+0xc2>
	else if (DS_GPIO_PIN_NUM == DS3){
 8000892:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000896:	2b07      	cmp	r3, #7
 8000898:	d111      	bne.n	80008be <init_74HC595+0xc2>
		Pin_74H595_2 = Set_74HC595(&Pin_74H595_3, DS_GPIO_PIN_NUM, ST_CP3);
 800089a:	4c0d      	ldr	r4, [pc, #52]	@ (80008d0 <init_74HC595+0xd4>)
 800089c:	4638      	mov	r0, r7
 800089e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80008a2:	2308      	movs	r3, #8
 80008a4:	490b      	ldr	r1, [pc, #44]	@ (80008d4 <init_74HC595+0xd8>)
 80008a6:	f7ff ff39 	bl	800071c <Set_74HC595>
 80008aa:	4625      	mov	r5, r4
 80008ac:	463c      	mov	r4, r7
 80008ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80008ba:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80008be:	bf00      	nop
 80008c0:	3730      	adds	r7, #48	@ 0x30
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bdb0      	pop	{r4, r5, r7, pc}
 80008c6:	bf00      	nop
 80008c8:	20000078 	.word	0x20000078
 80008cc:	200000a0 	.word	0x200000a0
 80008d0:	200000c8 	.word	0x200000c8
 80008d4:	200000f0 	.word	0x200000f0

080008d8 <_ZN6DeviceC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

#include "Device.h"



Device::Device(std::string name){
 80008d8:	b580      	push	{r7, lr}
 80008da:	b084      	sub	sp, #16
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
 80008e0:	6039      	str	r1, [r7, #0]
	if (name.compare("Living Room") == 0){
 80008e2:	492b      	ldr	r1, [pc, #172]	@ (8000990 <_ZN6DeviceC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xb8>)
 80008e4:	6838      	ldr	r0, [r7, #0]
 80008e6:	f001 fdc8 	bl	800247a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	bf0c      	ite	eq
 80008f0:	2301      	moveq	r3, #1
 80008f2:	2300      	movne	r3, #0
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d009      	beq.n	800090e <_ZN6DeviceC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x36>
		id = em_LV_R;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	2202      	movs	r2, #2
 80008fe:	701a      	strb	r2, [r3, #0]
		id_74HC[0] = DS0;	// For led
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	2201      	movs	r2, #1
 8000904:	705a      	strb	r2, [r3, #1]
		id_74HC[1] = DS3;	// For LCD
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	2207      	movs	r2, #7
 800090a:	709a      	strb	r2, [r3, #2]
 800090c:	e024      	b.n	8000958 <_ZN6DeviceC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x80>
	}
	else if (name.compare("Kitchen Room") == 0){
 800090e:	4921      	ldr	r1, [pc, #132]	@ (8000994 <_ZN6DeviceC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xbc>)
 8000910:	6838      	ldr	r0, [r7, #0]
 8000912:	f001 fdb2 	bl	800247a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	bf0c      	ite	eq
 800091c:	2301      	moveq	r3, #1
 800091e:	2300      	movne	r3, #0
 8000920:	b2db      	uxtb	r3, r3
 8000922:	2b00      	cmp	r3, #0
 8000924:	d006      	beq.n	8000934 <_ZN6DeviceC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x5c>
		id = em_KC_R;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	2203      	movs	r2, #3
 800092a:	701a      	strb	r2, [r3, #0]
		id_74HC[0] = DS1;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	2203      	movs	r2, #3
 8000930:	705a      	strb	r2, [r3, #1]
 8000932:	e011      	b.n	8000958 <_ZN6DeviceC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x80>
	}

	else if (name.compare("Bed Room") == 0){
 8000934:	4918      	ldr	r1, [pc, #96]	@ (8000998 <_ZN6DeviceC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc0>)
 8000936:	6838      	ldr	r0, [r7, #0]
 8000938:	f001 fd9f 	bl	800247a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	bf0c      	ite	eq
 8000942:	2301      	moveq	r3, #1
 8000944:	2300      	movne	r3, #0
 8000946:	b2db      	uxtb	r3, r3
 8000948:	2b00      	cmp	r3, #0
 800094a:	d005      	beq.n	8000958 <_ZN6DeviceC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x80>
		id = em_B_R;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	2204      	movs	r2, #4
 8000950:	701a      	strb	r2, [r3, #0]
		id_74HC[0] = DS2;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	2205      	movs	r2, #5
 8000956:	705a      	strb	r2, [r3, #1]
	}

	// For shift IC
	for (uint8_t i = 0; i < sizeof(id_74HC); i++){
 8000958:	2300      	movs	r3, #0
 800095a:	73fb      	strb	r3, [r7, #15]
 800095c:	e009      	b.n	8000972 <_ZN6DeviceC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x9a>
		init_74HC595(id_74HC[i]);
 800095e:	7bfb      	ldrb	r3, [r7, #15]
 8000960:	687a      	ldr	r2, [r7, #4]
 8000962:	4413      	add	r3, r2
 8000964:	785b      	ldrb	r3, [r3, #1]
 8000966:	4618      	mov	r0, r3
 8000968:	f7ff ff48 	bl	80007fc <init_74HC595>
	for (uint8_t i = 0; i < sizeof(id_74HC); i++){
 800096c:	7bfb      	ldrb	r3, [r7, #15]
 800096e:	3301      	adds	r3, #1
 8000970:	73fb      	strb	r3, [r7, #15]
 8000972:	7bfb      	ldrb	r3, [r7, #15]
 8000974:	2b04      	cmp	r3, #4
 8000976:	d9f2      	bls.n	800095e <_ZN6DeviceC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x86>
	}
	// For LCD
	if (id_74HC[1] == DS3){
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	789b      	ldrb	r3, [r3, #2]
 800097c:	2b07      	cmp	r3, #7
 800097e:	d101      	bne.n	8000984 <_ZN6DeviceC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xac>
		lcd_init();
 8000980:	f000 f96e 	bl	8000c60 <lcd_init>
//		i2c_lcd_init();
	}
}
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	4618      	mov	r0, r3
 8000988:	3710      	adds	r7, #16
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	08002924 	.word	0x08002924
 8000994:	08002930 	.word	0x08002930
 8000998:	08002940 	.word	0x08002940

0800099c <_ZN6Device9TurnOnLedEh>:

Device::~Device() {}

void Device::TurnOnLed(uint8_t data){
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	460b      	mov	r3, r1
 80009a6:	70fb      	strb	r3, [r7, #3]
	Write_data(data, id_74HC[0], MSB);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	7859      	ldrb	r1, [r3, #1]
 80009ac:	78fb      	ldrb	r3, [r7, #3]
 80009ae:	2201      	movs	r2, #1
 80009b0:	4618      	mov	r0, r3
 80009b2:	f7ff fdeb 	bl	800058c <Write_data>
}
 80009b6:	bf00      	nop
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}

080009be <GPIO_Init>:
        else if(pGPIOx == GPIOD) GPIOD_PCLK_DIS;
    }
}

//Init and Denit
void GPIO_Init(GPIO_Handle_t *pGPIOHandel){
 80009be:	b480      	push	{r7}
 80009c0:	b085      	sub	sp, #20
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	6078      	str	r0, [r7, #4]
    // 1.Configgure mode GPIO pin
    uint32_t temp = 0;
 80009c6:	2300      	movs	r3, #0
 80009c8:	60fb      	str	r3, [r7, #12]
    if(pGPIOHandel->GPIO_Pin_Config.GPIO_PinMode <= GPIO_MODER_ANALOG){
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	795b      	ldrb	r3, [r3, #5]
 80009ce:	2b03      	cmp	r3, #3
 80009d0:	d81f      	bhi.n	8000a12 <GPIO_Init+0x54>
        temp = pGPIOHandel->GPIO_Pin_Config.GPIO_PinMode << (2* pGPIOHandel->GPIO_Pin_Config.GPIO_PinNumber);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	795b      	ldrb	r3, [r3, #5]
 80009d6:	461a      	mov	r2, r3
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	791b      	ldrb	r3, [r3, #4]
 80009dc:	005b      	lsls	r3, r3, #1
 80009de:	fa02 f303 	lsl.w	r3, r2, r3
 80009e2:	60fb      	str	r3, [r7, #12]
        pGPIOHandel->pGPIOx->MODER &= ~(3 << (2* pGPIOHandel->GPIO_Pin_Config.GPIO_PinNumber));
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	681a      	ldr	r2, [r3, #0]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	791b      	ldrb	r3, [r3, #4]
 80009ee:	005b      	lsls	r3, r3, #1
 80009f0:	2103      	movs	r1, #3
 80009f2:	fa01 f303 	lsl.w	r3, r1, r3
 80009f6:	43db      	mvns	r3, r3
 80009f8:	4619      	mov	r1, r3
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	400a      	ands	r2, r1
 8000a00:	601a      	str	r2, [r3, #0]
        pGPIOHandel->pGPIOx->MODER |= temp;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	6819      	ldr	r1, [r3, #0]
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	68fa      	ldr	r2, [r7, #12]
 8000a0e:	430a      	orrs	r2, r1
 8000a10:	601a      	str	r2, [r3, #0]
    }
    else{
        // Interrupt
    }
    temp = 0;
 8000a12:	2300      	movs	r3, #0
 8000a14:	60fb      	str	r3, [r7, #12]
    // 2.Configure speed
    if(pGPIOHandel->GPIO_Pin_Config.GPIO_PinSpeed <= GPIO_OSPEEDR_VERYHIGH){
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	799b      	ldrb	r3, [r3, #6]
 8000a1a:	2b03      	cmp	r3, #3
 8000a1c:	d81f      	bhi.n	8000a5e <GPIO_Init+0xa0>
        temp = pGPIOHandel->GPIO_Pin_Config.GPIO_PinSpeed << (2* pGPIOHandel->GPIO_Pin_Config.GPIO_PinNumber);
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	799b      	ldrb	r3, [r3, #6]
 8000a22:	461a      	mov	r2, r3
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	791b      	ldrb	r3, [r3, #4]
 8000a28:	005b      	lsls	r3, r3, #1
 8000a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2e:	60fb      	str	r3, [r7, #12]
        pGPIOHandel->pGPIOx->OSPEEDR &= ~(3 << (2* pGPIOHandel->GPIO_Pin_Config.GPIO_PinNumber));
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	689a      	ldr	r2, [r3, #8]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	791b      	ldrb	r3, [r3, #4]
 8000a3a:	005b      	lsls	r3, r3, #1
 8000a3c:	2103      	movs	r1, #3
 8000a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a42:	43db      	mvns	r3, r3
 8000a44:	4619      	mov	r1, r3
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	400a      	ands	r2, r1
 8000a4c:	609a      	str	r2, [r3, #8]
        pGPIOHandel->pGPIOx->OSPEEDR |= temp;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	6899      	ldr	r1, [r3, #8]
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	68fa      	ldr	r2, [r7, #12]
 8000a5a:	430a      	orrs	r2, r1
 8000a5c:	609a      	str	r2, [r3, #8]
    }
    else{
       // Interrupt
    }
    temp = 0;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60fb      	str	r3, [r7, #12]

    // 3.Configure pupd setting
    if(pGPIOHandel->GPIO_Pin_Config.GPIO_PinPuPdControl <= GPIO_PUPDR_RESERVED){
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	79db      	ldrb	r3, [r3, #7]
 8000a66:	2b03      	cmp	r3, #3
 8000a68:	d81f      	bhi.n	8000aaa <GPIO_Init+0xec>
        temp = pGPIOHandel->GPIO_Pin_Config.GPIO_PinPuPdControl << (2* pGPIOHandel->GPIO_Pin_Config.GPIO_PinNumber);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	79db      	ldrb	r3, [r3, #7]
 8000a6e:	461a      	mov	r2, r3
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	791b      	ldrb	r3, [r3, #4]
 8000a74:	005b      	lsls	r3, r3, #1
 8000a76:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7a:	60fb      	str	r3, [r7, #12]
        pGPIOHandel->pGPIOx->PUPDR &= ~(3 << (2* pGPIOHandel->GPIO_Pin_Config.GPIO_PinNumber));
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	68da      	ldr	r2, [r3, #12]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	791b      	ldrb	r3, [r3, #4]
 8000a86:	005b      	lsls	r3, r3, #1
 8000a88:	2103      	movs	r1, #3
 8000a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a8e:	43db      	mvns	r3, r3
 8000a90:	4619      	mov	r1, r3
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	400a      	ands	r2, r1
 8000a98:	60da      	str	r2, [r3, #12]
        pGPIOHandel->pGPIOx->PUPDR |= temp;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	68d9      	ldr	r1, [r3, #12]
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	68fa      	ldr	r2, [r7, #12]
 8000aa6:	430a      	orrs	r2, r1
 8000aa8:	60da      	str	r2, [r3, #12]
    }
    else{
        // Interrupt
    }
    temp = 0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60fb      	str	r3, [r7, #12]
    // 4.Configure otype
    if(pGPIOHandel->GPIO_Pin_Config.GPIO_PinOPType <= GPIO_OTYPER_OD){
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	7a1b      	ldrb	r3, [r3, #8]
 8000ab2:	2b01      	cmp	r3, #1
 8000ab4:	d81d      	bhi.n	8000af2 <GPIO_Init+0x134>
        temp = pGPIOHandel->GPIO_Pin_Config.GPIO_PinOPType << pGPIOHandel->GPIO_Pin_Config.GPIO_PinNumber;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	7a1b      	ldrb	r3, [r3, #8]
 8000aba:	461a      	mov	r2, r3
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	791b      	ldrb	r3, [r3, #4]
 8000ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac4:	60fb      	str	r3, [r7, #12]
        pGPIOHandel->pGPIOx->OTYPER &= ~(1 << pGPIOHandel->GPIO_Pin_Config.GPIO_PinNumber);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	685a      	ldr	r2, [r3, #4]
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	791b      	ldrb	r3, [r3, #4]
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	408b      	lsls	r3, r1
 8000ad6:	43db      	mvns	r3, r3
 8000ad8:	4619      	mov	r1, r3
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	400a      	ands	r2, r1
 8000ae0:	605a      	str	r2, [r3, #4]
        pGPIOHandel->pGPIOx->OTYPER |= temp;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	6859      	ldr	r1, [r3, #4]
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	68fa      	ldr	r2, [r7, #12]
 8000aee:	430a      	orrs	r2, r1
 8000af0:	605a      	str	r2, [r3, #4]
    }
    else{
        // Interrupt
    }
    temp = 0;
 8000af2:	2300      	movs	r3, #0
 8000af4:	60fb      	str	r3, [r7, #12]
    // 5.Configure alt func mode
	if (pGPIOHandel->GPIO_Pin_Config.GPIO_PinAltFunMode_High <= GPIO_AFRH_AF15){
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	7a5b      	ldrb	r3, [r3, #9]
 8000afa:	2b0f      	cmp	r3, #15
 8000afc:	d821      	bhi.n	8000b42 <GPIO_Init+0x184>
		temp = pGPIOHandel->GPIO_Pin_Config.GPIO_PinAltFunMode_High << (4 * (pGPIOHandel->GPIO_Pin_Config.GPIO_PinNumber - 8));
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	7a5b      	ldrb	r3, [r3, #9]
 8000b02:	461a      	mov	r2, r3
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	791b      	ldrb	r3, [r3, #4]
 8000b08:	3b08      	subs	r3, #8
 8000b0a:	009b      	lsls	r3, r3, #2
 8000b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b10:	60fb      	str	r3, [r7, #12]
		pGPIOHandel->pGPIOx->AFRH &= ~(4 << (4 * (pGPIOHandel->GPIO_Pin_Config.GPIO_PinNumber - 8)));
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	791b      	ldrb	r3, [r3, #4]
 8000b1c:	3b08      	subs	r3, #8
 8000b1e:	009b      	lsls	r3, r3, #2
 8000b20:	2104      	movs	r1, #4
 8000b22:	fa01 f303 	lsl.w	r3, r1, r3
 8000b26:	43db      	mvns	r3, r3
 8000b28:	4619      	mov	r1, r3
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	400a      	ands	r2, r1
 8000b30:	625a      	str	r2, [r3, #36]	@ 0x24
		pGPIOHandel->pGPIOx->AFRH |= temp;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	68fa      	ldr	r2, [r7, #12]
 8000b3e:	430a      	orrs	r2, r1
 8000b40:	625a      	str	r2, [r3, #36]	@ 0x24
	}

	temp = 0;
 8000b42:	2300      	movs	r3, #0
 8000b44:	60fb      	str	r3, [r7, #12]
	if (pGPIOHandel->GPIO_Pin_Config.GPIO_PinAltFunMode_Low <= GPIO_AFRL_AF15){
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	7a9b      	ldrb	r3, [r3, #10]
 8000b4a:	2b0f      	cmp	r3, #15
 8000b4c:	d81f      	bhi.n	8000b8e <GPIO_Init+0x1d0>
		temp = pGPIOHandel->GPIO_Pin_Config.GPIO_PinAltFunMode_Low << (4 * (pGPIOHandel->GPIO_Pin_Config.GPIO_PinNumber));
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	7a9b      	ldrb	r3, [r3, #10]
 8000b52:	461a      	mov	r2, r3
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	791b      	ldrb	r3, [r3, #4]
 8000b58:	009b      	lsls	r3, r3, #2
 8000b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5e:	60fb      	str	r3, [r7, #12]
		pGPIOHandel->pGPIOx->AFRL &= ~(4 << (4 * (pGPIOHandel->GPIO_Pin_Config.GPIO_PinNumber)));
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	6a1a      	ldr	r2, [r3, #32]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	791b      	ldrb	r3, [r3, #4]
 8000b6a:	009b      	lsls	r3, r3, #2
 8000b6c:	2104      	movs	r1, #4
 8000b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b72:	43db      	mvns	r3, r3
 8000b74:	4619      	mov	r1, r3
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	400a      	ands	r2, r1
 8000b7c:	621a      	str	r2, [r3, #32]
		pGPIOHandel->pGPIOx->AFRL |= temp;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	6a19      	ldr	r1, [r3, #32]
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	68fa      	ldr	r2, [r7, #12]
 8000b8a:	430a      	orrs	r2, r1
 8000b8c:	621a      	str	r2, [r3, #32]
	}
	temp = 0;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60fb      	str	r3, [r7, #12]
}
 8000b92:	bf00      	nop
 8000b94:	3714      	adds	r7, #20
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr

08000b9e <GPIO_WriteToOutPutPin>:
    uint16_t value;
    value = (uint16_t)(pGPIOx->IDR);
    return value;
}

void GPIO_WriteToOutPutPin(GPIO_RegDef_t *pGPIOx, uint8_t GPIO_PinNumber, uint8_t Status){
 8000b9e:	b480      	push	{r7}
 8000ba0:	b083      	sub	sp, #12
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	6078      	str	r0, [r7, #4]
 8000ba6:	460b      	mov	r3, r1
 8000ba8:	70fb      	strb	r3, [r7, #3]
 8000baa:	4613      	mov	r3, r2
 8000bac:	70bb      	strb	r3, [r7, #2]
    if(Status == GPIO_PIN_SET){
 8000bae:	78bb      	ldrb	r3, [r7, #2]
 8000bb0:	2b01      	cmp	r3, #1
 8000bb2:	d109      	bne.n	8000bc8 <GPIO_WriteToOutPutPin+0x2a>
        pGPIOx->ODR |= (1 << GPIO_PinNumber);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	695b      	ldr	r3, [r3, #20]
 8000bb8:	78fa      	ldrb	r2, [r7, #3]
 8000bba:	2101      	movs	r1, #1
 8000bbc:	fa01 f202 	lsl.w	r2, r1, r2
 8000bc0:	431a      	orrs	r2, r3
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	615a      	str	r2, [r3, #20]
    }
    else{
        pGPIOx->ODR &= ~(1 << GPIO_PinNumber);
    }
}
 8000bc6:	e009      	b.n	8000bdc <GPIO_WriteToOutPutPin+0x3e>
        pGPIOx->ODR &= ~(1 << GPIO_PinNumber);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	695b      	ldr	r3, [r3, #20]
 8000bcc:	78fa      	ldrb	r2, [r7, #3]
 8000bce:	2101      	movs	r1, #1
 8000bd0:	fa01 f202 	lsl.w	r2, r1, r2
 8000bd4:	43d2      	mvns	r2, r2
 8000bd6:	401a      	ands	r2, r3
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	615a      	str	r2, [r3, #20]
}
 8000bdc:	bf00      	nop
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <Config_GPIO_LCD>:
#define lcd4_bit

GPIO_Handle_t PE9;
GPIO_Handle_t PE10;

void Config_GPIO_LCD(){
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
	GPIOE_PCLK_EN;
 8000bec:	4b18      	ldr	r3, [pc, #96]	@ (8000c50 <Config_GPIO_LCD+0x68>)
 8000bee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf0:	4a17      	ldr	r2, [pc, #92]	@ (8000c50 <Config_GPIO_LCD+0x68>)
 8000bf2:	f043 0310 	orr.w	r3, r3, #16
 8000bf6:	6313      	str	r3, [r2, #48]	@ 0x30
	PE9.pGPIOx = GPIOE;
 8000bf8:	4b16      	ldr	r3, [pc, #88]	@ (8000c54 <Config_GPIO_LCD+0x6c>)
 8000bfa:	4a17      	ldr	r2, [pc, #92]	@ (8000c58 <Config_GPIO_LCD+0x70>)
 8000bfc:	601a      	str	r2, [r3, #0]
	PE9.GPIO_Pin_Config.GPIO_PinNumber = GPIO_PIN_NUM_9;
 8000bfe:	4b15      	ldr	r3, [pc, #84]	@ (8000c54 <Config_GPIO_LCD+0x6c>)
 8000c00:	2209      	movs	r2, #9
 8000c02:	711a      	strb	r2, [r3, #4]
	PE9.GPIO_Pin_Config.GPIO_PinMode = GPIO_MODER_OUTPUT;
 8000c04:	4b13      	ldr	r3, [pc, #76]	@ (8000c54 <Config_GPIO_LCD+0x6c>)
 8000c06:	2201      	movs	r2, #1
 8000c08:	715a      	strb	r2, [r3, #5]
	PE9.GPIO_Pin_Config.GPIO_PinOPType = GPIO_OTYPER_PP;
 8000c0a:	4b12      	ldr	r3, [pc, #72]	@ (8000c54 <Config_GPIO_LCD+0x6c>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	721a      	strb	r2, [r3, #8]
	PE9.GPIO_Pin_Config.GPIO_PinSpeed = GPIO_OSPEEDR_HIGH;
 8000c10:	4b10      	ldr	r3, [pc, #64]	@ (8000c54 <Config_GPIO_LCD+0x6c>)
 8000c12:	2202      	movs	r2, #2
 8000c14:	719a      	strb	r2, [r3, #6]
	PE9.GPIO_Pin_Config.GPIO_PinPuPdControl = GPIO_PUPDR_PU;
 8000c16:	4b0f      	ldr	r3, [pc, #60]	@ (8000c54 <Config_GPIO_LCD+0x6c>)
 8000c18:	2201      	movs	r2, #1
 8000c1a:	71da      	strb	r2, [r3, #7]
	GPIO_Init(&PE9);
 8000c1c:	480d      	ldr	r0, [pc, #52]	@ (8000c54 <Config_GPIO_LCD+0x6c>)
 8000c1e:	f7ff fece 	bl	80009be <GPIO_Init>

	PE10.pGPIOx = GPIOE;
 8000c22:	4b0e      	ldr	r3, [pc, #56]	@ (8000c5c <Config_GPIO_LCD+0x74>)
 8000c24:	4a0c      	ldr	r2, [pc, #48]	@ (8000c58 <Config_GPIO_LCD+0x70>)
 8000c26:	601a      	str	r2, [r3, #0]
	PE10.GPIO_Pin_Config.GPIO_PinNumber = GPIO_PIN_NUM_10;
 8000c28:	4b0c      	ldr	r3, [pc, #48]	@ (8000c5c <Config_GPIO_LCD+0x74>)
 8000c2a:	220a      	movs	r2, #10
 8000c2c:	711a      	strb	r2, [r3, #4]
	PE10.GPIO_Pin_Config.GPIO_PinMode = GPIO_MODER_OUTPUT;
 8000c2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c5c <Config_GPIO_LCD+0x74>)
 8000c30:	2201      	movs	r2, #1
 8000c32:	715a      	strb	r2, [r3, #5]
	PE10.GPIO_Pin_Config.GPIO_PinOPType = GPIO_OTYPER_PP;
 8000c34:	4b09      	ldr	r3, [pc, #36]	@ (8000c5c <Config_GPIO_LCD+0x74>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	721a      	strb	r2, [r3, #8]
	PE10.GPIO_Pin_Config.GPIO_PinSpeed = GPIO_OSPEEDR_HIGH;
 8000c3a:	4b08      	ldr	r3, [pc, #32]	@ (8000c5c <Config_GPIO_LCD+0x74>)
 8000c3c:	2202      	movs	r2, #2
 8000c3e:	719a      	strb	r2, [r3, #6]
	PE10.GPIO_Pin_Config.GPIO_PinPuPdControl = GPIO_PUPDR_PU;
 8000c40:	4b06      	ldr	r3, [pc, #24]	@ (8000c5c <Config_GPIO_LCD+0x74>)
 8000c42:	2201      	movs	r2, #1
 8000c44:	71da      	strb	r2, [r3, #7]
	GPIO_Init(&PE10);
 8000c46:	4805      	ldr	r0, [pc, #20]	@ (8000c5c <Config_GPIO_LCD+0x74>)
 8000c48:	f7ff feb9 	bl	80009be <GPIO_Init>
}
 8000c4c:	bf00      	nop
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	40023800 	.word	0x40023800
 8000c54:	20000118 	.word	0x20000118
 8000c58:	40021000 	.word	0x40021000
 8000c5c:	20000124 	.word	0x20000124

08000c60 <lcd_init>:

void lcd_init(){
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
	Config_GPIO_LCD();
 8000c64:	f7ff ffc0 	bl	8000be8 <Config_GPIO_LCD>
#ifdef lcd4_bit

    HAL_Delay(10); send_cmd_lcd (0x2);  // 4bit mode
 8000c68:	200a      	movs	r0, #10
 8000c6a:	f000 fbd5 	bl	8001418 <HAL_Delay>
 8000c6e:	2002      	movs	r0, #2
 8000c70:	f000 f855 	bl	8000d1e <send_cmd_lcd>
	HAL_Delay(1000); send_cmd_lcd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000c74:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c78:	f000 fbce 	bl	8001418 <HAL_Delay>
 8000c7c:	2028      	movs	r0, #40	@ 0x28
 8000c7e:	f000 f84e 	bl	8000d1e <send_cmd_lcd>
	HAL_Delay(1);
 8000c82:	2001      	movs	r0, #1
 8000c84:	f000 fbc8 	bl	8001418 <HAL_Delay>
#else
	send_cmd_lcd (0x38); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
	HAL_Delay(1);
#endif

	send_cmd_lcd(0x0C); HAL_Delay(1);
 8000c88:	200c      	movs	r0, #12
 8000c8a:	f000 f848 	bl	8000d1e <send_cmd_lcd>
 8000c8e:	2001      	movs	r0, #1
 8000c90:	f000 fbc2 	bl	8001418 <HAL_Delay>
	send_cmd_lcd(0x01); HAL_Delay(2);
 8000c94:	2001      	movs	r0, #1
 8000c96:	f000 f842 	bl	8000d1e <send_cmd_lcd>
 8000c9a:	2002      	movs	r0, #2
 8000c9c:	f000 fbbc 	bl	8001418 <HAL_Delay>
	send_cmd_lcd(0x06); HAL_Delay(1);
 8000ca0:	2006      	movs	r0, #6
 8000ca2:	f000 f83c 	bl	8000d1e <send_cmd_lcd>
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	f000 fbb6 	bl	8001418 <HAL_Delay>

	HAL_Delay(200);
 8000cac:	20c8      	movs	r0, #200	@ 0xc8
 8000cae:	f000 fbb3 	bl	8001418 <HAL_Delay>
	lcd_put_cur(0,0);
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	2000      	movs	r0, #0
 8000cb6:	f000 f89d 	bl	8000df4 <lcd_put_cur>
	send_string_lcd("Init LCD successfull"); // Test
 8000cba:	4810      	ldr	r0, [pc, #64]	@ (8000cfc <lcd_init+0x9c>)
 8000cbc:	f000 f878 	bl	8000db0 <send_string_lcd>
	lcd_put_cur(1,0);
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	f000 f896 	bl	8000df4 <lcd_put_cur>
	send_string_lcd("Init LCD successfull"); // Test
 8000cc8:	480c      	ldr	r0, [pc, #48]	@ (8000cfc <lcd_init+0x9c>)
 8000cca:	f000 f871 	bl	8000db0 <send_string_lcd>
	lcd_put_cur(2,0);
 8000cce:	2100      	movs	r1, #0
 8000cd0:	2002      	movs	r0, #2
 8000cd2:	f000 f88f 	bl	8000df4 <lcd_put_cur>
	send_string_lcd("Init LCD successfull"); // Test
 8000cd6:	4809      	ldr	r0, [pc, #36]	@ (8000cfc <lcd_init+0x9c>)
 8000cd8:	f000 f86a 	bl	8000db0 <send_string_lcd>
	lcd_put_cur(3,0);
 8000cdc:	2100      	movs	r1, #0
 8000cde:	2003      	movs	r0, #3
 8000ce0:	f000 f888 	bl	8000df4 <lcd_put_cur>
	send_string_lcd("Init LCD successfull"); // Test
 8000ce4:	4805      	ldr	r0, [pc, #20]	@ (8000cfc <lcd_init+0x9c>)
 8000ce6:	f000 f863 	bl	8000db0 <send_string_lcd>
	HAL_Delay(5000);
 8000cea:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000cee:	f000 fb93 	bl	8001418 <HAL_Delay>
	lcd_clear();
 8000cf2:	f000 f875 	bl	8000de0 <lcd_clear>
}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	0800294c 	.word	0x0800294c

08000d00 <write_data_lcd>:

void write_data_lcd(char data){
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	71fb      	strb	r3, [r7, #7]
	Write_data((uint8_t)data, DS3, LSB);
 8000d0a:	79fb      	ldrb	r3, [r7, #7]
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2107      	movs	r1, #7
 8000d10:	4618      	mov	r0, r3
 8000d12:	f7ff fc3b 	bl	800058c <Write_data>
//	GPIO_WriteToOutPutPin(PE10.pGPIOx, 10, High); HAL_Delay(1);
//	GPIO_WriteToOutPutPin(PE10.pGPIOx, 10, Low); HAL_Delay(1);
}
 8000d16:	bf00      	nop
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <send_cmd_lcd>:

void send_cmd_lcd(char data){
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b084      	sub	sp, #16
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	4603      	mov	r3, r0
 8000d26:	71fb      	strb	r3, [r7, #7]
//	GPIO_WriteToOutPutPin(PE9.pGPIOx, 9, Low); // Set RS low to write cmd

#ifdef lcd4_bit
	char tmp;
	tmp = ((data >> 4) | 0x20) & 0x3F;
 8000d28:	79fb      	ldrb	r3, [r7, #7]
 8000d2a:	091b      	lsrs	r3, r3, #4
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	f043 0320 	orr.w	r3, r3, #32
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000d38:	73fb      	strb	r3, [r7, #15]
	write_data_lcd(tmp);
 8000d3a:	7bfb      	ldrb	r3, [r7, #15]
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff ffdf 	bl	8000d00 <write_data_lcd>

	tmp = data & 0x0F;
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	f003 030f 	and.w	r3, r3, #15
 8000d48:	73fb      	strb	r3, [r7, #15]
	write_data_lcd(tmp);
 8000d4a:	7bfb      	ldrb	r3, [r7, #15]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff ffd7 	bl	8000d00 <write_data_lcd>
#else
	write_data_lcd(data);
#endif	// LCD_4bit
}
 8000d52:	bf00      	nop
 8000d54:	3710      	adds	r7, #16
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
	...

08000d5c <send_data_lcd>:

void send_data_lcd(char data){
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	71fb      	strb	r3, [r7, #7]
	GPIO_WriteToOutPutPin(PE9.pGPIOx, 9, High); // Set RS high to write data
 8000d66:	4b11      	ldr	r3, [pc, #68]	@ (8000dac <send_data_lcd+0x50>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	2109      	movs	r1, #9
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f7ff ff15 	bl	8000b9e <GPIO_WriteToOutPutPin>

#ifdef lcd4_bit
    char tmp;
	tmp = ((data >> 4) | (1<<4)) & 0x1F;
 8000d74:	79fb      	ldrb	r3, [r7, #7]
 8000d76:	091b      	lsrs	r3, r3, #4
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	f043 0310 	orr.w	r3, r3, #16
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	f003 031f 	and.w	r3, r3, #31
 8000d84:	73fb      	strb	r3, [r7, #15]
	write_data_lcd(tmp);
 8000d86:	7bfb      	ldrb	r3, [r7, #15]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff ffb9 	bl	8000d00 <write_data_lcd>

	tmp = (data | (1<<4)) & 0x1F;
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	f043 0310 	orr.w	r3, r3, #16
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	f003 031f 	and.w	r3, r3, #31
 8000d9a:	73fb      	strb	r3, [r7, #15]
	write_data_lcd(tmp);
 8000d9c:	7bfb      	ldrb	r3, [r7, #15]
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff ffae 	bl	8000d00 <write_data_lcd>
#else
	write_data_lcd(data);
#endif	// lcd4_bit

}
 8000da4:	bf00      	nop
 8000da6:	3710      	adds	r7, #16
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20000118 	.word	0x20000118

08000db0 <send_string_lcd>:

void send_string_lcd(char *data){
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
	while (*data){
 8000db8:	e009      	b.n	8000dce <send_string_lcd+0x1e>
		send_data_lcd(*data++);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	1c5a      	adds	r2, r3, #1
 8000dbe:	607a      	str	r2, [r7, #4]
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f7ff ffca 	bl	8000d5c <send_data_lcd>
		HAL_Delay(2);
 8000dc8:	2002      	movs	r0, #2
 8000dca:	f000 fb25 	bl	8001418 <HAL_Delay>
	while (*data){
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d1f1      	bne.n	8000dba <send_string_lcd+0xa>
	}
}
 8000dd6:	bf00      	nop
 8000dd8:	bf00      	nop
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <lcd_clear>:

void lcd_clear(){
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
	send_cmd_lcd(0x01); HAL_Delay(2);
 8000de4:	2001      	movs	r0, #1
 8000de6:	f7ff ff9a 	bl	8000d1e <send_cmd_lcd>
 8000dea:	2002      	movs	r0, #2
 8000dec:	f000 fb14 	bl	8001418 <HAL_Delay>
}
 8000df0:	bf00      	nop
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <lcd_put_cur>:

void lcd_put_cur(int row, int col){
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	6039      	str	r1, [r7, #0]
    switch (row){
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2b03      	cmp	r3, #3
 8000e02:	d81f      	bhi.n	8000e44 <lcd_put_cur+0x50>
 8000e04:	a201      	add	r2, pc, #4	@ (adr r2, 8000e0c <lcd_put_cur+0x18>)
 8000e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e0a:	bf00      	nop
 8000e0c:	08000e1d 	.word	0x08000e1d
 8000e10:	08000e27 	.word	0x08000e27
 8000e14:	08000e31 	.word	0x08000e31
 8000e18:	08000e3b 	.word	0x08000e3b
        case 0:
            col |= 0x80;
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e22:	603b      	str	r3, [r7, #0]
            break;
 8000e24:	e00e      	b.n	8000e44 <lcd_put_cur+0x50>
        case 1:
            col |= 0xC0;
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000e2c:	603b      	str	r3, [r7, #0]
            break;
 8000e2e:	e009      	b.n	8000e44 <lcd_put_cur+0x50>
        case 2:
            col |= 0x94;
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	f043 0394 	orr.w	r3, r3, #148	@ 0x94
 8000e36:	603b      	str	r3, [r7, #0]
            break;
 8000e38:	e004      	b.n	8000e44 <lcd_put_cur+0x50>
        case 3:
            col |= 0xD4;
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	f043 03d4 	orr.w	r3, r3, #212	@ 0xd4
 8000e40:	603b      	str	r3, [r7, #0]
            break;
 8000e42:	bf00      	nop
    }

    send_cmd_lcd (col);
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f7ff ff68 	bl	8000d1e <send_cmd_lcd>
}
 8000e4e:	bf00      	nop
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop

08000e58 <_ZN4RoomC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
#include "Device.h"

class Room : public Device {
private:
public:
    Room(std::string name) : Device(name) {}
 8000e58:	b590      	push	{r4, r7, lr}
 8000e5a:	b089      	sub	sp, #36	@ 0x24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	6039      	str	r1, [r7, #0]
 8000e62:	687c      	ldr	r4, [r7, #4]
 8000e64:	f107 0308 	add.w	r3, r7, #8
 8000e68:	6839      	ldr	r1, [r7, #0]
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f001 fb33 	bl	80024d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8000e70:	f107 0308 	add.w	r3, r7, #8
 8000e74:	4619      	mov	r1, r3
 8000e76:	4620      	mov	r0, r4
 8000e78:	f7ff fd2e 	bl	80008d8 <_ZN6DeviceC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8000e7c:	f107 0308 	add.w	r3, r7, #8
 8000e80:	4618      	mov	r0, r3
 8000e82:	f001 faf4 	bl	800246e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3724      	adds	r7, #36	@ 0x24
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd90      	pop	{r4, r7, pc}

08000e90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b09e      	sub	sp, #120	@ 0x78
 8000e94:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e96:	f000 fa4d 	bl	8001334 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e9a:	f000 f871 	bl	8000f80 <_Z18SystemClock_Configv>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
//  MX_I2C1_Init();
  MX_TIM1_Init();
 8000e9e:	f000 f9ad 	bl	80011fc <MX_TIM1_Init>
 8000ea2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ea6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  /* USER CODE BEGIN 2 */
	Room LVR("Living Room");
 8000ea8:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8000eac:	f107 0318 	add.w	r3, r7, #24
 8000eb0:	4930      	ldr	r1, [pc, #192]	@ (8000f74 <main+0xe4>)
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f001 fb38 	bl	8002528 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8000eb8:	f107 0218 	add.w	r2, r7, #24
 8000ebc:	f107 0310 	add.w	r3, r7, #16
 8000ec0:	4611      	mov	r1, r2
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff ffc8 	bl	8000e58 <_ZN4RoomC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8000ec8:	f107 0318 	add.w	r3, r7, #24
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f001 face 	bl	800246e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

      __attribute__((__always_inline__))
#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8000ed2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f000 f8c2 	bl	8001060 <_ZNSt15__new_allocatorIcED1Ev>
 8000edc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000ee0:	673b      	str	r3, [r7, #112]	@ 0x70
	Room KTR("Kitchen Room");
 8000ee2:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8000ee6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000eea:	4923      	ldr	r1, [pc, #140]	@ (8000f78 <main+0xe8>)
 8000eec:	4618      	mov	r0, r3
 8000eee:	f001 fb1b 	bl	8002528 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8000ef2:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8000ef6:	f107 0308 	add.w	r3, r7, #8
 8000efa:	4611      	mov	r1, r2
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff ffab 	bl	8000e58 <_ZN4RoomC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8000f02:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000f06:	4618      	mov	r0, r3
 8000f08:	f001 fab1 	bl	800246e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8000f0c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000f10:	4618      	mov	r0, r3
 8000f12:	f000 f8a5 	bl	8001060 <_ZNSt15__new_allocatorIcED1Ev>
 8000f16:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000f1a:	677b      	str	r3, [r7, #116]	@ 0x74
	Room BR("Bed Room");
 8000f1c:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 8000f20:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000f24:	4915      	ldr	r1, [pc, #84]	@ (8000f7c <main+0xec>)
 8000f26:	4618      	mov	r0, r3
 8000f28:	f001 fafe 	bl	8002528 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8000f2c:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8000f30:	463b      	mov	r3, r7
 8000f32:	4611      	mov	r1, r2
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff ff8f 	bl	8000e58 <_ZN4RoomC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8000f3a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f001 fa95 	bl	800246e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8000f44:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f000 f889 	bl	8001060 <_ZNSt15__new_allocatorIcED1Ev>
	LVR.TurnOnLed(Room::em_Led1);
 8000f4e:	f107 0310 	add.w	r3, r7, #16
 8000f52:	2180      	movs	r1, #128	@ 0x80
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff fd21 	bl	800099c <_ZN6Device9TurnOnLedEh>
	KTR.TurnOnLed(Room::em_Led2);
 8000f5a:	f107 0308 	add.w	r3, r7, #8
 8000f5e:	2140      	movs	r1, #64	@ 0x40
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff fd1b 	bl	800099c <_ZN6Device9TurnOnLedEh>
	BR.TurnOnLed(Room::em_Led3);
 8000f66:	463b      	mov	r3, r7
 8000f68:	2120      	movs	r1, #32
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff fd16 	bl	800099c <_ZN6Device9TurnOnLedEh>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f70:	bf00      	nop
 8000f72:	e7fd      	b.n	8000f70 <main+0xe0>
 8000f74:	08002964 	.word	0x08002964
 8000f78:	08002970 	.word	0x08002970
 8000f7c:	08002980 	.word	0x08002980

08000f80 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b094      	sub	sp, #80	@ 0x50
 8000f84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f86:	f107 0320 	add.w	r3, r7, #32
 8000f8a:	2230      	movs	r2, #48	@ 0x30
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f001 fbdc 	bl	800274c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f94:	f107 030c 	add.w	r3, r7, #12
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
 8000fa2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	60bb      	str	r3, [r7, #8]
 8000fa8:	4b28      	ldr	r3, [pc, #160]	@ (800104c <_Z18SystemClock_Configv+0xcc>)
 8000faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fac:	4a27      	ldr	r2, [pc, #156]	@ (800104c <_Z18SystemClock_Configv+0xcc>)
 8000fae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fb2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fb4:	4b25      	ldr	r3, [pc, #148]	@ (800104c <_Z18SystemClock_Configv+0xcc>)
 8000fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fbc:	60bb      	str	r3, [r7, #8]
 8000fbe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	607b      	str	r3, [r7, #4]
 8000fc4:	4b22      	ldr	r3, [pc, #136]	@ (8001050 <_Z18SystemClock_Configv+0xd0>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000fcc:	4a20      	ldr	r2, [pc, #128]	@ (8001050 <_Z18SystemClock_Configv+0xd0>)
 8000fce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000fd2:	6013      	str	r3, [r2, #0]
 8000fd4:	4b1e      	ldr	r3, [pc, #120]	@ (8001050 <_Z18SystemClock_Configv+0xd0>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000fdc:	607b      	str	r3, [r7, #4]
 8000fde:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fe8:	2310      	movs	r3, #16
 8000fea:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fec:	2300      	movs	r3, #0
 8000fee:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ff0:	f107 0320 	add.w	r3, r7, #32
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f000 fb19 	bl	800162c <HAL_RCC_OscConfig>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	bf14      	ite	ne
 8001000:	2301      	movne	r3, #1
 8001002:	2300      	moveq	r3, #0
 8001004:	b2db      	uxtb	r3, r3
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <_Z18SystemClock_Configv+0x8e>
  {
    Error_Handler();
 800100a:	f000 f823 	bl	8001054 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800100e:	230f      	movs	r3, #15
 8001010:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001012:	2300      	movs	r3, #0
 8001014:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001016:	2300      	movs	r3, #0
 8001018:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800101a:	2300      	movs	r3, #0
 800101c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800101e:	2300      	movs	r3, #0
 8001020:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001022:	f107 030c 	add.w	r3, r7, #12
 8001026:	2100      	movs	r1, #0
 8001028:	4618      	mov	r0, r3
 800102a:	f000 fd77 	bl	8001b1c <HAL_RCC_ClockConfig>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	bf14      	ite	ne
 8001034:	2301      	movne	r3, #1
 8001036:	2300      	moveq	r3, #0
 8001038:	b2db      	uxtb	r3, r3
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <_Z18SystemClock_Configv+0xc2>
  {
    Error_Handler();
 800103e:	f000 f809 	bl	8001054 <Error_Handler>
  }
}
 8001042:	bf00      	nop
 8001044:	3750      	adds	r7, #80	@ 0x50
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40023800 	.word	0x40023800
 8001050:	40007000 	.word	0x40007000

08001054 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001058:	b672      	cpsid	i
}
 800105a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800105c:	bf00      	nop
 800105e:	e7fd      	b.n	800105c <Error_Handler+0x8>

08001060 <_ZNSt15__new_allocatorIcED1Ev>:
#if __cplusplus >= 201103L
      __new_allocator& operator=(const __new_allocator&) = default;
#endif

#if __cplusplus <= 201703L
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	4618      	mov	r0, r3
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
	...

08001078 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	607b      	str	r3, [r7, #4]
 8001082:	4b10      	ldr	r3, [pc, #64]	@ (80010c4 <HAL_MspInit+0x4c>)
 8001084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001086:	4a0f      	ldr	r2, [pc, #60]	@ (80010c4 <HAL_MspInit+0x4c>)
 8001088:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800108c:	6453      	str	r3, [r2, #68]	@ 0x44
 800108e:	4b0d      	ldr	r3, [pc, #52]	@ (80010c4 <HAL_MspInit+0x4c>)
 8001090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001092:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001096:	607b      	str	r3, [r7, #4]
 8001098:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	603b      	str	r3, [r7, #0]
 800109e:	4b09      	ldr	r3, [pc, #36]	@ (80010c4 <HAL_MspInit+0x4c>)
 80010a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a2:	4a08      	ldr	r2, [pc, #32]	@ (80010c4 <HAL_MspInit+0x4c>)
 80010a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80010aa:	4b06      	ldr	r3, [pc, #24]	@ (80010c4 <HAL_MspInit+0x4c>)
 80010ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010b2:	603b      	str	r3, [r7, #0]
 80010b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010b6:	bf00      	nop
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	40023800 	.word	0x40023800

080010c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010cc:	bf00      	nop
 80010ce:	e7fd      	b.n	80010cc <NMI_Handler+0x4>

080010d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010d4:	bf00      	nop
 80010d6:	e7fd      	b.n	80010d4 <HardFault_Handler+0x4>

080010d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010dc:	bf00      	nop
 80010de:	e7fd      	b.n	80010dc <MemManage_Handler+0x4>

080010e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010e4:	bf00      	nop
 80010e6:	e7fd      	b.n	80010e4 <BusFault_Handler+0x4>

080010e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010ec:	bf00      	nop
 80010ee:	e7fd      	b.n	80010ec <UsageFault_Handler+0x4>

080010f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr

080010fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010fe:	b480      	push	{r7}
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001102:	bf00      	nop
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr

0800111a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800111e:	f000 f95b 	bl	80013d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}

08001126 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001126:	b480      	push	{r7}
 8001128:	af00      	add	r7, sp, #0
  return 1;
 800112a:	2301      	movs	r3, #1
}
 800112c:	4618      	mov	r0, r3
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr

08001136 <_kill>:

int _kill(int pid, int sig)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b082      	sub	sp, #8
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
 800113e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001140:	f001 fb60 	bl	8002804 <__errno>
 8001144:	4603      	mov	r3, r0
 8001146:	2216      	movs	r2, #22
 8001148:	601a      	str	r2, [r3, #0]
  return -1;
 800114a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800114e:	4618      	mov	r0, r3
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <_exit>:

void _exit (int status)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	b082      	sub	sp, #8
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800115e:	f04f 31ff 	mov.w	r1, #4294967295
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f7ff ffe7 	bl	8001136 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001168:	bf00      	nop
 800116a:	e7fd      	b.n	8001168 <_exit+0x12>

0800116c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001174:	4a14      	ldr	r2, [pc, #80]	@ (80011c8 <_sbrk+0x5c>)
 8001176:	4b15      	ldr	r3, [pc, #84]	@ (80011cc <_sbrk+0x60>)
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001180:	4b13      	ldr	r3, [pc, #76]	@ (80011d0 <_sbrk+0x64>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d102      	bne.n	800118e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001188:	4b11      	ldr	r3, [pc, #68]	@ (80011d0 <_sbrk+0x64>)
 800118a:	4a12      	ldr	r2, [pc, #72]	@ (80011d4 <_sbrk+0x68>)
 800118c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800118e:	4b10      	ldr	r3, [pc, #64]	@ (80011d0 <_sbrk+0x64>)
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4413      	add	r3, r2
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	429a      	cmp	r2, r3
 800119a:	d207      	bcs.n	80011ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800119c:	f001 fb32 	bl	8002804 <__errno>
 80011a0:	4603      	mov	r3, r0
 80011a2:	220c      	movs	r2, #12
 80011a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011a6:	f04f 33ff 	mov.w	r3, #4294967295
 80011aa:	e009      	b.n	80011c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011ac:	4b08      	ldr	r3, [pc, #32]	@ (80011d0 <_sbrk+0x64>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011b2:	4b07      	ldr	r3, [pc, #28]	@ (80011d0 <_sbrk+0x64>)
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4413      	add	r3, r2
 80011ba:	4a05      	ldr	r2, [pc, #20]	@ (80011d0 <_sbrk+0x64>)
 80011bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011be:	68fb      	ldr	r3, [r7, #12]
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3718      	adds	r7, #24
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20018000 	.word	0x20018000
 80011cc:	00000400 	.word	0x00000400
 80011d0:	20000130 	.word	0x20000130
 80011d4:	200002d0 	.word	0x200002d0

080011d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011dc:	4b06      	ldr	r3, [pc, #24]	@ (80011f8 <SystemInit+0x20>)
 80011de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011e2:	4a05      	ldr	r2, [pc, #20]	@ (80011f8 <SystemInit+0x20>)
 80011e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	e000ed00 	.word	0xe000ed00

080011fc <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001202:	f107 0308 	add.w	r3, r7, #8
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]
 800120c:	609a      	str	r2, [r3, #8]
 800120e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001210:	463b      	mov	r3, r7
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001218:	4b1e      	ldr	r3, [pc, #120]	@ (8001294 <MX_TIM1_Init+0x98>)
 800121a:	4a1f      	ldr	r2, [pc, #124]	@ (8001298 <MX_TIM1_Init+0x9c>)
 800121c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800121e:	4b1d      	ldr	r3, [pc, #116]	@ (8001294 <MX_TIM1_Init+0x98>)
 8001220:	2200      	movs	r2, #0
 8001222:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001224:	4b1b      	ldr	r3, [pc, #108]	@ (8001294 <MX_TIM1_Init+0x98>)
 8001226:	2200      	movs	r2, #0
 8001228:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800122a:	4b1a      	ldr	r3, [pc, #104]	@ (8001294 <MX_TIM1_Init+0x98>)
 800122c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001230:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001232:	4b18      	ldr	r3, [pc, #96]	@ (8001294 <MX_TIM1_Init+0x98>)
 8001234:	2200      	movs	r2, #0
 8001236:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001238:	4b16      	ldr	r3, [pc, #88]	@ (8001294 <MX_TIM1_Init+0x98>)
 800123a:	2200      	movs	r2, #0
 800123c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800123e:	4b15      	ldr	r3, [pc, #84]	@ (8001294 <MX_TIM1_Init+0x98>)
 8001240:	2200      	movs	r2, #0
 8001242:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001244:	4813      	ldr	r0, [pc, #76]	@ (8001294 <MX_TIM1_Init+0x98>)
 8001246:	f000 fe15 	bl	8001e74 <HAL_TIM_Base_Init>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001250:	f7ff ff00 	bl	8001054 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001254:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001258:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800125a:	f107 0308 	add.w	r3, r7, #8
 800125e:	4619      	mov	r1, r3
 8001260:	480c      	ldr	r0, [pc, #48]	@ (8001294 <MX_TIM1_Init+0x98>)
 8001262:	f000 fe56 	bl	8001f12 <HAL_TIM_ConfigClockSource>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800126c:	f7ff fef2 	bl	8001054 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001270:	2300      	movs	r3, #0
 8001272:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001274:	2300      	movs	r3, #0
 8001276:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001278:	463b      	mov	r3, r7
 800127a:	4619      	mov	r1, r3
 800127c:	4805      	ldr	r0, [pc, #20]	@ (8001294 <MX_TIM1_Init+0x98>)
 800127e:	f001 f82f 	bl	80022e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001288:	f7ff fee4 	bl	8001054 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800128c:	bf00      	nop
 800128e:	3718      	adds	r7, #24
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	20000134 	.word	0x20000134
 8001298:	40010000 	.word	0x40010000

0800129c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800129c:	b480      	push	{r7}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a0b      	ldr	r2, [pc, #44]	@ (80012d8 <HAL_TIM_Base_MspInit+0x3c>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d10d      	bne.n	80012ca <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	60fb      	str	r3, [r7, #12]
 80012b2:	4b0a      	ldr	r3, [pc, #40]	@ (80012dc <HAL_TIM_Base_MspInit+0x40>)
 80012b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012b6:	4a09      	ldr	r2, [pc, #36]	@ (80012dc <HAL_TIM_Base_MspInit+0x40>)
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80012be:	4b07      	ldr	r3, [pc, #28]	@ (80012dc <HAL_TIM_Base_MspInit+0x40>)
 80012c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80012ca:	bf00      	nop
 80012cc:	3714      	adds	r7, #20
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	40010000 	.word	0x40010000
 80012dc:	40023800 	.word	0x40023800

080012e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80012e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001318 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80012e4:	f7ff ff78 	bl	80011d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012e8:	480c      	ldr	r0, [pc, #48]	@ (800131c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012ea:	490d      	ldr	r1, [pc, #52]	@ (8001320 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001324 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012f0:	e002      	b.n	80012f8 <LoopCopyDataInit>

080012f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012f6:	3304      	adds	r3, #4

080012f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012fc:	d3f9      	bcc.n	80012f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001328 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001300:	4c0a      	ldr	r4, [pc, #40]	@ (800132c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001302:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001304:	e001      	b.n	800130a <LoopFillZerobss>

08001306 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001306:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001308:	3204      	adds	r2, #4

0800130a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800130a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800130c:	d3fb      	bcc.n	8001306 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800130e:	f001 fa7f 	bl	8002810 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001312:	f7ff fdbd 	bl	8000e90 <main>
  bx  lr    
 8001316:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001318:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800131c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001320:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001324:	080029f8 	.word	0x080029f8
  ldr r2, =_sbss
 8001328:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800132c:	200002cc 	.word	0x200002cc

08001330 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001330:	e7fe      	b.n	8001330 <ADC_IRQHandler>
	...

08001334 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001338:	4b0e      	ldr	r3, [pc, #56]	@ (8001374 <HAL_Init+0x40>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a0d      	ldr	r2, [pc, #52]	@ (8001374 <HAL_Init+0x40>)
 800133e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001342:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001344:	4b0b      	ldr	r3, [pc, #44]	@ (8001374 <HAL_Init+0x40>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a0a      	ldr	r2, [pc, #40]	@ (8001374 <HAL_Init+0x40>)
 800134a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800134e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001350:	4b08      	ldr	r3, [pc, #32]	@ (8001374 <HAL_Init+0x40>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a07      	ldr	r2, [pc, #28]	@ (8001374 <HAL_Init+0x40>)
 8001356:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800135a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800135c:	2003      	movs	r0, #3
 800135e:	f000 f931 	bl	80015c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001362:	200f      	movs	r0, #15
 8001364:	f000 f808 	bl	8001378 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001368:	f7ff fe86 	bl	8001078 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40023c00 	.word	0x40023c00

08001378 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001380:	4b12      	ldr	r3, [pc, #72]	@ (80013cc <HAL_InitTick+0x54>)
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	4b12      	ldr	r3, [pc, #72]	@ (80013d0 <HAL_InitTick+0x58>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	4619      	mov	r1, r3
 800138a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800138e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001392:	fbb2 f3f3 	udiv	r3, r2, r3
 8001396:	4618      	mov	r0, r3
 8001398:	f000 f93b 	bl	8001612 <HAL_SYSTICK_Config>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e00e      	b.n	80013c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2b0f      	cmp	r3, #15
 80013aa:	d80a      	bhi.n	80013c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013ac:	2200      	movs	r2, #0
 80013ae:	6879      	ldr	r1, [r7, #4]
 80013b0:	f04f 30ff 	mov.w	r0, #4294967295
 80013b4:	f000 f911 	bl	80015da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013b8:	4a06      	ldr	r2, [pc, #24]	@ (80013d4 <HAL_InitTick+0x5c>)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013be:	2300      	movs	r3, #0
 80013c0:	e000      	b.n	80013c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	20000000 	.word	0x20000000
 80013d0:	20000008 	.word	0x20000008
 80013d4:	20000004 	.word	0x20000004

080013d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013dc:	4b06      	ldr	r3, [pc, #24]	@ (80013f8 <HAL_IncTick+0x20>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	461a      	mov	r2, r3
 80013e2:	4b06      	ldr	r3, [pc, #24]	@ (80013fc <HAL_IncTick+0x24>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4413      	add	r3, r2
 80013e8:	4a04      	ldr	r2, [pc, #16]	@ (80013fc <HAL_IncTick+0x24>)
 80013ea:	6013      	str	r3, [r2, #0]
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	20000008 	.word	0x20000008
 80013fc:	2000017c 	.word	0x2000017c

08001400 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  return uwTick;
 8001404:	4b03      	ldr	r3, [pc, #12]	@ (8001414 <HAL_GetTick+0x14>)
 8001406:	681b      	ldr	r3, [r3, #0]
}
 8001408:	4618      	mov	r0, r3
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	2000017c 	.word	0x2000017c

08001418 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001420:	f7ff ffee 	bl	8001400 <HAL_GetTick>
 8001424:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001430:	d005      	beq.n	800143e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001432:	4b0a      	ldr	r3, [pc, #40]	@ (800145c <HAL_Delay+0x44>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	461a      	mov	r2, r3
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	4413      	add	r3, r2
 800143c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800143e:	bf00      	nop
 8001440:	f7ff ffde 	bl	8001400 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	68fa      	ldr	r2, [r7, #12]
 800144c:	429a      	cmp	r2, r3
 800144e:	d8f7      	bhi.n	8001440 <HAL_Delay+0x28>
  {
  }
}
 8001450:	bf00      	nop
 8001452:	bf00      	nop
 8001454:	3710      	adds	r7, #16
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	20000008 	.word	0x20000008

08001460 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f003 0307 	and.w	r3, r3, #7
 800146e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001470:	4b0c      	ldr	r3, [pc, #48]	@ (80014a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001476:	68ba      	ldr	r2, [r7, #8]
 8001478:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800147c:	4013      	ands	r3, r2
 800147e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001488:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800148c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001490:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001492:	4a04      	ldr	r2, [pc, #16]	@ (80014a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	60d3      	str	r3, [r2, #12]
}
 8001498:	bf00      	nop
 800149a:	3714      	adds	r7, #20
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	e000ed00 	.word	0xe000ed00

080014a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014ac:	4b04      	ldr	r3, [pc, #16]	@ (80014c0 <__NVIC_GetPriorityGrouping+0x18>)
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	0a1b      	lsrs	r3, r3, #8
 80014b2:	f003 0307 	and.w	r3, r3, #7
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	e000ed00 	.word	0xe000ed00

080014c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	6039      	str	r1, [r7, #0]
 80014ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	db0a      	blt.n	80014ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	b2da      	uxtb	r2, r3
 80014dc:	490c      	ldr	r1, [pc, #48]	@ (8001510 <__NVIC_SetPriority+0x4c>)
 80014de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e2:	0112      	lsls	r2, r2, #4
 80014e4:	b2d2      	uxtb	r2, r2
 80014e6:	440b      	add	r3, r1
 80014e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014ec:	e00a      	b.n	8001504 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	b2da      	uxtb	r2, r3
 80014f2:	4908      	ldr	r1, [pc, #32]	@ (8001514 <__NVIC_SetPriority+0x50>)
 80014f4:	79fb      	ldrb	r3, [r7, #7]
 80014f6:	f003 030f 	and.w	r3, r3, #15
 80014fa:	3b04      	subs	r3, #4
 80014fc:	0112      	lsls	r2, r2, #4
 80014fe:	b2d2      	uxtb	r2, r2
 8001500:	440b      	add	r3, r1
 8001502:	761a      	strb	r2, [r3, #24]
}
 8001504:	bf00      	nop
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr
 8001510:	e000e100 	.word	0xe000e100
 8001514:	e000ed00 	.word	0xe000ed00

08001518 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001518:	b480      	push	{r7}
 800151a:	b089      	sub	sp, #36	@ 0x24
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f003 0307 	and.w	r3, r3, #7
 800152a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	f1c3 0307 	rsb	r3, r3, #7
 8001532:	2b04      	cmp	r3, #4
 8001534:	bf28      	it	cs
 8001536:	2304      	movcs	r3, #4
 8001538:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	3304      	adds	r3, #4
 800153e:	2b06      	cmp	r3, #6
 8001540:	d902      	bls.n	8001548 <NVIC_EncodePriority+0x30>
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	3b03      	subs	r3, #3
 8001546:	e000      	b.n	800154a <NVIC_EncodePriority+0x32>
 8001548:	2300      	movs	r3, #0
 800154a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800154c:	f04f 32ff 	mov.w	r2, #4294967295
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	43da      	mvns	r2, r3
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	401a      	ands	r2, r3
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001560:	f04f 31ff 	mov.w	r1, #4294967295
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	fa01 f303 	lsl.w	r3, r1, r3
 800156a:	43d9      	mvns	r1, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001570:	4313      	orrs	r3, r2
         );
}
 8001572:	4618      	mov	r0, r3
 8001574:	3724      	adds	r7, #36	@ 0x24
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
	...

08001580 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	3b01      	subs	r3, #1
 800158c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001590:	d301      	bcc.n	8001596 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001592:	2301      	movs	r3, #1
 8001594:	e00f      	b.n	80015b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001596:	4a0a      	ldr	r2, [pc, #40]	@ (80015c0 <SysTick_Config+0x40>)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	3b01      	subs	r3, #1
 800159c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800159e:	210f      	movs	r1, #15
 80015a0:	f04f 30ff 	mov.w	r0, #4294967295
 80015a4:	f7ff ff8e 	bl	80014c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015a8:	4b05      	ldr	r3, [pc, #20]	@ (80015c0 <SysTick_Config+0x40>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ae:	4b04      	ldr	r3, [pc, #16]	@ (80015c0 <SysTick_Config+0x40>)
 80015b0:	2207      	movs	r2, #7
 80015b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015b4:	2300      	movs	r3, #0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	e000e010 	.word	0xe000e010

080015c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f7ff ff47 	bl	8001460 <__NVIC_SetPriorityGrouping>
}
 80015d2:	bf00      	nop
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015da:	b580      	push	{r7, lr}
 80015dc:	b086      	sub	sp, #24
 80015de:	af00      	add	r7, sp, #0
 80015e0:	4603      	mov	r3, r0
 80015e2:	60b9      	str	r1, [r7, #8]
 80015e4:	607a      	str	r2, [r7, #4]
 80015e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015e8:	2300      	movs	r3, #0
 80015ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015ec:	f7ff ff5c 	bl	80014a8 <__NVIC_GetPriorityGrouping>
 80015f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	68b9      	ldr	r1, [r7, #8]
 80015f6:	6978      	ldr	r0, [r7, #20]
 80015f8:	f7ff ff8e 	bl	8001518 <NVIC_EncodePriority>
 80015fc:	4602      	mov	r2, r0
 80015fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001602:	4611      	mov	r1, r2
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff ff5d 	bl	80014c4 <__NVIC_SetPriority>
}
 800160a:	bf00      	nop
 800160c:	3718      	adds	r7, #24
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	b082      	sub	sp, #8
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f7ff ffb0 	bl	8001580 <SysTick_Config>
 8001620:	4603      	mov	r3, r0
}
 8001622:	4618      	mov	r0, r3
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
	...

0800162c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d101      	bne.n	800163e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e267      	b.n	8001b0e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	2b00      	cmp	r3, #0
 8001648:	d075      	beq.n	8001736 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800164a:	4b88      	ldr	r3, [pc, #544]	@ (800186c <HAL_RCC_OscConfig+0x240>)
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	f003 030c 	and.w	r3, r3, #12
 8001652:	2b04      	cmp	r3, #4
 8001654:	d00c      	beq.n	8001670 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001656:	4b85      	ldr	r3, [pc, #532]	@ (800186c <HAL_RCC_OscConfig+0x240>)
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800165e:	2b08      	cmp	r3, #8
 8001660:	d112      	bne.n	8001688 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001662:	4b82      	ldr	r3, [pc, #520]	@ (800186c <HAL_RCC_OscConfig+0x240>)
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800166a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800166e:	d10b      	bne.n	8001688 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001670:	4b7e      	ldr	r3, [pc, #504]	@ (800186c <HAL_RCC_OscConfig+0x240>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001678:	2b00      	cmp	r3, #0
 800167a:	d05b      	beq.n	8001734 <HAL_RCC_OscConfig+0x108>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d157      	bne.n	8001734 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e242      	b.n	8001b0e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001690:	d106      	bne.n	80016a0 <HAL_RCC_OscConfig+0x74>
 8001692:	4b76      	ldr	r3, [pc, #472]	@ (800186c <HAL_RCC_OscConfig+0x240>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a75      	ldr	r2, [pc, #468]	@ (800186c <HAL_RCC_OscConfig+0x240>)
 8001698:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800169c:	6013      	str	r3, [r2, #0]
 800169e:	e01d      	b.n	80016dc <HAL_RCC_OscConfig+0xb0>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80016a8:	d10c      	bne.n	80016c4 <HAL_RCC_OscConfig+0x98>
 80016aa:	4b70      	ldr	r3, [pc, #448]	@ (800186c <HAL_RCC_OscConfig+0x240>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a6f      	ldr	r2, [pc, #444]	@ (800186c <HAL_RCC_OscConfig+0x240>)
 80016b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016b4:	6013      	str	r3, [r2, #0]
 80016b6:	4b6d      	ldr	r3, [pc, #436]	@ (800186c <HAL_RCC_OscConfig+0x240>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a6c      	ldr	r2, [pc, #432]	@ (800186c <HAL_RCC_OscConfig+0x240>)
 80016bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016c0:	6013      	str	r3, [r2, #0]
 80016c2:	e00b      	b.n	80016dc <HAL_RCC_OscConfig+0xb0>
 80016c4:	4b69      	ldr	r3, [pc, #420]	@ (800186c <HAL_RCC_OscConfig+0x240>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a68      	ldr	r2, [pc, #416]	@ (800186c <HAL_RCC_OscConfig+0x240>)
 80016ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016ce:	6013      	str	r3, [r2, #0]
 80016d0:	4b66      	ldr	r3, [pc, #408]	@ (800186c <HAL_RCC_OscConfig+0x240>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a65      	ldr	r2, [pc, #404]	@ (800186c <HAL_RCC_OscConfig+0x240>)
 80016d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d013      	beq.n	800170c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e4:	f7ff fe8c 	bl	8001400 <HAL_GetTick>
 80016e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ea:	e008      	b.n	80016fe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016ec:	f7ff fe88 	bl	8001400 <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b64      	cmp	r3, #100	@ 0x64
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e207      	b.n	8001b0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016fe:	4b5b      	ldr	r3, [pc, #364]	@ (800186c <HAL_RCC_OscConfig+0x240>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d0f0      	beq.n	80016ec <HAL_RCC_OscConfig+0xc0>
 800170a:	e014      	b.n	8001736 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800170c:	f7ff fe78 	bl	8001400 <HAL_GetTick>
 8001710:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001712:	e008      	b.n	8001726 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001714:	f7ff fe74 	bl	8001400 <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	2b64      	cmp	r3, #100	@ 0x64
 8001720:	d901      	bls.n	8001726 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e1f3      	b.n	8001b0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001726:	4b51      	ldr	r3, [pc, #324]	@ (800186c <HAL_RCC_OscConfig+0x240>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d1f0      	bne.n	8001714 <HAL_RCC_OscConfig+0xe8>
 8001732:	e000      	b.n	8001736 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001734:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	2b00      	cmp	r3, #0
 8001740:	d063      	beq.n	800180a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001742:	4b4a      	ldr	r3, [pc, #296]	@ (800186c <HAL_RCC_OscConfig+0x240>)
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	f003 030c 	and.w	r3, r3, #12
 800174a:	2b00      	cmp	r3, #0
 800174c:	d00b      	beq.n	8001766 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800174e:	4b47      	ldr	r3, [pc, #284]	@ (800186c <HAL_RCC_OscConfig+0x240>)
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001756:	2b08      	cmp	r3, #8
 8001758:	d11c      	bne.n	8001794 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800175a:	4b44      	ldr	r3, [pc, #272]	@ (800186c <HAL_RCC_OscConfig+0x240>)
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d116      	bne.n	8001794 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001766:	4b41      	ldr	r3, [pc, #260]	@ (800186c <HAL_RCC_OscConfig+0x240>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	2b00      	cmp	r3, #0
 8001770:	d005      	beq.n	800177e <HAL_RCC_OscConfig+0x152>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	68db      	ldr	r3, [r3, #12]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d001      	beq.n	800177e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e1c7      	b.n	8001b0e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800177e:	4b3b      	ldr	r3, [pc, #236]	@ (800186c <HAL_RCC_OscConfig+0x240>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	691b      	ldr	r3, [r3, #16]
 800178a:	00db      	lsls	r3, r3, #3
 800178c:	4937      	ldr	r1, [pc, #220]	@ (800186c <HAL_RCC_OscConfig+0x240>)
 800178e:	4313      	orrs	r3, r2
 8001790:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001792:	e03a      	b.n	800180a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d020      	beq.n	80017de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800179c:	4b34      	ldr	r3, [pc, #208]	@ (8001870 <HAL_RCC_OscConfig+0x244>)
 800179e:	2201      	movs	r2, #1
 80017a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a2:	f7ff fe2d 	bl	8001400 <HAL_GetTick>
 80017a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017a8:	e008      	b.n	80017bc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017aa:	f7ff fe29 	bl	8001400 <HAL_GetTick>
 80017ae:	4602      	mov	r2, r0
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d901      	bls.n	80017bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80017b8:	2303      	movs	r3, #3
 80017ba:	e1a8      	b.n	8001b0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017bc:	4b2b      	ldr	r3, [pc, #172]	@ (800186c <HAL_RCC_OscConfig+0x240>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0302 	and.w	r3, r3, #2
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d0f0      	beq.n	80017aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017c8:	4b28      	ldr	r3, [pc, #160]	@ (800186c <HAL_RCC_OscConfig+0x240>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	691b      	ldr	r3, [r3, #16]
 80017d4:	00db      	lsls	r3, r3, #3
 80017d6:	4925      	ldr	r1, [pc, #148]	@ (800186c <HAL_RCC_OscConfig+0x240>)
 80017d8:	4313      	orrs	r3, r2
 80017da:	600b      	str	r3, [r1, #0]
 80017dc:	e015      	b.n	800180a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017de:	4b24      	ldr	r3, [pc, #144]	@ (8001870 <HAL_RCC_OscConfig+0x244>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e4:	f7ff fe0c 	bl	8001400 <HAL_GetTick>
 80017e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ea:	e008      	b.n	80017fe <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017ec:	f7ff fe08 	bl	8001400 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e187      	b.n	8001b0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017fe:	4b1b      	ldr	r3, [pc, #108]	@ (800186c <HAL_RCC_OscConfig+0x240>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d1f0      	bne.n	80017ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0308 	and.w	r3, r3, #8
 8001812:	2b00      	cmp	r3, #0
 8001814:	d036      	beq.n	8001884 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	695b      	ldr	r3, [r3, #20]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d016      	beq.n	800184c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800181e:	4b15      	ldr	r3, [pc, #84]	@ (8001874 <HAL_RCC_OscConfig+0x248>)
 8001820:	2201      	movs	r2, #1
 8001822:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001824:	f7ff fdec 	bl	8001400 <HAL_GetTick>
 8001828:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800182a:	e008      	b.n	800183e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800182c:	f7ff fde8 	bl	8001400 <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	2b02      	cmp	r3, #2
 8001838:	d901      	bls.n	800183e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e167      	b.n	8001b0e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800183e:	4b0b      	ldr	r3, [pc, #44]	@ (800186c <HAL_RCC_OscConfig+0x240>)
 8001840:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	2b00      	cmp	r3, #0
 8001848:	d0f0      	beq.n	800182c <HAL_RCC_OscConfig+0x200>
 800184a:	e01b      	b.n	8001884 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800184c:	4b09      	ldr	r3, [pc, #36]	@ (8001874 <HAL_RCC_OscConfig+0x248>)
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001852:	f7ff fdd5 	bl	8001400 <HAL_GetTick>
 8001856:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001858:	e00e      	b.n	8001878 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800185a:	f7ff fdd1 	bl	8001400 <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	2b02      	cmp	r3, #2
 8001866:	d907      	bls.n	8001878 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e150      	b.n	8001b0e <HAL_RCC_OscConfig+0x4e2>
 800186c:	40023800 	.word	0x40023800
 8001870:	42470000 	.word	0x42470000
 8001874:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001878:	4b88      	ldr	r3, [pc, #544]	@ (8001a9c <HAL_RCC_OscConfig+0x470>)
 800187a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800187c:	f003 0302 	and.w	r3, r3, #2
 8001880:	2b00      	cmp	r3, #0
 8001882:	d1ea      	bne.n	800185a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0304 	and.w	r3, r3, #4
 800188c:	2b00      	cmp	r3, #0
 800188e:	f000 8097 	beq.w	80019c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001892:	2300      	movs	r3, #0
 8001894:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001896:	4b81      	ldr	r3, [pc, #516]	@ (8001a9c <HAL_RCC_OscConfig+0x470>)
 8001898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800189a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d10f      	bne.n	80018c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	60bb      	str	r3, [r7, #8]
 80018a6:	4b7d      	ldr	r3, [pc, #500]	@ (8001a9c <HAL_RCC_OscConfig+0x470>)
 80018a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018aa:	4a7c      	ldr	r2, [pc, #496]	@ (8001a9c <HAL_RCC_OscConfig+0x470>)
 80018ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80018b2:	4b7a      	ldr	r3, [pc, #488]	@ (8001a9c <HAL_RCC_OscConfig+0x470>)
 80018b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018ba:	60bb      	str	r3, [r7, #8]
 80018bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018be:	2301      	movs	r3, #1
 80018c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018c2:	4b77      	ldr	r3, [pc, #476]	@ (8001aa0 <HAL_RCC_OscConfig+0x474>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d118      	bne.n	8001900 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018ce:	4b74      	ldr	r3, [pc, #464]	@ (8001aa0 <HAL_RCC_OscConfig+0x474>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a73      	ldr	r2, [pc, #460]	@ (8001aa0 <HAL_RCC_OscConfig+0x474>)
 80018d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018da:	f7ff fd91 	bl	8001400 <HAL_GetTick>
 80018de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018e0:	e008      	b.n	80018f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018e2:	f7ff fd8d 	bl	8001400 <HAL_GetTick>
 80018e6:	4602      	mov	r2, r0
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d901      	bls.n	80018f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e10c      	b.n	8001b0e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018f4:	4b6a      	ldr	r3, [pc, #424]	@ (8001aa0 <HAL_RCC_OscConfig+0x474>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d0f0      	beq.n	80018e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	2b01      	cmp	r3, #1
 8001906:	d106      	bne.n	8001916 <HAL_RCC_OscConfig+0x2ea>
 8001908:	4b64      	ldr	r3, [pc, #400]	@ (8001a9c <HAL_RCC_OscConfig+0x470>)
 800190a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800190c:	4a63      	ldr	r2, [pc, #396]	@ (8001a9c <HAL_RCC_OscConfig+0x470>)
 800190e:	f043 0301 	orr.w	r3, r3, #1
 8001912:	6713      	str	r3, [r2, #112]	@ 0x70
 8001914:	e01c      	b.n	8001950 <HAL_RCC_OscConfig+0x324>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	2b05      	cmp	r3, #5
 800191c:	d10c      	bne.n	8001938 <HAL_RCC_OscConfig+0x30c>
 800191e:	4b5f      	ldr	r3, [pc, #380]	@ (8001a9c <HAL_RCC_OscConfig+0x470>)
 8001920:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001922:	4a5e      	ldr	r2, [pc, #376]	@ (8001a9c <HAL_RCC_OscConfig+0x470>)
 8001924:	f043 0304 	orr.w	r3, r3, #4
 8001928:	6713      	str	r3, [r2, #112]	@ 0x70
 800192a:	4b5c      	ldr	r3, [pc, #368]	@ (8001a9c <HAL_RCC_OscConfig+0x470>)
 800192c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800192e:	4a5b      	ldr	r2, [pc, #364]	@ (8001a9c <HAL_RCC_OscConfig+0x470>)
 8001930:	f043 0301 	orr.w	r3, r3, #1
 8001934:	6713      	str	r3, [r2, #112]	@ 0x70
 8001936:	e00b      	b.n	8001950 <HAL_RCC_OscConfig+0x324>
 8001938:	4b58      	ldr	r3, [pc, #352]	@ (8001a9c <HAL_RCC_OscConfig+0x470>)
 800193a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800193c:	4a57      	ldr	r2, [pc, #348]	@ (8001a9c <HAL_RCC_OscConfig+0x470>)
 800193e:	f023 0301 	bic.w	r3, r3, #1
 8001942:	6713      	str	r3, [r2, #112]	@ 0x70
 8001944:	4b55      	ldr	r3, [pc, #340]	@ (8001a9c <HAL_RCC_OscConfig+0x470>)
 8001946:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001948:	4a54      	ldr	r2, [pc, #336]	@ (8001a9c <HAL_RCC_OscConfig+0x470>)
 800194a:	f023 0304 	bic.w	r3, r3, #4
 800194e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d015      	beq.n	8001984 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001958:	f7ff fd52 	bl	8001400 <HAL_GetTick>
 800195c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800195e:	e00a      	b.n	8001976 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001960:	f7ff fd4e 	bl	8001400 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800196e:	4293      	cmp	r3, r2
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e0cb      	b.n	8001b0e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001976:	4b49      	ldr	r3, [pc, #292]	@ (8001a9c <HAL_RCC_OscConfig+0x470>)
 8001978:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800197a:	f003 0302 	and.w	r3, r3, #2
 800197e:	2b00      	cmp	r3, #0
 8001980:	d0ee      	beq.n	8001960 <HAL_RCC_OscConfig+0x334>
 8001982:	e014      	b.n	80019ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001984:	f7ff fd3c 	bl	8001400 <HAL_GetTick>
 8001988:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800198a:	e00a      	b.n	80019a2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800198c:	f7ff fd38 	bl	8001400 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	f241 3288 	movw	r2, #5000	@ 0x1388
 800199a:	4293      	cmp	r3, r2
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e0b5      	b.n	8001b0e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019a2:	4b3e      	ldr	r3, [pc, #248]	@ (8001a9c <HAL_RCC_OscConfig+0x470>)
 80019a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d1ee      	bne.n	800198c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80019ae:	7dfb      	ldrb	r3, [r7, #23]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d105      	bne.n	80019c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019b4:	4b39      	ldr	r3, [pc, #228]	@ (8001a9c <HAL_RCC_OscConfig+0x470>)
 80019b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b8:	4a38      	ldr	r2, [pc, #224]	@ (8001a9c <HAL_RCC_OscConfig+0x470>)
 80019ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80019be:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	f000 80a1 	beq.w	8001b0c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019ca:	4b34      	ldr	r3, [pc, #208]	@ (8001a9c <HAL_RCC_OscConfig+0x470>)
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	f003 030c 	and.w	r3, r3, #12
 80019d2:	2b08      	cmp	r3, #8
 80019d4:	d05c      	beq.n	8001a90 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	699b      	ldr	r3, [r3, #24]
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d141      	bne.n	8001a62 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019de:	4b31      	ldr	r3, [pc, #196]	@ (8001aa4 <HAL_RCC_OscConfig+0x478>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e4:	f7ff fd0c 	bl	8001400 <HAL_GetTick>
 80019e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019ea:	e008      	b.n	80019fe <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ec:	f7ff fd08 	bl	8001400 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e087      	b.n	8001b0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019fe:	4b27      	ldr	r3, [pc, #156]	@ (8001a9c <HAL_RCC_OscConfig+0x470>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d1f0      	bne.n	80019ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	69da      	ldr	r2, [r3, #28]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a1b      	ldr	r3, [r3, #32]
 8001a12:	431a      	orrs	r2, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a18:	019b      	lsls	r3, r3, #6
 8001a1a:	431a      	orrs	r2, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a20:	085b      	lsrs	r3, r3, #1
 8001a22:	3b01      	subs	r3, #1
 8001a24:	041b      	lsls	r3, r3, #16
 8001a26:	431a      	orrs	r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a2c:	061b      	lsls	r3, r3, #24
 8001a2e:	491b      	ldr	r1, [pc, #108]	@ (8001a9c <HAL_RCC_OscConfig+0x470>)
 8001a30:	4313      	orrs	r3, r2
 8001a32:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a34:	4b1b      	ldr	r3, [pc, #108]	@ (8001aa4 <HAL_RCC_OscConfig+0x478>)
 8001a36:	2201      	movs	r2, #1
 8001a38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a3a:	f7ff fce1 	bl	8001400 <HAL_GetTick>
 8001a3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a40:	e008      	b.n	8001a54 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a42:	f7ff fcdd 	bl	8001400 <HAL_GetTick>
 8001a46:	4602      	mov	r2, r0
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d901      	bls.n	8001a54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e05c      	b.n	8001b0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a54:	4b11      	ldr	r3, [pc, #68]	@ (8001a9c <HAL_RCC_OscConfig+0x470>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d0f0      	beq.n	8001a42 <HAL_RCC_OscConfig+0x416>
 8001a60:	e054      	b.n	8001b0c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a62:	4b10      	ldr	r3, [pc, #64]	@ (8001aa4 <HAL_RCC_OscConfig+0x478>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a68:	f7ff fcca 	bl	8001400 <HAL_GetTick>
 8001a6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a6e:	e008      	b.n	8001a82 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a70:	f7ff fcc6 	bl	8001400 <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e045      	b.n	8001b0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a82:	4b06      	ldr	r3, [pc, #24]	@ (8001a9c <HAL_RCC_OscConfig+0x470>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d1f0      	bne.n	8001a70 <HAL_RCC_OscConfig+0x444>
 8001a8e:	e03d      	b.n	8001b0c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d107      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e038      	b.n	8001b0e <HAL_RCC_OscConfig+0x4e2>
 8001a9c:	40023800 	.word	0x40023800
 8001aa0:	40007000 	.word	0x40007000
 8001aa4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001aa8:	4b1b      	ldr	r3, [pc, #108]	@ (8001b18 <HAL_RCC_OscConfig+0x4ec>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	699b      	ldr	r3, [r3, #24]
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d028      	beq.n	8001b08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d121      	bne.n	8001b08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d11a      	bne.n	8001b08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ad2:	68fa      	ldr	r2, [r7, #12]
 8001ad4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001ad8:	4013      	ands	r3, r2
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001ade:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d111      	bne.n	8001b08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aee:	085b      	lsrs	r3, r3, #1
 8001af0:	3b01      	subs	r3, #1
 8001af2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d107      	bne.n	8001b08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d001      	beq.n	8001b0c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e000      	b.n	8001b0e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3718      	adds	r7, #24
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	40023800 	.word	0x40023800

08001b1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d101      	bne.n	8001b30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e0cc      	b.n	8001cca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b30:	4b68      	ldr	r3, [pc, #416]	@ (8001cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0307 	and.w	r3, r3, #7
 8001b38:	683a      	ldr	r2, [r7, #0]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d90c      	bls.n	8001b58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b3e:	4b65      	ldr	r3, [pc, #404]	@ (8001cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b40:	683a      	ldr	r2, [r7, #0]
 8001b42:	b2d2      	uxtb	r2, r2
 8001b44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b46:	4b63      	ldr	r3, [pc, #396]	@ (8001cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0307 	and.w	r3, r3, #7
 8001b4e:	683a      	ldr	r2, [r7, #0]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d001      	beq.n	8001b58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e0b8      	b.n	8001cca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0302 	and.w	r3, r3, #2
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d020      	beq.n	8001ba6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0304 	and.w	r3, r3, #4
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d005      	beq.n	8001b7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b70:	4b59      	ldr	r3, [pc, #356]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	4a58      	ldr	r2, [pc, #352]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b76:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001b7a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0308 	and.w	r3, r3, #8
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d005      	beq.n	8001b94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b88:	4b53      	ldr	r3, [pc, #332]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	4a52      	ldr	r2, [pc, #328]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001b92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b94:	4b50      	ldr	r3, [pc, #320]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	494d      	ldr	r1, [pc, #308]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d044      	beq.n	8001c3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d107      	bne.n	8001bca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bba:	4b47      	ldr	r3, [pc, #284]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d119      	bne.n	8001bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e07f      	b.n	8001cca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d003      	beq.n	8001bda <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bd6:	2b03      	cmp	r3, #3
 8001bd8:	d107      	bne.n	8001bea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bda:	4b3f      	ldr	r3, [pc, #252]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d109      	bne.n	8001bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e06f      	b.n	8001cca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bea:	4b3b      	ldr	r3, [pc, #236]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d101      	bne.n	8001bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e067      	b.n	8001cca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bfa:	4b37      	ldr	r3, [pc, #220]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f023 0203 	bic.w	r2, r3, #3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	4934      	ldr	r1, [pc, #208]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c0c:	f7ff fbf8 	bl	8001400 <HAL_GetTick>
 8001c10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c12:	e00a      	b.n	8001c2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c14:	f7ff fbf4 	bl	8001400 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d901      	bls.n	8001c2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e04f      	b.n	8001cca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c2a:	4b2b      	ldr	r3, [pc, #172]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f003 020c 	and.w	r2, r3, #12
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d1eb      	bne.n	8001c14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c3c:	4b25      	ldr	r3, [pc, #148]	@ (8001cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0307 	and.w	r3, r3, #7
 8001c44:	683a      	ldr	r2, [r7, #0]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d20c      	bcs.n	8001c64 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c4a:	4b22      	ldr	r3, [pc, #136]	@ (8001cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c4c:	683a      	ldr	r2, [r7, #0]
 8001c4e:	b2d2      	uxtb	r2, r2
 8001c50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c52:	4b20      	ldr	r3, [pc, #128]	@ (8001cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0307 	and.w	r3, r3, #7
 8001c5a:	683a      	ldr	r2, [r7, #0]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d001      	beq.n	8001c64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e032      	b.n	8001cca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0304 	and.w	r3, r3, #4
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d008      	beq.n	8001c82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c70:	4b19      	ldr	r3, [pc, #100]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	4916      	ldr	r1, [pc, #88]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0308 	and.w	r3, r3, #8
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d009      	beq.n	8001ca2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c8e:	4b12      	ldr	r3, [pc, #72]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	691b      	ldr	r3, [r3, #16]
 8001c9a:	00db      	lsls	r3, r3, #3
 8001c9c:	490e      	ldr	r1, [pc, #56]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ca2:	f000 f821 	bl	8001ce8 <HAL_RCC_GetSysClockFreq>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	091b      	lsrs	r3, r3, #4
 8001cae:	f003 030f 	and.w	r3, r3, #15
 8001cb2:	490a      	ldr	r1, [pc, #40]	@ (8001cdc <HAL_RCC_ClockConfig+0x1c0>)
 8001cb4:	5ccb      	ldrb	r3, [r1, r3]
 8001cb6:	fa22 f303 	lsr.w	r3, r2, r3
 8001cba:	4a09      	ldr	r2, [pc, #36]	@ (8001ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8001cbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001cbe:	4b09      	ldr	r3, [pc, #36]	@ (8001ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff fb58 	bl	8001378 <HAL_InitTick>

  return HAL_OK;
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3710      	adds	r7, #16
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40023c00 	.word	0x40023c00
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	0800298c 	.word	0x0800298c
 8001ce0:	20000000 	.word	0x20000000
 8001ce4:	20000004 	.word	0x20000004

08001ce8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ce8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cec:	b090      	sub	sp, #64	@ 0x40
 8001cee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d00:	4b59      	ldr	r3, [pc, #356]	@ (8001e68 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f003 030c 	and.w	r3, r3, #12
 8001d08:	2b08      	cmp	r3, #8
 8001d0a:	d00d      	beq.n	8001d28 <HAL_RCC_GetSysClockFreq+0x40>
 8001d0c:	2b08      	cmp	r3, #8
 8001d0e:	f200 80a1 	bhi.w	8001e54 <HAL_RCC_GetSysClockFreq+0x16c>
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d002      	beq.n	8001d1c <HAL_RCC_GetSysClockFreq+0x34>
 8001d16:	2b04      	cmp	r3, #4
 8001d18:	d003      	beq.n	8001d22 <HAL_RCC_GetSysClockFreq+0x3a>
 8001d1a:	e09b      	b.n	8001e54 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d1c:	4b53      	ldr	r3, [pc, #332]	@ (8001e6c <HAL_RCC_GetSysClockFreq+0x184>)
 8001d1e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001d20:	e09b      	b.n	8001e5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d22:	4b53      	ldr	r3, [pc, #332]	@ (8001e70 <HAL_RCC_GetSysClockFreq+0x188>)
 8001d24:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001d26:	e098      	b.n	8001e5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d28:	4b4f      	ldr	r3, [pc, #316]	@ (8001e68 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001d30:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d32:	4b4d      	ldr	r3, [pc, #308]	@ (8001e68 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d028      	beq.n	8001d90 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d3e:	4b4a      	ldr	r3, [pc, #296]	@ (8001e68 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	099b      	lsrs	r3, r3, #6
 8001d44:	2200      	movs	r2, #0
 8001d46:	623b      	str	r3, [r7, #32]
 8001d48:	627a      	str	r2, [r7, #36]	@ 0x24
 8001d4a:	6a3b      	ldr	r3, [r7, #32]
 8001d4c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001d50:	2100      	movs	r1, #0
 8001d52:	4b47      	ldr	r3, [pc, #284]	@ (8001e70 <HAL_RCC_GetSysClockFreq+0x188>)
 8001d54:	fb03 f201 	mul.w	r2, r3, r1
 8001d58:	2300      	movs	r3, #0
 8001d5a:	fb00 f303 	mul.w	r3, r0, r3
 8001d5e:	4413      	add	r3, r2
 8001d60:	4a43      	ldr	r2, [pc, #268]	@ (8001e70 <HAL_RCC_GetSysClockFreq+0x188>)
 8001d62:	fba0 1202 	umull	r1, r2, r0, r2
 8001d66:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001d68:	460a      	mov	r2, r1
 8001d6a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001d6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001d6e:	4413      	add	r3, r2
 8001d70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d74:	2200      	movs	r2, #0
 8001d76:	61bb      	str	r3, [r7, #24]
 8001d78:	61fa      	str	r2, [r7, #28]
 8001d7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d7e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001d82:	f7fe fa2f 	bl	80001e4 <__aeabi_uldivmod>
 8001d86:	4602      	mov	r2, r0
 8001d88:	460b      	mov	r3, r1
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001d8e:	e053      	b.n	8001e38 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d90:	4b35      	ldr	r3, [pc, #212]	@ (8001e68 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	099b      	lsrs	r3, r3, #6
 8001d96:	2200      	movs	r2, #0
 8001d98:	613b      	str	r3, [r7, #16]
 8001d9a:	617a      	str	r2, [r7, #20]
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001da2:	f04f 0b00 	mov.w	fp, #0
 8001da6:	4652      	mov	r2, sl
 8001da8:	465b      	mov	r3, fp
 8001daa:	f04f 0000 	mov.w	r0, #0
 8001dae:	f04f 0100 	mov.w	r1, #0
 8001db2:	0159      	lsls	r1, r3, #5
 8001db4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001db8:	0150      	lsls	r0, r2, #5
 8001dba:	4602      	mov	r2, r0
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	ebb2 080a 	subs.w	r8, r2, sl
 8001dc2:	eb63 090b 	sbc.w	r9, r3, fp
 8001dc6:	f04f 0200 	mov.w	r2, #0
 8001dca:	f04f 0300 	mov.w	r3, #0
 8001dce:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001dd2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001dd6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001dda:	ebb2 0408 	subs.w	r4, r2, r8
 8001dde:	eb63 0509 	sbc.w	r5, r3, r9
 8001de2:	f04f 0200 	mov.w	r2, #0
 8001de6:	f04f 0300 	mov.w	r3, #0
 8001dea:	00eb      	lsls	r3, r5, #3
 8001dec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001df0:	00e2      	lsls	r2, r4, #3
 8001df2:	4614      	mov	r4, r2
 8001df4:	461d      	mov	r5, r3
 8001df6:	eb14 030a 	adds.w	r3, r4, sl
 8001dfa:	603b      	str	r3, [r7, #0]
 8001dfc:	eb45 030b 	adc.w	r3, r5, fp
 8001e00:	607b      	str	r3, [r7, #4]
 8001e02:	f04f 0200 	mov.w	r2, #0
 8001e06:	f04f 0300 	mov.w	r3, #0
 8001e0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e0e:	4629      	mov	r1, r5
 8001e10:	028b      	lsls	r3, r1, #10
 8001e12:	4621      	mov	r1, r4
 8001e14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e18:	4621      	mov	r1, r4
 8001e1a:	028a      	lsls	r2, r1, #10
 8001e1c:	4610      	mov	r0, r2
 8001e1e:	4619      	mov	r1, r3
 8001e20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e22:	2200      	movs	r2, #0
 8001e24:	60bb      	str	r3, [r7, #8]
 8001e26:	60fa      	str	r2, [r7, #12]
 8001e28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e2c:	f7fe f9da 	bl	80001e4 <__aeabi_uldivmod>
 8001e30:	4602      	mov	r2, r0
 8001e32:	460b      	mov	r3, r1
 8001e34:	4613      	mov	r3, r2
 8001e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001e38:	4b0b      	ldr	r3, [pc, #44]	@ (8001e68 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	0c1b      	lsrs	r3, r3, #16
 8001e3e:	f003 0303 	and.w	r3, r3, #3
 8001e42:	3301      	adds	r3, #1
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001e48:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e50:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001e52:	e002      	b.n	8001e5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e54:	4b05      	ldr	r3, [pc, #20]	@ (8001e6c <HAL_RCC_GetSysClockFreq+0x184>)
 8001e56:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001e58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3740      	adds	r7, #64	@ 0x40
 8001e60:	46bd      	mov	sp, r7
 8001e62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e66:	bf00      	nop
 8001e68:	40023800 	.word	0x40023800
 8001e6c:	00f42400 	.word	0x00f42400
 8001e70:	017d7840 	.word	0x017d7840

08001e74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d101      	bne.n	8001e86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e041      	b.n	8001f0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d106      	bne.n	8001ea0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f7ff f9fe 	bl	800129c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2202      	movs	r2, #2
 8001ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	3304      	adds	r3, #4
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	4610      	mov	r0, r2
 8001eb4:	f000 f8f4 	bl	80020a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2201      	movs	r2, #1
 8001eec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2201      	movs	r2, #1
 8001efc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b084      	sub	sp, #16
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
 8001f1a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d101      	bne.n	8001f2e <HAL_TIM_ConfigClockSource+0x1c>
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	e0b4      	b.n	8002098 <HAL_TIM_ConfigClockSource+0x186>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2201      	movs	r2, #1
 8001f32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2202      	movs	r2, #2
 8001f3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001f4c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001f54:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	68ba      	ldr	r2, [r7, #8]
 8001f5c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f66:	d03e      	beq.n	8001fe6 <HAL_TIM_ConfigClockSource+0xd4>
 8001f68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f6c:	f200 8087 	bhi.w	800207e <HAL_TIM_ConfigClockSource+0x16c>
 8001f70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f74:	f000 8086 	beq.w	8002084 <HAL_TIM_ConfigClockSource+0x172>
 8001f78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f7c:	d87f      	bhi.n	800207e <HAL_TIM_ConfigClockSource+0x16c>
 8001f7e:	2b70      	cmp	r3, #112	@ 0x70
 8001f80:	d01a      	beq.n	8001fb8 <HAL_TIM_ConfigClockSource+0xa6>
 8001f82:	2b70      	cmp	r3, #112	@ 0x70
 8001f84:	d87b      	bhi.n	800207e <HAL_TIM_ConfigClockSource+0x16c>
 8001f86:	2b60      	cmp	r3, #96	@ 0x60
 8001f88:	d050      	beq.n	800202c <HAL_TIM_ConfigClockSource+0x11a>
 8001f8a:	2b60      	cmp	r3, #96	@ 0x60
 8001f8c:	d877      	bhi.n	800207e <HAL_TIM_ConfigClockSource+0x16c>
 8001f8e:	2b50      	cmp	r3, #80	@ 0x50
 8001f90:	d03c      	beq.n	800200c <HAL_TIM_ConfigClockSource+0xfa>
 8001f92:	2b50      	cmp	r3, #80	@ 0x50
 8001f94:	d873      	bhi.n	800207e <HAL_TIM_ConfigClockSource+0x16c>
 8001f96:	2b40      	cmp	r3, #64	@ 0x40
 8001f98:	d058      	beq.n	800204c <HAL_TIM_ConfigClockSource+0x13a>
 8001f9a:	2b40      	cmp	r3, #64	@ 0x40
 8001f9c:	d86f      	bhi.n	800207e <HAL_TIM_ConfigClockSource+0x16c>
 8001f9e:	2b30      	cmp	r3, #48	@ 0x30
 8001fa0:	d064      	beq.n	800206c <HAL_TIM_ConfigClockSource+0x15a>
 8001fa2:	2b30      	cmp	r3, #48	@ 0x30
 8001fa4:	d86b      	bhi.n	800207e <HAL_TIM_ConfigClockSource+0x16c>
 8001fa6:	2b20      	cmp	r3, #32
 8001fa8:	d060      	beq.n	800206c <HAL_TIM_ConfigClockSource+0x15a>
 8001faa:	2b20      	cmp	r3, #32
 8001fac:	d867      	bhi.n	800207e <HAL_TIM_ConfigClockSource+0x16c>
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d05c      	beq.n	800206c <HAL_TIM_ConfigClockSource+0x15a>
 8001fb2:	2b10      	cmp	r3, #16
 8001fb4:	d05a      	beq.n	800206c <HAL_TIM_ConfigClockSource+0x15a>
 8001fb6:	e062      	b.n	800207e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001fc8:	f000 f96a 	bl	80022a0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8001fda:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	68ba      	ldr	r2, [r7, #8]
 8001fe2:	609a      	str	r2, [r3, #8]
      break;
 8001fe4:	e04f      	b.n	8002086 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001ff6:	f000 f953 	bl	80022a0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	689a      	ldr	r2, [r3, #8]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002008:	609a      	str	r2, [r3, #8]
      break;
 800200a:	e03c      	b.n	8002086 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002018:	461a      	mov	r2, r3
 800201a:	f000 f8c7 	bl	80021ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2150      	movs	r1, #80	@ 0x50
 8002024:	4618      	mov	r0, r3
 8002026:	f000 f920 	bl	800226a <TIM_ITRx_SetConfig>
      break;
 800202a:	e02c      	b.n	8002086 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002038:	461a      	mov	r2, r3
 800203a:	f000 f8e6 	bl	800220a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2160      	movs	r1, #96	@ 0x60
 8002044:	4618      	mov	r0, r3
 8002046:	f000 f910 	bl	800226a <TIM_ITRx_SetConfig>
      break;
 800204a:	e01c      	b.n	8002086 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002058:	461a      	mov	r2, r3
 800205a:	f000 f8a7 	bl	80021ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2140      	movs	r1, #64	@ 0x40
 8002064:	4618      	mov	r0, r3
 8002066:	f000 f900 	bl	800226a <TIM_ITRx_SetConfig>
      break;
 800206a:	e00c      	b.n	8002086 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4619      	mov	r1, r3
 8002076:	4610      	mov	r0, r2
 8002078:	f000 f8f7 	bl	800226a <TIM_ITRx_SetConfig>
      break;
 800207c:	e003      	b.n	8002086 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	73fb      	strb	r3, [r7, #15]
      break;
 8002082:	e000      	b.n	8002086 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002084:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2201      	movs	r2, #1
 800208a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002096:	7bfb      	ldrb	r3, [r7, #15]
}
 8002098:	4618      	mov	r0, r3
 800209a:	3710      	adds	r7, #16
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4a37      	ldr	r2, [pc, #220]	@ (8002190 <TIM_Base_SetConfig+0xf0>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d00f      	beq.n	80020d8 <TIM_Base_SetConfig+0x38>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020be:	d00b      	beq.n	80020d8 <TIM_Base_SetConfig+0x38>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4a34      	ldr	r2, [pc, #208]	@ (8002194 <TIM_Base_SetConfig+0xf4>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d007      	beq.n	80020d8 <TIM_Base_SetConfig+0x38>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4a33      	ldr	r2, [pc, #204]	@ (8002198 <TIM_Base_SetConfig+0xf8>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d003      	beq.n	80020d8 <TIM_Base_SetConfig+0x38>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4a32      	ldr	r2, [pc, #200]	@ (800219c <TIM_Base_SetConfig+0xfc>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d108      	bne.n	80020ea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80020de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	68fa      	ldr	r2, [r7, #12]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a28      	ldr	r2, [pc, #160]	@ (8002190 <TIM_Base_SetConfig+0xf0>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d01b      	beq.n	800212a <TIM_Base_SetConfig+0x8a>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020f8:	d017      	beq.n	800212a <TIM_Base_SetConfig+0x8a>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a25      	ldr	r2, [pc, #148]	@ (8002194 <TIM_Base_SetConfig+0xf4>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d013      	beq.n	800212a <TIM_Base_SetConfig+0x8a>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a24      	ldr	r2, [pc, #144]	@ (8002198 <TIM_Base_SetConfig+0xf8>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d00f      	beq.n	800212a <TIM_Base_SetConfig+0x8a>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a23      	ldr	r2, [pc, #140]	@ (800219c <TIM_Base_SetConfig+0xfc>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d00b      	beq.n	800212a <TIM_Base_SetConfig+0x8a>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a22      	ldr	r2, [pc, #136]	@ (80021a0 <TIM_Base_SetConfig+0x100>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d007      	beq.n	800212a <TIM_Base_SetConfig+0x8a>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a21      	ldr	r2, [pc, #132]	@ (80021a4 <TIM_Base_SetConfig+0x104>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d003      	beq.n	800212a <TIM_Base_SetConfig+0x8a>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a20      	ldr	r2, [pc, #128]	@ (80021a8 <TIM_Base_SetConfig+0x108>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d108      	bne.n	800213c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002130:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	4313      	orrs	r3, r2
 800213a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	695b      	ldr	r3, [r3, #20]
 8002146:	4313      	orrs	r3, r2
 8002148:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	689a      	ldr	r2, [r3, #8]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a0c      	ldr	r2, [pc, #48]	@ (8002190 <TIM_Base_SetConfig+0xf0>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d103      	bne.n	800216a <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	691a      	ldr	r2, [r3, #16]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f043 0204 	orr.w	r2, r3, #4
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2201      	movs	r2, #1
 800217a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	601a      	str	r2, [r3, #0]
}
 8002182:	bf00      	nop
 8002184:	3714      	adds	r7, #20
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	40010000 	.word	0x40010000
 8002194:	40000400 	.word	0x40000400
 8002198:	40000800 	.word	0x40000800
 800219c:	40000c00 	.word	0x40000c00
 80021a0:	40014000 	.word	0x40014000
 80021a4:	40014400 	.word	0x40014400
 80021a8:	40014800 	.word	0x40014800

080021ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b087      	sub	sp, #28
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	6a1b      	ldr	r3, [r3, #32]
 80021bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6a1b      	ldr	r3, [r3, #32]
 80021c2:	f023 0201 	bic.w	r2, r3, #1
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80021d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	011b      	lsls	r3, r3, #4
 80021dc:	693a      	ldr	r2, [r7, #16]
 80021de:	4313      	orrs	r3, r2
 80021e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	f023 030a 	bic.w	r3, r3, #10
 80021e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80021ea:	697a      	ldr	r2, [r7, #20]
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	693a      	ldr	r2, [r7, #16]
 80021f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	697a      	ldr	r2, [r7, #20]
 80021fc:	621a      	str	r2, [r3, #32]
}
 80021fe:	bf00      	nop
 8002200:	371c      	adds	r7, #28
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr

0800220a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800220a:	b480      	push	{r7}
 800220c:	b087      	sub	sp, #28
 800220e:	af00      	add	r7, sp, #0
 8002210:	60f8      	str	r0, [r7, #12]
 8002212:	60b9      	str	r1, [r7, #8]
 8002214:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	6a1b      	ldr	r3, [r3, #32]
 800221a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6a1b      	ldr	r3, [r3, #32]
 8002220:	f023 0210 	bic.w	r2, r3, #16
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002234:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	031b      	lsls	r3, r3, #12
 800223a:	693a      	ldr	r2, [r7, #16]
 800223c:	4313      	orrs	r3, r2
 800223e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002246:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	011b      	lsls	r3, r3, #4
 800224c:	697a      	ldr	r2, [r7, #20]
 800224e:	4313      	orrs	r3, r2
 8002250:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	693a      	ldr	r2, [r7, #16]
 8002256:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	697a      	ldr	r2, [r7, #20]
 800225c:	621a      	str	r2, [r3, #32]
}
 800225e:	bf00      	nop
 8002260:	371c      	adds	r7, #28
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr

0800226a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800226a:	b480      	push	{r7}
 800226c:	b085      	sub	sp, #20
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
 8002272:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002280:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002282:	683a      	ldr	r2, [r7, #0]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	4313      	orrs	r3, r2
 8002288:	f043 0307 	orr.w	r3, r3, #7
 800228c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	68fa      	ldr	r2, [r7, #12]
 8002292:	609a      	str	r2, [r3, #8]
}
 8002294:	bf00      	nop
 8002296:	3714      	adds	r7, #20
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b087      	sub	sp, #28
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	607a      	str	r2, [r7, #4]
 80022ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80022ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	021a      	lsls	r2, r3, #8
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	431a      	orrs	r2, r3
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	697a      	ldr	r2, [r7, #20]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	697a      	ldr	r2, [r7, #20]
 80022d2:	609a      	str	r2, [r3, #8]
}
 80022d4:	bf00      	nop
 80022d6:	371c      	adds	r7, #28
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d101      	bne.n	80022f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80022f4:	2302      	movs	r3, #2
 80022f6:	e050      	b.n	800239a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2202      	movs	r2, #2
 8002304:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800231e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68fa      	ldr	r2, [r7, #12]
 8002326:	4313      	orrs	r3, r2
 8002328:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	68fa      	ldr	r2, [r7, #12]
 8002330:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a1c      	ldr	r2, [pc, #112]	@ (80023a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d018      	beq.n	800236e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002344:	d013      	beq.n	800236e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a18      	ldr	r2, [pc, #96]	@ (80023ac <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d00e      	beq.n	800236e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a16      	ldr	r2, [pc, #88]	@ (80023b0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d009      	beq.n	800236e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a15      	ldr	r2, [pc, #84]	@ (80023b4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d004      	beq.n	800236e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a13      	ldr	r2, [pc, #76]	@ (80023b8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d10c      	bne.n	8002388 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002374:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	68ba      	ldr	r2, [r7, #8]
 800237c:	4313      	orrs	r3, r2
 800237e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	68ba      	ldr	r2, [r7, #8]
 8002386:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3714      	adds	r7, #20
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	40010000 	.word	0x40010000
 80023ac:	40000400 	.word	0x40000400
 80023b0:	40000800 	.word	0x40000800
 80023b4:	40000c00 	.word	0x40000c00
 80023b8:	40014000 	.word	0x40014000

080023bc <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 80023bc:	b10a      	cbz	r2, 80023c2 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 80023be:	f000 ba4d 	b.w	800285c <memcpy>
 80023c2:	4770      	bx	lr

080023c4 <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
 80023c4:	b10a      	cbz	r2, 80023ca <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6>
 80023c6:	f000 b9b1 	b.w	800272c <memcmp>
 80023ca:	4610      	mov	r0, r2
 80023cc:	4770      	bx	lr

080023ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_S_allocateERS3_j>:
 80023ce:	1e08      	subs	r0, r1, #0
 80023d0:	b508      	push	{r3, lr}
 80023d2:	da01      	bge.n	80023d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_S_allocateERS3_j+0xa>
 80023d4:	f000 f8d3 	bl	800257e <_ZSt17__throw_bad_allocv>
 80023d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80023dc:	f000 b8be 	b.w	800255c <_Znwj>

080023e0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>:
 80023e0:	f850 3b08 	ldr.w	r3, [r0], #8
 80023e4:	1a1b      	subs	r3, r3, r0
 80023e6:	4258      	negs	r0, r3
 80023e8:	4158      	adcs	r0, r3
 80023ea:	4770      	bx	lr

080023ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 80023ec:	680b      	ldr	r3, [r1, #0]
 80023ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023f2:	b510      	push	{r4, lr}
 80023f4:	d302      	bcc.n	80023fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 80023f6:	480b      	ldr	r0, [pc, #44]	@ (8002424 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x38>)
 80023f8:	f000 f8c7 	bl	800258a <_ZSt20__throw_length_errorPKc>
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d90b      	bls.n	8002418 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8002400:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8002404:	ea4f 0442 	mov.w	r4, r2, lsl #1
 8002408:	d206      	bcs.n	8002418 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800240a:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800240e:	bf2a      	itet	cs
 8002410:	f06f 4340 	mvncs.w	r3, #3221225472	@ 0xc0000000
 8002414:	600c      	strcc	r4, [r1, #0]
 8002416:	600b      	strcs	r3, [r1, #0]
 8002418:	6809      	ldr	r1, [r1, #0]
 800241a:	3101      	adds	r1, #1
 800241c:	f7ff ffd7 	bl	80023ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_S_allocateERS3_j>
 8002420:	bd10      	pop	{r4, pc}
 8002422:	bf00      	nop
 8002424:	0800299c 	.word	0x0800299c

08002428 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_destroyEj>:
 8002428:	6800      	ldr	r0, [r0, #0]
 800242a:	f000 b895 	b.w	8002558 <_ZdlPv>

0800242e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 800242e:	b510      	push	{r4, lr}
 8002430:	4604      	mov	r4, r0
 8002432:	f7ff ffd5 	bl	80023e0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8002436:	b918      	cbnz	r0, 8002440 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x12>
 8002438:	68a1      	ldr	r1, [r4, #8]
 800243a:	4620      	mov	r0, r4
 800243c:	f7ff fff4 	bl	8002428 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_destroyEj>
 8002440:	bd10      	pop	{r4, pc}

08002442 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8002442:	2a01      	cmp	r2, #1
 8002444:	b410      	push	{r4}
 8002446:	d104      	bne.n	8002452 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 8002448:	780a      	ldrb	r2, [r1, #0]
 800244a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800244e:	7002      	strb	r2, [r0, #0]
 8002450:	4770      	bx	lr
 8002452:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002456:	f7ff bfb1 	b.w	80023bc <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

0800245a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 800245a:	b508      	push	{r3, lr}
 800245c:	1a52      	subs	r2, r2, r1
 800245e:	f7ff fff0 	bl	8002442 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8002462:	bd08      	pop	{r3, pc}

08002464 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8002464:	b508      	push	{r3, lr}
 8002466:	1a52      	subs	r2, r2, r1
 8002468:	f7ff ffeb 	bl	8002442 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800246c:	bd08      	pop	{r3, pc}

0800246e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 800246e:	b510      	push	{r4, lr}
 8002470:	4604      	mov	r4, r0
 8002472:	f7ff ffdc 	bl	800242e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8002476:	4620      	mov	r0, r4
 8002478:	bd10      	pop	{r4, pc}

0800247a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>:
 800247a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800247c:	6847      	ldr	r7, [r0, #4]
 800247e:	4605      	mov	r5, r0
 8002480:	4608      	mov	r0, r1
 8002482:	460e      	mov	r6, r1
 8002484:	f7fd fea6 	bl	80001d4 <strlen>
 8002488:	4287      	cmp	r7, r0
 800248a:	4604      	mov	r4, r0
 800248c:	463a      	mov	r2, r7
 800248e:	4631      	mov	r1, r6
 8002490:	bf28      	it	cs
 8002492:	4602      	movcs	r2, r0
 8002494:	6828      	ldr	r0, [r5, #0]
 8002496:	f7ff ff95 	bl	80023c4 <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 800249a:	b900      	cbnz	r0, 800249e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc+0x24>
 800249c:	1b38      	subs	r0, r7, r4
 800249e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080024a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 80024a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80024a2:	1a53      	subs	r3, r2, r1
 80024a4:	2b0f      	cmp	r3, #15
 80024a6:	4604      	mov	r4, r0
 80024a8:	460d      	mov	r5, r1
 80024aa:	4616      	mov	r6, r2
 80024ac:	9301      	str	r3, [sp, #4]
 80024ae:	d906      	bls.n	80024be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x1e>
 80024b0:	2200      	movs	r2, #0
 80024b2:	a901      	add	r1, sp, #4
 80024b4:	f7ff ff9a 	bl	80023ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80024b8:	9b01      	ldr	r3, [sp, #4]
 80024ba:	6020      	str	r0, [r4, #0]
 80024bc:	60a3      	str	r3, [r4, #8]
 80024be:	4632      	mov	r2, r6
 80024c0:	4629      	mov	r1, r5
 80024c2:	6820      	ldr	r0, [r4, #0]
 80024c4:	f7ff ffc9 	bl	800245a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 80024c8:	9b01      	ldr	r3, [sp, #4]
 80024ca:	6822      	ldr	r2, [r4, #0]
 80024cc:	6063      	str	r3, [r4, #4]
 80024ce:	2100      	movs	r1, #0
 80024d0:	54d1      	strb	r1, [r2, r3]
 80024d2:	b002      	add	sp, #8
 80024d4:	bd70      	pop	{r4, r5, r6, pc}

080024d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 80024d6:	f100 0208 	add.w	r2, r0, #8
 80024da:	b510      	push	{r4, lr}
 80024dc:	6002      	str	r2, [r0, #0]
 80024de:	e9d1 1200 	ldrd	r1, r2, [r1]
 80024e2:	4604      	mov	r4, r0
 80024e4:	f04f 0300 	mov.w	r3, #0
 80024e8:	440a      	add	r2, r1
 80024ea:	f7ff ffd9 	bl	80024a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 80024ee:	4620      	mov	r0, r4
 80024f0:	bd10      	pop	{r4, pc}

080024f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 80024f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80024f4:	1a53      	subs	r3, r2, r1
 80024f6:	2b0f      	cmp	r3, #15
 80024f8:	4604      	mov	r4, r0
 80024fa:	460d      	mov	r5, r1
 80024fc:	4616      	mov	r6, r2
 80024fe:	9301      	str	r3, [sp, #4]
 8002500:	d906      	bls.n	8002510 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x1e>
 8002502:	2200      	movs	r2, #0
 8002504:	a901      	add	r1, sp, #4
 8002506:	f7ff ff71 	bl	80023ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800250a:	9b01      	ldr	r3, [sp, #4]
 800250c:	6020      	str	r0, [r4, #0]
 800250e:	60a3      	str	r3, [r4, #8]
 8002510:	4632      	mov	r2, r6
 8002512:	4629      	mov	r1, r5
 8002514:	6820      	ldr	r0, [r4, #0]
 8002516:	f7ff ffa5 	bl	8002464 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 800251a:	9b01      	ldr	r3, [sp, #4]
 800251c:	6822      	ldr	r2, [r4, #0]
 800251e:	6063      	str	r3, [r4, #4]
 8002520:	2100      	movs	r1, #0
 8002522:	54d1      	strb	r1, [r2, r3]
 8002524:	b002      	add	sp, #8
 8002526:	bd70      	pop	{r4, r5, r6, pc}

08002528 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8002528:	b538      	push	{r3, r4, r5, lr}
 800252a:	f100 0308 	add.w	r3, r0, #8
 800252e:	4604      	mov	r4, r0
 8002530:	6003      	str	r3, [r0, #0]
 8002532:	460d      	mov	r5, r1
 8002534:	b911      	cbnz	r1, 800253c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x14>
 8002536:	4807      	ldr	r0, [pc, #28]	@ (8002554 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x2c>)
 8002538:	f000 f824 	bl	8002584 <_ZSt19__throw_logic_errorPKc>
 800253c:	4608      	mov	r0, r1
 800253e:	f7fd fe49 	bl	80001d4 <strlen>
 8002542:	f04f 0300 	mov.w	r3, #0
 8002546:	182a      	adds	r2, r5, r0
 8002548:	4629      	mov	r1, r5
 800254a:	4620      	mov	r0, r4
 800254c:	f7ff ffd1 	bl	80024f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8002550:	4620      	mov	r0, r4
 8002552:	bd38      	pop	{r3, r4, r5, pc}
 8002554:	080029b4 	.word	0x080029b4

08002558 <_ZdlPv>:
 8002558:	f000 b832 	b.w	80025c0 <free>

0800255c <_Znwj>:
 800255c:	2801      	cmp	r0, #1
 800255e:	bf38      	it	cc
 8002560:	2001      	movcc	r0, #1
 8002562:	b510      	push	{r4, lr}
 8002564:	4604      	mov	r4, r0
 8002566:	4620      	mov	r0, r4
 8002568:	f000 f822 	bl	80025b0 <malloc>
 800256c:	b100      	cbz	r0, 8002570 <_Znwj+0x14>
 800256e:	bd10      	pop	{r4, pc}
 8002570:	f000 f80e 	bl	8002590 <_ZSt15get_new_handlerv>
 8002574:	b908      	cbnz	r0, 800257a <_Znwj+0x1e>
 8002576:	f000 f813 	bl	80025a0 <abort>
 800257a:	4780      	blx	r0
 800257c:	e7f3      	b.n	8002566 <_Znwj+0xa>

0800257e <_ZSt17__throw_bad_allocv>:
 800257e:	b508      	push	{r3, lr}
 8002580:	f000 f80e 	bl	80025a0 <abort>

08002584 <_ZSt19__throw_logic_errorPKc>:
 8002584:	b508      	push	{r3, lr}
 8002586:	f000 f80b 	bl	80025a0 <abort>

0800258a <_ZSt20__throw_length_errorPKc>:
 800258a:	b508      	push	{r3, lr}
 800258c:	f000 f808 	bl	80025a0 <abort>

08002590 <_ZSt15get_new_handlerv>:
 8002590:	4b02      	ldr	r3, [pc, #8]	@ (800259c <_ZSt15get_new_handlerv+0xc>)
 8002592:	6818      	ldr	r0, [r3, #0]
 8002594:	f3bf 8f5b 	dmb	ish
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	20000180 	.word	0x20000180

080025a0 <abort>:
 80025a0:	b508      	push	{r3, lr}
 80025a2:	2006      	movs	r0, #6
 80025a4:	f000 f902 	bl	80027ac <raise>
 80025a8:	2001      	movs	r0, #1
 80025aa:	f7fe fdd4 	bl	8001156 <_exit>
	...

080025b0 <malloc>:
 80025b0:	4b02      	ldr	r3, [pc, #8]	@ (80025bc <malloc+0xc>)
 80025b2:	4601      	mov	r1, r0
 80025b4:	6818      	ldr	r0, [r3, #0]
 80025b6:	f000 b82d 	b.w	8002614 <_malloc_r>
 80025ba:	bf00      	nop
 80025bc:	2000000c 	.word	0x2000000c

080025c0 <free>:
 80025c0:	4b02      	ldr	r3, [pc, #8]	@ (80025cc <free+0xc>)
 80025c2:	4601      	mov	r1, r0
 80025c4:	6818      	ldr	r0, [r3, #0]
 80025c6:	f000 b957 	b.w	8002878 <_free_r>
 80025ca:	bf00      	nop
 80025cc:	2000000c 	.word	0x2000000c

080025d0 <sbrk_aligned>:
 80025d0:	b570      	push	{r4, r5, r6, lr}
 80025d2:	4e0f      	ldr	r6, [pc, #60]	@ (8002610 <sbrk_aligned+0x40>)
 80025d4:	460c      	mov	r4, r1
 80025d6:	6831      	ldr	r1, [r6, #0]
 80025d8:	4605      	mov	r5, r0
 80025da:	b911      	cbnz	r1, 80025e2 <sbrk_aligned+0x12>
 80025dc:	f000 f902 	bl	80027e4 <_sbrk_r>
 80025e0:	6030      	str	r0, [r6, #0]
 80025e2:	4621      	mov	r1, r4
 80025e4:	4628      	mov	r0, r5
 80025e6:	f000 f8fd 	bl	80027e4 <_sbrk_r>
 80025ea:	1c43      	adds	r3, r0, #1
 80025ec:	d103      	bne.n	80025f6 <sbrk_aligned+0x26>
 80025ee:	f04f 34ff 	mov.w	r4, #4294967295
 80025f2:	4620      	mov	r0, r4
 80025f4:	bd70      	pop	{r4, r5, r6, pc}
 80025f6:	1cc4      	adds	r4, r0, #3
 80025f8:	f024 0403 	bic.w	r4, r4, #3
 80025fc:	42a0      	cmp	r0, r4
 80025fe:	d0f8      	beq.n	80025f2 <sbrk_aligned+0x22>
 8002600:	1a21      	subs	r1, r4, r0
 8002602:	4628      	mov	r0, r5
 8002604:	f000 f8ee 	bl	80027e4 <_sbrk_r>
 8002608:	3001      	adds	r0, #1
 800260a:	d1f2      	bne.n	80025f2 <sbrk_aligned+0x22>
 800260c:	e7ef      	b.n	80025ee <sbrk_aligned+0x1e>
 800260e:	bf00      	nop
 8002610:	20000184 	.word	0x20000184

08002614 <_malloc_r>:
 8002614:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002618:	1ccd      	adds	r5, r1, #3
 800261a:	f025 0503 	bic.w	r5, r5, #3
 800261e:	3508      	adds	r5, #8
 8002620:	2d0c      	cmp	r5, #12
 8002622:	bf38      	it	cc
 8002624:	250c      	movcc	r5, #12
 8002626:	2d00      	cmp	r5, #0
 8002628:	4606      	mov	r6, r0
 800262a:	db01      	blt.n	8002630 <_malloc_r+0x1c>
 800262c:	42a9      	cmp	r1, r5
 800262e:	d904      	bls.n	800263a <_malloc_r+0x26>
 8002630:	230c      	movs	r3, #12
 8002632:	6033      	str	r3, [r6, #0]
 8002634:	2000      	movs	r0, #0
 8002636:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800263a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002710 <_malloc_r+0xfc>
 800263e:	f000 f869 	bl	8002714 <__malloc_lock>
 8002642:	f8d8 3000 	ldr.w	r3, [r8]
 8002646:	461c      	mov	r4, r3
 8002648:	bb44      	cbnz	r4, 800269c <_malloc_r+0x88>
 800264a:	4629      	mov	r1, r5
 800264c:	4630      	mov	r0, r6
 800264e:	f7ff ffbf 	bl	80025d0 <sbrk_aligned>
 8002652:	1c43      	adds	r3, r0, #1
 8002654:	4604      	mov	r4, r0
 8002656:	d158      	bne.n	800270a <_malloc_r+0xf6>
 8002658:	f8d8 4000 	ldr.w	r4, [r8]
 800265c:	4627      	mov	r7, r4
 800265e:	2f00      	cmp	r7, #0
 8002660:	d143      	bne.n	80026ea <_malloc_r+0xd6>
 8002662:	2c00      	cmp	r4, #0
 8002664:	d04b      	beq.n	80026fe <_malloc_r+0xea>
 8002666:	6823      	ldr	r3, [r4, #0]
 8002668:	4639      	mov	r1, r7
 800266a:	4630      	mov	r0, r6
 800266c:	eb04 0903 	add.w	r9, r4, r3
 8002670:	f000 f8b8 	bl	80027e4 <_sbrk_r>
 8002674:	4581      	cmp	r9, r0
 8002676:	d142      	bne.n	80026fe <_malloc_r+0xea>
 8002678:	6821      	ldr	r1, [r4, #0]
 800267a:	1a6d      	subs	r5, r5, r1
 800267c:	4629      	mov	r1, r5
 800267e:	4630      	mov	r0, r6
 8002680:	f7ff ffa6 	bl	80025d0 <sbrk_aligned>
 8002684:	3001      	adds	r0, #1
 8002686:	d03a      	beq.n	80026fe <_malloc_r+0xea>
 8002688:	6823      	ldr	r3, [r4, #0]
 800268a:	442b      	add	r3, r5
 800268c:	6023      	str	r3, [r4, #0]
 800268e:	f8d8 3000 	ldr.w	r3, [r8]
 8002692:	685a      	ldr	r2, [r3, #4]
 8002694:	bb62      	cbnz	r2, 80026f0 <_malloc_r+0xdc>
 8002696:	f8c8 7000 	str.w	r7, [r8]
 800269a:	e00f      	b.n	80026bc <_malloc_r+0xa8>
 800269c:	6822      	ldr	r2, [r4, #0]
 800269e:	1b52      	subs	r2, r2, r5
 80026a0:	d420      	bmi.n	80026e4 <_malloc_r+0xd0>
 80026a2:	2a0b      	cmp	r2, #11
 80026a4:	d917      	bls.n	80026d6 <_malloc_r+0xc2>
 80026a6:	1961      	adds	r1, r4, r5
 80026a8:	42a3      	cmp	r3, r4
 80026aa:	6025      	str	r5, [r4, #0]
 80026ac:	bf18      	it	ne
 80026ae:	6059      	strne	r1, [r3, #4]
 80026b0:	6863      	ldr	r3, [r4, #4]
 80026b2:	bf08      	it	eq
 80026b4:	f8c8 1000 	streq.w	r1, [r8]
 80026b8:	5162      	str	r2, [r4, r5]
 80026ba:	604b      	str	r3, [r1, #4]
 80026bc:	4630      	mov	r0, r6
 80026be:	f000 f82f 	bl	8002720 <__malloc_unlock>
 80026c2:	f104 000b 	add.w	r0, r4, #11
 80026c6:	1d23      	adds	r3, r4, #4
 80026c8:	f020 0007 	bic.w	r0, r0, #7
 80026cc:	1ac2      	subs	r2, r0, r3
 80026ce:	bf1c      	itt	ne
 80026d0:	1a1b      	subne	r3, r3, r0
 80026d2:	50a3      	strne	r3, [r4, r2]
 80026d4:	e7af      	b.n	8002636 <_malloc_r+0x22>
 80026d6:	6862      	ldr	r2, [r4, #4]
 80026d8:	42a3      	cmp	r3, r4
 80026da:	bf0c      	ite	eq
 80026dc:	f8c8 2000 	streq.w	r2, [r8]
 80026e0:	605a      	strne	r2, [r3, #4]
 80026e2:	e7eb      	b.n	80026bc <_malloc_r+0xa8>
 80026e4:	4623      	mov	r3, r4
 80026e6:	6864      	ldr	r4, [r4, #4]
 80026e8:	e7ae      	b.n	8002648 <_malloc_r+0x34>
 80026ea:	463c      	mov	r4, r7
 80026ec:	687f      	ldr	r7, [r7, #4]
 80026ee:	e7b6      	b.n	800265e <_malloc_r+0x4a>
 80026f0:	461a      	mov	r2, r3
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	42a3      	cmp	r3, r4
 80026f6:	d1fb      	bne.n	80026f0 <_malloc_r+0xdc>
 80026f8:	2300      	movs	r3, #0
 80026fa:	6053      	str	r3, [r2, #4]
 80026fc:	e7de      	b.n	80026bc <_malloc_r+0xa8>
 80026fe:	230c      	movs	r3, #12
 8002700:	6033      	str	r3, [r6, #0]
 8002702:	4630      	mov	r0, r6
 8002704:	f000 f80c 	bl	8002720 <__malloc_unlock>
 8002708:	e794      	b.n	8002634 <_malloc_r+0x20>
 800270a:	6005      	str	r5, [r0, #0]
 800270c:	e7d6      	b.n	80026bc <_malloc_r+0xa8>
 800270e:	bf00      	nop
 8002710:	20000188 	.word	0x20000188

08002714 <__malloc_lock>:
 8002714:	4801      	ldr	r0, [pc, #4]	@ (800271c <__malloc_lock+0x8>)
 8002716:	f000 b89f 	b.w	8002858 <__retarget_lock_acquire_recursive>
 800271a:	bf00      	nop
 800271c:	200002c8 	.word	0x200002c8

08002720 <__malloc_unlock>:
 8002720:	4801      	ldr	r0, [pc, #4]	@ (8002728 <__malloc_unlock+0x8>)
 8002722:	f000 b89a 	b.w	800285a <__retarget_lock_release_recursive>
 8002726:	bf00      	nop
 8002728:	200002c8 	.word	0x200002c8

0800272c <memcmp>:
 800272c:	b510      	push	{r4, lr}
 800272e:	3901      	subs	r1, #1
 8002730:	4402      	add	r2, r0
 8002732:	4290      	cmp	r0, r2
 8002734:	d101      	bne.n	800273a <memcmp+0xe>
 8002736:	2000      	movs	r0, #0
 8002738:	e005      	b.n	8002746 <memcmp+0x1a>
 800273a:	7803      	ldrb	r3, [r0, #0]
 800273c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8002740:	42a3      	cmp	r3, r4
 8002742:	d001      	beq.n	8002748 <memcmp+0x1c>
 8002744:	1b18      	subs	r0, r3, r4
 8002746:	bd10      	pop	{r4, pc}
 8002748:	3001      	adds	r0, #1
 800274a:	e7f2      	b.n	8002732 <memcmp+0x6>

0800274c <memset>:
 800274c:	4402      	add	r2, r0
 800274e:	4603      	mov	r3, r0
 8002750:	4293      	cmp	r3, r2
 8002752:	d100      	bne.n	8002756 <memset+0xa>
 8002754:	4770      	bx	lr
 8002756:	f803 1b01 	strb.w	r1, [r3], #1
 800275a:	e7f9      	b.n	8002750 <memset+0x4>

0800275c <_raise_r>:
 800275c:	291f      	cmp	r1, #31
 800275e:	b538      	push	{r3, r4, r5, lr}
 8002760:	4605      	mov	r5, r0
 8002762:	460c      	mov	r4, r1
 8002764:	d904      	bls.n	8002770 <_raise_r+0x14>
 8002766:	2316      	movs	r3, #22
 8002768:	6003      	str	r3, [r0, #0]
 800276a:	f04f 30ff 	mov.w	r0, #4294967295
 800276e:	bd38      	pop	{r3, r4, r5, pc}
 8002770:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8002772:	b112      	cbz	r2, 800277a <_raise_r+0x1e>
 8002774:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002778:	b94b      	cbnz	r3, 800278e <_raise_r+0x32>
 800277a:	4628      	mov	r0, r5
 800277c:	f000 f830 	bl	80027e0 <_getpid_r>
 8002780:	4622      	mov	r2, r4
 8002782:	4601      	mov	r1, r0
 8002784:	4628      	mov	r0, r5
 8002786:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800278a:	f000 b817 	b.w	80027bc <_kill_r>
 800278e:	2b01      	cmp	r3, #1
 8002790:	d00a      	beq.n	80027a8 <_raise_r+0x4c>
 8002792:	1c59      	adds	r1, r3, #1
 8002794:	d103      	bne.n	800279e <_raise_r+0x42>
 8002796:	2316      	movs	r3, #22
 8002798:	6003      	str	r3, [r0, #0]
 800279a:	2001      	movs	r0, #1
 800279c:	e7e7      	b.n	800276e <_raise_r+0x12>
 800279e:	2100      	movs	r1, #0
 80027a0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80027a4:	4620      	mov	r0, r4
 80027a6:	4798      	blx	r3
 80027a8:	2000      	movs	r0, #0
 80027aa:	e7e0      	b.n	800276e <_raise_r+0x12>

080027ac <raise>:
 80027ac:	4b02      	ldr	r3, [pc, #8]	@ (80027b8 <raise+0xc>)
 80027ae:	4601      	mov	r1, r0
 80027b0:	6818      	ldr	r0, [r3, #0]
 80027b2:	f7ff bfd3 	b.w	800275c <_raise_r>
 80027b6:	bf00      	nop
 80027b8:	2000000c 	.word	0x2000000c

080027bc <_kill_r>:
 80027bc:	b538      	push	{r3, r4, r5, lr}
 80027be:	4d07      	ldr	r5, [pc, #28]	@ (80027dc <_kill_r+0x20>)
 80027c0:	2300      	movs	r3, #0
 80027c2:	4604      	mov	r4, r0
 80027c4:	4608      	mov	r0, r1
 80027c6:	4611      	mov	r1, r2
 80027c8:	602b      	str	r3, [r5, #0]
 80027ca:	f7fe fcb4 	bl	8001136 <_kill>
 80027ce:	1c43      	adds	r3, r0, #1
 80027d0:	d102      	bne.n	80027d8 <_kill_r+0x1c>
 80027d2:	682b      	ldr	r3, [r5, #0]
 80027d4:	b103      	cbz	r3, 80027d8 <_kill_r+0x1c>
 80027d6:	6023      	str	r3, [r4, #0]
 80027d8:	bd38      	pop	{r3, r4, r5, pc}
 80027da:	bf00      	nop
 80027dc:	200002c4 	.word	0x200002c4

080027e0 <_getpid_r>:
 80027e0:	f7fe bca1 	b.w	8001126 <_getpid>

080027e4 <_sbrk_r>:
 80027e4:	b538      	push	{r3, r4, r5, lr}
 80027e6:	4d06      	ldr	r5, [pc, #24]	@ (8002800 <_sbrk_r+0x1c>)
 80027e8:	2300      	movs	r3, #0
 80027ea:	4604      	mov	r4, r0
 80027ec:	4608      	mov	r0, r1
 80027ee:	602b      	str	r3, [r5, #0]
 80027f0:	f7fe fcbc 	bl	800116c <_sbrk>
 80027f4:	1c43      	adds	r3, r0, #1
 80027f6:	d102      	bne.n	80027fe <_sbrk_r+0x1a>
 80027f8:	682b      	ldr	r3, [r5, #0]
 80027fa:	b103      	cbz	r3, 80027fe <_sbrk_r+0x1a>
 80027fc:	6023      	str	r3, [r4, #0]
 80027fe:	bd38      	pop	{r3, r4, r5, pc}
 8002800:	200002c4 	.word	0x200002c4

08002804 <__errno>:
 8002804:	4b01      	ldr	r3, [pc, #4]	@ (800280c <__errno+0x8>)
 8002806:	6818      	ldr	r0, [r3, #0]
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	2000000c 	.word	0x2000000c

08002810 <__libc_init_array>:
 8002810:	b570      	push	{r4, r5, r6, lr}
 8002812:	4d0d      	ldr	r5, [pc, #52]	@ (8002848 <__libc_init_array+0x38>)
 8002814:	4c0d      	ldr	r4, [pc, #52]	@ (800284c <__libc_init_array+0x3c>)
 8002816:	1b64      	subs	r4, r4, r5
 8002818:	10a4      	asrs	r4, r4, #2
 800281a:	2600      	movs	r6, #0
 800281c:	42a6      	cmp	r6, r4
 800281e:	d109      	bne.n	8002834 <__libc_init_array+0x24>
 8002820:	4d0b      	ldr	r5, [pc, #44]	@ (8002850 <__libc_init_array+0x40>)
 8002822:	4c0c      	ldr	r4, [pc, #48]	@ (8002854 <__libc_init_array+0x44>)
 8002824:	f000 f872 	bl	800290c <_init>
 8002828:	1b64      	subs	r4, r4, r5
 800282a:	10a4      	asrs	r4, r4, #2
 800282c:	2600      	movs	r6, #0
 800282e:	42a6      	cmp	r6, r4
 8002830:	d105      	bne.n	800283e <__libc_init_array+0x2e>
 8002832:	bd70      	pop	{r4, r5, r6, pc}
 8002834:	f855 3b04 	ldr.w	r3, [r5], #4
 8002838:	4798      	blx	r3
 800283a:	3601      	adds	r6, #1
 800283c:	e7ee      	b.n	800281c <__libc_init_array+0xc>
 800283e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002842:	4798      	blx	r3
 8002844:	3601      	adds	r6, #1
 8002846:	e7f2      	b.n	800282e <__libc_init_array+0x1e>
 8002848:	080029f0 	.word	0x080029f0
 800284c:	080029f0 	.word	0x080029f0
 8002850:	080029f0 	.word	0x080029f0
 8002854:	080029f4 	.word	0x080029f4

08002858 <__retarget_lock_acquire_recursive>:
 8002858:	4770      	bx	lr

0800285a <__retarget_lock_release_recursive>:
 800285a:	4770      	bx	lr

0800285c <memcpy>:
 800285c:	440a      	add	r2, r1
 800285e:	4291      	cmp	r1, r2
 8002860:	f100 33ff 	add.w	r3, r0, #4294967295
 8002864:	d100      	bne.n	8002868 <memcpy+0xc>
 8002866:	4770      	bx	lr
 8002868:	b510      	push	{r4, lr}
 800286a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800286e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002872:	4291      	cmp	r1, r2
 8002874:	d1f9      	bne.n	800286a <memcpy+0xe>
 8002876:	bd10      	pop	{r4, pc}

08002878 <_free_r>:
 8002878:	b538      	push	{r3, r4, r5, lr}
 800287a:	4605      	mov	r5, r0
 800287c:	2900      	cmp	r1, #0
 800287e:	d041      	beq.n	8002904 <_free_r+0x8c>
 8002880:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002884:	1f0c      	subs	r4, r1, #4
 8002886:	2b00      	cmp	r3, #0
 8002888:	bfb8      	it	lt
 800288a:	18e4      	addlt	r4, r4, r3
 800288c:	f7ff ff42 	bl	8002714 <__malloc_lock>
 8002890:	4a1d      	ldr	r2, [pc, #116]	@ (8002908 <_free_r+0x90>)
 8002892:	6813      	ldr	r3, [r2, #0]
 8002894:	b933      	cbnz	r3, 80028a4 <_free_r+0x2c>
 8002896:	6063      	str	r3, [r4, #4]
 8002898:	6014      	str	r4, [r2, #0]
 800289a:	4628      	mov	r0, r5
 800289c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80028a0:	f7ff bf3e 	b.w	8002720 <__malloc_unlock>
 80028a4:	42a3      	cmp	r3, r4
 80028a6:	d908      	bls.n	80028ba <_free_r+0x42>
 80028a8:	6820      	ldr	r0, [r4, #0]
 80028aa:	1821      	adds	r1, r4, r0
 80028ac:	428b      	cmp	r3, r1
 80028ae:	bf01      	itttt	eq
 80028b0:	6819      	ldreq	r1, [r3, #0]
 80028b2:	685b      	ldreq	r3, [r3, #4]
 80028b4:	1809      	addeq	r1, r1, r0
 80028b6:	6021      	streq	r1, [r4, #0]
 80028b8:	e7ed      	b.n	8002896 <_free_r+0x1e>
 80028ba:	461a      	mov	r2, r3
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	b10b      	cbz	r3, 80028c4 <_free_r+0x4c>
 80028c0:	42a3      	cmp	r3, r4
 80028c2:	d9fa      	bls.n	80028ba <_free_r+0x42>
 80028c4:	6811      	ldr	r1, [r2, #0]
 80028c6:	1850      	adds	r0, r2, r1
 80028c8:	42a0      	cmp	r0, r4
 80028ca:	d10b      	bne.n	80028e4 <_free_r+0x6c>
 80028cc:	6820      	ldr	r0, [r4, #0]
 80028ce:	4401      	add	r1, r0
 80028d0:	1850      	adds	r0, r2, r1
 80028d2:	4283      	cmp	r3, r0
 80028d4:	6011      	str	r1, [r2, #0]
 80028d6:	d1e0      	bne.n	800289a <_free_r+0x22>
 80028d8:	6818      	ldr	r0, [r3, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	6053      	str	r3, [r2, #4]
 80028de:	4408      	add	r0, r1
 80028e0:	6010      	str	r0, [r2, #0]
 80028e2:	e7da      	b.n	800289a <_free_r+0x22>
 80028e4:	d902      	bls.n	80028ec <_free_r+0x74>
 80028e6:	230c      	movs	r3, #12
 80028e8:	602b      	str	r3, [r5, #0]
 80028ea:	e7d6      	b.n	800289a <_free_r+0x22>
 80028ec:	6820      	ldr	r0, [r4, #0]
 80028ee:	1821      	adds	r1, r4, r0
 80028f0:	428b      	cmp	r3, r1
 80028f2:	bf04      	itt	eq
 80028f4:	6819      	ldreq	r1, [r3, #0]
 80028f6:	685b      	ldreq	r3, [r3, #4]
 80028f8:	6063      	str	r3, [r4, #4]
 80028fa:	bf04      	itt	eq
 80028fc:	1809      	addeq	r1, r1, r0
 80028fe:	6021      	streq	r1, [r4, #0]
 8002900:	6054      	str	r4, [r2, #4]
 8002902:	e7ca      	b.n	800289a <_free_r+0x22>
 8002904:	bd38      	pop	{r3, r4, r5, pc}
 8002906:	bf00      	nop
 8002908:	20000188 	.word	0x20000188

0800290c <_init>:
 800290c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800290e:	bf00      	nop
 8002910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002912:	bc08      	pop	{r3}
 8002914:	469e      	mov	lr, r3
 8002916:	4770      	bx	lr

08002918 <_fini>:
 8002918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800291a:	bf00      	nop
 800291c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800291e:	bc08      	pop	{r3}
 8002920:	469e      	mov	lr, r3
 8002922:	4770      	bx	lr
