
PRJ_001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037a4  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08003938  08003938  00004938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a0c  08003a0c  00005070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003a0c  08003a0c  00004a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a14  08003a14  00005070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a14  08003a14  00004a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003a18  08003a18  00004a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08003a1c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  20000070  08003a8c  00005070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002dc  08003a8c  000052dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013d4d  00000000  00000000  000050a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dd7  00000000  00000000  00018ded  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c20  00000000  00000000  0001bbc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000092f  00000000  00000000  0001c7e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bbeb  00000000  00000000  0001d117  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010db2  00000000  00000000  00038d02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000983cd  00000000  00000000  00049ab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e1e81  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004984  00000000  00000000  000e1ec4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000e6848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000070 	.word	0x20000070
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003920 	.word	0x08003920

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000074 	.word	0x20000074
 80001d0:	08003920 	.word	0x08003920

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_uldivmod>:
 80001e4:	b953      	cbnz	r3, 80001fc <__aeabi_uldivmod+0x18>
 80001e6:	b94a      	cbnz	r2, 80001fc <__aeabi_uldivmod+0x18>
 80001e8:	2900      	cmp	r1, #0
 80001ea:	bf08      	it	eq
 80001ec:	2800      	cmpeq	r0, #0
 80001ee:	bf1c      	itt	ne
 80001f0:	f04f 31ff 	movne.w	r1, #4294967295
 80001f4:	f04f 30ff 	movne.w	r0, #4294967295
 80001f8:	f000 b988 	b.w	800050c <__aeabi_idiv0>
 80001fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000200:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000204:	f000 f806 	bl	8000214 <__udivmoddi4>
 8000208:	f8dd e004 	ldr.w	lr, [sp, #4]
 800020c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000210:	b004      	add	sp, #16
 8000212:	4770      	bx	lr

08000214 <__udivmoddi4>:
 8000214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000218:	9d08      	ldr	r5, [sp, #32]
 800021a:	468e      	mov	lr, r1
 800021c:	4604      	mov	r4, r0
 800021e:	4688      	mov	r8, r1
 8000220:	2b00      	cmp	r3, #0
 8000222:	d14a      	bne.n	80002ba <__udivmoddi4+0xa6>
 8000224:	428a      	cmp	r2, r1
 8000226:	4617      	mov	r7, r2
 8000228:	d962      	bls.n	80002f0 <__udivmoddi4+0xdc>
 800022a:	fab2 f682 	clz	r6, r2
 800022e:	b14e      	cbz	r6, 8000244 <__udivmoddi4+0x30>
 8000230:	f1c6 0320 	rsb	r3, r6, #32
 8000234:	fa01 f806 	lsl.w	r8, r1, r6
 8000238:	fa20 f303 	lsr.w	r3, r0, r3
 800023c:	40b7      	lsls	r7, r6
 800023e:	ea43 0808 	orr.w	r8, r3, r8
 8000242:	40b4      	lsls	r4, r6
 8000244:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000248:	fa1f fc87 	uxth.w	ip, r7
 800024c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000250:	0c23      	lsrs	r3, r4, #16
 8000252:	fb0e 8811 	mls	r8, lr, r1, r8
 8000256:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800025a:	fb01 f20c 	mul.w	r2, r1, ip
 800025e:	429a      	cmp	r2, r3
 8000260:	d909      	bls.n	8000276 <__udivmoddi4+0x62>
 8000262:	18fb      	adds	r3, r7, r3
 8000264:	f101 30ff 	add.w	r0, r1, #4294967295
 8000268:	f080 80ea 	bcs.w	8000440 <__udivmoddi4+0x22c>
 800026c:	429a      	cmp	r2, r3
 800026e:	f240 80e7 	bls.w	8000440 <__udivmoddi4+0x22c>
 8000272:	3902      	subs	r1, #2
 8000274:	443b      	add	r3, r7
 8000276:	1a9a      	subs	r2, r3, r2
 8000278:	b2a3      	uxth	r3, r4
 800027a:	fbb2 f0fe 	udiv	r0, r2, lr
 800027e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000282:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000286:	fb00 fc0c 	mul.w	ip, r0, ip
 800028a:	459c      	cmp	ip, r3
 800028c:	d909      	bls.n	80002a2 <__udivmoddi4+0x8e>
 800028e:	18fb      	adds	r3, r7, r3
 8000290:	f100 32ff 	add.w	r2, r0, #4294967295
 8000294:	f080 80d6 	bcs.w	8000444 <__udivmoddi4+0x230>
 8000298:	459c      	cmp	ip, r3
 800029a:	f240 80d3 	bls.w	8000444 <__udivmoddi4+0x230>
 800029e:	443b      	add	r3, r7
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a6:	eba3 030c 	sub.w	r3, r3, ip
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa2>
 80002ae:	40f3      	lsrs	r3, r6
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xb6>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb0>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa2>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x14c>
 80002d2:	4573      	cmp	r3, lr
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xc8>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 8105 	bhi.w	80004e6 <__udivmoddi4+0x2d2>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb6e 0203 	sbc.w	r2, lr, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	4690      	mov	r8, r2
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e5      	beq.n	80002b6 <__udivmoddi4+0xa2>
 80002ea:	e9c5 4800 	strd	r4, r8, [r5]
 80002ee:	e7e2      	b.n	80002b6 <__udivmoddi4+0xa2>
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f000 8090 	beq.w	8000416 <__udivmoddi4+0x202>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f040 80a4 	bne.w	8000448 <__udivmoddi4+0x234>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	0c03      	lsrs	r3, r0, #16
 8000304:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000308:	b280      	uxth	r0, r0
 800030a:	b2bc      	uxth	r4, r7
 800030c:	2101      	movs	r1, #1
 800030e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000312:	fb0e 221c 	mls	r2, lr, ip, r2
 8000316:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800031a:	fb04 f20c 	mul.w	r2, r4, ip
 800031e:	429a      	cmp	r2, r3
 8000320:	d907      	bls.n	8000332 <__udivmoddi4+0x11e>
 8000322:	18fb      	adds	r3, r7, r3
 8000324:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000328:	d202      	bcs.n	8000330 <__udivmoddi4+0x11c>
 800032a:	429a      	cmp	r2, r3
 800032c:	f200 80e0 	bhi.w	80004f0 <__udivmoddi4+0x2dc>
 8000330:	46c4      	mov	ip, r8
 8000332:	1a9b      	subs	r3, r3, r2
 8000334:	fbb3 f2fe 	udiv	r2, r3, lr
 8000338:	fb0e 3312 	mls	r3, lr, r2, r3
 800033c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000340:	fb02 f404 	mul.w	r4, r2, r4
 8000344:	429c      	cmp	r4, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x144>
 8000348:	18fb      	adds	r3, r7, r3
 800034a:	f102 30ff 	add.w	r0, r2, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x142>
 8000350:	429c      	cmp	r4, r3
 8000352:	f200 80ca 	bhi.w	80004ea <__udivmoddi4+0x2d6>
 8000356:	4602      	mov	r2, r0
 8000358:	1b1b      	subs	r3, r3, r4
 800035a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x98>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa0e f401 	lsl.w	r4, lr, r1
 8000370:	fa20 f306 	lsr.w	r3, r0, r6
 8000374:	fa2e fe06 	lsr.w	lr, lr, r6
 8000378:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fa00 f801 	lsl.w	r8, r0, r1
 8000382:	fa1f fc87 	uxth.w	ip, r7
 8000386:	fbbe f0f9 	udiv	r0, lr, r9
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000390:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000394:	fb00 fe0c 	mul.w	lr, r0, ip
 8000398:	45a6      	cmp	lr, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1a0>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f100 3aff 	add.w	sl, r0, #4294967295
 80003a6:	f080 809c 	bcs.w	80004e2 <__udivmoddi4+0x2ce>
 80003aa:	45a6      	cmp	lr, r4
 80003ac:	f240 8099 	bls.w	80004e2 <__udivmoddi4+0x2ce>
 80003b0:	3802      	subs	r0, #2
 80003b2:	443c      	add	r4, r7
 80003b4:	eba4 040e 	sub.w	r4, r4, lr
 80003b8:	fa1f fe83 	uxth.w	lr, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003c8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003cc:	45a4      	cmp	ip, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1ce>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003d6:	f080 8082 	bcs.w	80004de <__udivmoddi4+0x2ca>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d97f      	bls.n	80004de <__udivmoddi4+0x2ca>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003e6:	eba4 040c 	sub.w	r4, r4, ip
 80003ea:	fba0 ec02 	umull	lr, ip, r0, r2
 80003ee:	4564      	cmp	r4, ip
 80003f0:	4673      	mov	r3, lr
 80003f2:	46e1      	mov	r9, ip
 80003f4:	d362      	bcc.n	80004bc <__udivmoddi4+0x2a8>
 80003f6:	d05f      	beq.n	80004b8 <__udivmoddi4+0x2a4>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x1fe>
 80003fa:	ebb8 0203 	subs.w	r2, r8, r3
 80003fe:	eb64 0409 	sbc.w	r4, r4, r9
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	fa22 f301 	lsr.w	r3, r2, r1
 800040a:	431e      	orrs	r6, r3
 800040c:	40cc      	lsrs	r4, r1
 800040e:	e9c5 6400 	strd	r6, r4, [r5]
 8000412:	2100      	movs	r1, #0
 8000414:	e74f      	b.n	80002b6 <__udivmoddi4+0xa2>
 8000416:	fbb1 fcf2 	udiv	ip, r1, r2
 800041a:	0c01      	lsrs	r1, r0, #16
 800041c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000420:	b280      	uxth	r0, r0
 8000422:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000426:	463b      	mov	r3, r7
 8000428:	4638      	mov	r0, r7
 800042a:	463c      	mov	r4, r7
 800042c:	46b8      	mov	r8, r7
 800042e:	46be      	mov	lr, r7
 8000430:	2620      	movs	r6, #32
 8000432:	fbb1 f1f7 	udiv	r1, r1, r7
 8000436:	eba2 0208 	sub.w	r2, r2, r8
 800043a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800043e:	e766      	b.n	800030e <__udivmoddi4+0xfa>
 8000440:	4601      	mov	r1, r0
 8000442:	e718      	b.n	8000276 <__udivmoddi4+0x62>
 8000444:	4610      	mov	r0, r2
 8000446:	e72c      	b.n	80002a2 <__udivmoddi4+0x8e>
 8000448:	f1c6 0220 	rsb	r2, r6, #32
 800044c:	fa2e f302 	lsr.w	r3, lr, r2
 8000450:	40b7      	lsls	r7, r6
 8000452:	40b1      	lsls	r1, r6
 8000454:	fa20 f202 	lsr.w	r2, r0, r2
 8000458:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800045c:	430a      	orrs	r2, r1
 800045e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000462:	b2bc      	uxth	r4, r7
 8000464:	fb0e 3318 	mls	r3, lr, r8, r3
 8000468:	0c11      	lsrs	r1, r2, #16
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb08 f904 	mul.w	r9, r8, r4
 8000472:	40b0      	lsls	r0, r6
 8000474:	4589      	cmp	r9, r1
 8000476:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800047a:	b280      	uxth	r0, r0
 800047c:	d93e      	bls.n	80004fc <__udivmoddi4+0x2e8>
 800047e:	1879      	adds	r1, r7, r1
 8000480:	f108 3cff 	add.w	ip, r8, #4294967295
 8000484:	d201      	bcs.n	800048a <__udivmoddi4+0x276>
 8000486:	4589      	cmp	r9, r1
 8000488:	d81f      	bhi.n	80004ca <__udivmoddi4+0x2b6>
 800048a:	eba1 0109 	sub.w	r1, r1, r9
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fb09 f804 	mul.w	r8, r9, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	b292      	uxth	r2, r2
 800049c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d229      	bcs.n	80004f8 <__udivmoddi4+0x2e4>
 80004a4:	18ba      	adds	r2, r7, r2
 80004a6:	f109 31ff 	add.w	r1, r9, #4294967295
 80004aa:	d2c4      	bcs.n	8000436 <__udivmoddi4+0x222>
 80004ac:	4542      	cmp	r2, r8
 80004ae:	d2c2      	bcs.n	8000436 <__udivmoddi4+0x222>
 80004b0:	f1a9 0102 	sub.w	r1, r9, #2
 80004b4:	443a      	add	r2, r7
 80004b6:	e7be      	b.n	8000436 <__udivmoddi4+0x222>
 80004b8:	45f0      	cmp	r8, lr
 80004ba:	d29d      	bcs.n	80003f8 <__udivmoddi4+0x1e4>
 80004bc:	ebbe 0302 	subs.w	r3, lr, r2
 80004c0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004c4:	3801      	subs	r0, #1
 80004c6:	46e1      	mov	r9, ip
 80004c8:	e796      	b.n	80003f8 <__udivmoddi4+0x1e4>
 80004ca:	eba7 0909 	sub.w	r9, r7, r9
 80004ce:	4449      	add	r1, r9
 80004d0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004d4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d8:	fb09 f804 	mul.w	r8, r9, r4
 80004dc:	e7db      	b.n	8000496 <__udivmoddi4+0x282>
 80004de:	4673      	mov	r3, lr
 80004e0:	e77f      	b.n	80003e2 <__udivmoddi4+0x1ce>
 80004e2:	4650      	mov	r0, sl
 80004e4:	e766      	b.n	80003b4 <__udivmoddi4+0x1a0>
 80004e6:	4608      	mov	r0, r1
 80004e8:	e6fd      	b.n	80002e6 <__udivmoddi4+0xd2>
 80004ea:	443b      	add	r3, r7
 80004ec:	3a02      	subs	r2, #2
 80004ee:	e733      	b.n	8000358 <__udivmoddi4+0x144>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	443b      	add	r3, r7
 80004f6:	e71c      	b.n	8000332 <__udivmoddi4+0x11e>
 80004f8:	4649      	mov	r1, r9
 80004fa:	e79c      	b.n	8000436 <__udivmoddi4+0x222>
 80004fc:	eba1 0109 	sub.w	r1, r1, r9
 8000500:	46c4      	mov	ip, r8
 8000502:	fbb1 f9fe 	udiv	r9, r1, lr
 8000506:	fb09 f804 	mul.w	r8, r9, r4
 800050a:	e7c4      	b.n	8000496 <__udivmoddi4+0x282>

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <Clk_En>:
Pin_74H595 Pin_74H595_0;
Pin_74H595 Pin_74H595_1;
Pin_74H595 Pin_74H595_2;
Pin_74H595 Pin_74H595_3;

void Clk_En(uint8_t DS_GPIO_PIN_NUM){
 8000510:	b580      	push	{r7, lr}
 8000512:	b08a      	sub	sp, #40	@ 0x28
 8000514:	af00      	add	r7, sp, #0
 8000516:	4603      	mov	r3, r0
 8000518:	71fb      	strb	r3, [r7, #7]
	Pin_74H595 *Pin_74H595_t;
	if (DS_GPIO_PIN_NUM == DS0){
 800051a:	79fb      	ldrb	r3, [r7, #7]
 800051c:	2b01      	cmp	r3, #1
 800051e:	d102      	bne.n	8000526 <Clk_En+0x16>
		Pin_74H595_t = &Pin_74H595_0;
 8000520:	4b3f      	ldr	r3, [pc, #252]	@ (8000620 <Clk_En+0x110>)
 8000522:	627b      	str	r3, [r7, #36]	@ 0x24
 8000524:	e010      	b.n	8000548 <Clk_En+0x38>
	}
	else if (DS_GPIO_PIN_NUM == DS1){
 8000526:	79fb      	ldrb	r3, [r7, #7]
 8000528:	2b03      	cmp	r3, #3
 800052a:	d102      	bne.n	8000532 <Clk_En+0x22>
		Pin_74H595_t = &Pin_74H595_1;
 800052c:	4b3d      	ldr	r3, [pc, #244]	@ (8000624 <Clk_En+0x114>)
 800052e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000530:	e00a      	b.n	8000548 <Clk_En+0x38>
	}
	else if (DS_GPIO_PIN_NUM == DS2){
 8000532:	79fb      	ldrb	r3, [r7, #7]
 8000534:	2b05      	cmp	r3, #5
 8000536:	d102      	bne.n	800053e <Clk_En+0x2e>
		Pin_74H595_t = &Pin_74H595_2;
 8000538:	4b3b      	ldr	r3, [pc, #236]	@ (8000628 <Clk_En+0x118>)
 800053a:	627b      	str	r3, [r7, #36]	@ 0x24
 800053c:	e004      	b.n	8000548 <Clk_En+0x38>
	}
	else if (DS_GPIO_PIN_NUM == DS3){
 800053e:	79fb      	ldrb	r3, [r7, #7]
 8000540:	2b07      	cmp	r3, #7
 8000542:	d101      	bne.n	8000548 <Clk_En+0x38>
		Pin_74H595_t = &Pin_74H595_3;
 8000544:	4b39      	ldr	r3, [pc, #228]	@ (800062c <Clk_En+0x11c>)
 8000546:	627b      	str	r3, [r7, #36]	@ 0x24
	}
	GPIO_WriteToOutPutPin(Pin_74H595_t->SH_CP.pGPIOx, Pin_74H595_t->SH_CP.GPIO_Pin_Config.GPIO_PinNumber, High);
 8000548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800054a:	6858      	ldr	r0, [r3, #4]
 800054c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800054e:	7a1b      	ldrb	r3, [r3, #8]
 8000550:	2201      	movs	r2, #1
 8000552:	4619      	mov	r1, r3
 8000554:	f000 fbd5 	bl	8000d02 <GPIO_WriteToOutPutPin>
	delay_ms(1);
 8000558:	2300      	movs	r3, #0
 800055a:	623b      	str	r3, [r7, #32]
 800055c:	e024      	b.n	80005a8 <Clk_En+0x98>
 800055e:	4b34      	ldr	r3, [pc, #208]	@ (8000630 <Clk_En+0x120>)
 8000560:	68db      	ldr	r3, [r3, #12]
 8000562:	4a33      	ldr	r2, [pc, #204]	@ (8000630 <Clk_En+0x120>)
 8000564:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000568:	60d3      	str	r3, [r2, #12]
 800056a:	4b32      	ldr	r3, [pc, #200]	@ (8000634 <Clk_En+0x124>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	4a31      	ldr	r2, [pc, #196]	@ (8000634 <Clk_En+0x124>)
 8000570:	f043 0301 	orr.w	r3, r3, #1
 8000574:	6013      	str	r3, [r2, #0]
 8000576:	4b2f      	ldr	r3, [pc, #188]	@ (8000634 <Clk_En+0x124>)
 8000578:	685b      	ldr	r3, [r3, #4]
 800057a:	613b      	str	r3, [r7, #16]
 800057c:	f001 fd88 	bl	8002090 <RCC_GetSystemClock>
 8000580:	4603      	mov	r3, r0
 8000582:	4a2d      	ldr	r2, [pc, #180]	@ (8000638 <Clk_En+0x128>)
 8000584:	fba2 2303 	umull	r2, r3, r2, r3
 8000588:	0c9b      	lsrs	r3, r3, #18
 800058a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800058e:	fb02 f303 	mul.w	r3, r2, r3
 8000592:	60fb      	str	r3, [r7, #12]
 8000594:	4b27      	ldr	r3, [pc, #156]	@ (8000634 <Clk_En+0x124>)
 8000596:	685a      	ldr	r2, [r3, #4]
 8000598:	693b      	ldr	r3, [r7, #16]
 800059a:	1ad3      	subs	r3, r2, r3
 800059c:	68fa      	ldr	r2, [r7, #12]
 800059e:	429a      	cmp	r2, r3
 80005a0:	d8f8      	bhi.n	8000594 <Clk_En+0x84>
 80005a2:	6a3b      	ldr	r3, [r7, #32]
 80005a4:	3301      	adds	r3, #1
 80005a6:	623b      	str	r3, [r7, #32]
 80005a8:	6a3b      	ldr	r3, [r7, #32]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d0d7      	beq.n	800055e <Clk_En+0x4e>
	GPIO_WriteToOutPutPin(Pin_74H595_t->SH_CP.pGPIOx, Pin_74H595_t->SH_CP.GPIO_Pin_Config.GPIO_PinNumber, Low);
 80005ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005b0:	6858      	ldr	r0, [r3, #4]
 80005b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005b4:	7a1b      	ldrb	r3, [r3, #8]
 80005b6:	2200      	movs	r2, #0
 80005b8:	4619      	mov	r1, r3
 80005ba:	f000 fba2 	bl	8000d02 <GPIO_WriteToOutPutPin>
	delay_ms(1);
 80005be:	2300      	movs	r3, #0
 80005c0:	61fb      	str	r3, [r7, #28]
 80005c2:	e024      	b.n	800060e <Clk_En+0xfe>
 80005c4:	4b1a      	ldr	r3, [pc, #104]	@ (8000630 <Clk_En+0x120>)
 80005c6:	68db      	ldr	r3, [r3, #12]
 80005c8:	4a19      	ldr	r2, [pc, #100]	@ (8000630 <Clk_En+0x120>)
 80005ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80005ce:	60d3      	str	r3, [r2, #12]
 80005d0:	4b18      	ldr	r3, [pc, #96]	@ (8000634 <Clk_En+0x124>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a17      	ldr	r2, [pc, #92]	@ (8000634 <Clk_En+0x124>)
 80005d6:	f043 0301 	orr.w	r3, r3, #1
 80005da:	6013      	str	r3, [r2, #0]
 80005dc:	4b15      	ldr	r3, [pc, #84]	@ (8000634 <Clk_En+0x124>)
 80005de:	685b      	ldr	r3, [r3, #4]
 80005e0:	61bb      	str	r3, [r7, #24]
 80005e2:	f001 fd55 	bl	8002090 <RCC_GetSystemClock>
 80005e6:	4603      	mov	r3, r0
 80005e8:	4a13      	ldr	r2, [pc, #76]	@ (8000638 <Clk_En+0x128>)
 80005ea:	fba2 2303 	umull	r2, r3, r2, r3
 80005ee:	0c9b      	lsrs	r3, r3, #18
 80005f0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80005f4:	fb02 f303 	mul.w	r3, r2, r3
 80005f8:	617b      	str	r3, [r7, #20]
 80005fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000634 <Clk_En+0x124>)
 80005fc:	685a      	ldr	r2, [r3, #4]
 80005fe:	69bb      	ldr	r3, [r7, #24]
 8000600:	1ad3      	subs	r3, r2, r3
 8000602:	697a      	ldr	r2, [r7, #20]
 8000604:	429a      	cmp	r2, r3
 8000606:	d8f8      	bhi.n	80005fa <Clk_En+0xea>
 8000608:	69fb      	ldr	r3, [r7, #28]
 800060a:	3301      	adds	r3, #1
 800060c:	61fb      	str	r3, [r7, #28]
 800060e:	69fb      	ldr	r3, [r7, #28]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d0d7      	beq.n	80005c4 <Clk_En+0xb4>
}
 8000614:	bf00      	nop
 8000616:	bf00      	nop
 8000618:	3728      	adds	r7, #40	@ 0x28
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	2000008c 	.word	0x2000008c
 8000624:	200000b4 	.word	0x200000b4
 8000628:	200000dc 	.word	0x200000dc
 800062c:	20000104 	.word	0x20000104
 8000630:	e000edf0 	.word	0xe000edf0
 8000634:	e0001000 	.word	0xe0001000
 8000638:	431bde83 	.word	0x431bde83

0800063c <Write_data>:

void Write_data(uint8_t data, uint8_t DS_GPIO_PIN_NUM, uint8_t MSBorLSB){
 800063c:	b580      	push	{r7, lr}
 800063e:	b086      	sub	sp, #24
 8000640:	af00      	add	r7, sp, #0
 8000642:	4603      	mov	r3, r0
 8000644:	71fb      	strb	r3, [r7, #7]
 8000646:	460b      	mov	r3, r1
 8000648:	71bb      	strb	r3, [r7, #6]
 800064a:	4613      	mov	r3, r2
 800064c:	717b      	strb	r3, [r7, #5]
	Pin_74H595 *Pin_74H595_t;
	if (DS_GPIO_PIN_NUM == DS0){
 800064e:	79bb      	ldrb	r3, [r7, #6]
 8000650:	2b01      	cmp	r3, #1
 8000652:	d102      	bne.n	800065a <Write_data+0x1e>
		Pin_74H595_t = &Pin_74H595_0;
 8000654:	4b39      	ldr	r3, [pc, #228]	@ (800073c <Write_data+0x100>)
 8000656:	617b      	str	r3, [r7, #20]
 8000658:	e010      	b.n	800067c <Write_data+0x40>
	}
	else if (DS_GPIO_PIN_NUM == DS1){
 800065a:	79bb      	ldrb	r3, [r7, #6]
 800065c:	2b03      	cmp	r3, #3
 800065e:	d102      	bne.n	8000666 <Write_data+0x2a>
		Pin_74H595_t = &Pin_74H595_1;
 8000660:	4b37      	ldr	r3, [pc, #220]	@ (8000740 <Write_data+0x104>)
 8000662:	617b      	str	r3, [r7, #20]
 8000664:	e00a      	b.n	800067c <Write_data+0x40>
	}
	else if (DS_GPIO_PIN_NUM == DS2){
 8000666:	79bb      	ldrb	r3, [r7, #6]
 8000668:	2b05      	cmp	r3, #5
 800066a:	d102      	bne.n	8000672 <Write_data+0x36>
		Pin_74H595_t = &Pin_74H595_2;
 800066c:	4b35      	ldr	r3, [pc, #212]	@ (8000744 <Write_data+0x108>)
 800066e:	617b      	str	r3, [r7, #20]
 8000670:	e004      	b.n	800067c <Write_data+0x40>
	}
	else if (DS_GPIO_PIN_NUM == DS3){
 8000672:	79bb      	ldrb	r3, [r7, #6]
 8000674:	2b07      	cmp	r3, #7
 8000676:	d101      	bne.n	800067c <Write_data+0x40>
		Pin_74H595_t = &Pin_74H595_3;
 8000678:	4b33      	ldr	r3, [pc, #204]	@ (8000748 <Write_data+0x10c>)
 800067a:	617b      	str	r3, [r7, #20]
	}
	if (MSBorLSB == LSB){
 800067c:	797b      	ldrb	r3, [r7, #5]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d12a      	bne.n	80006d8 <Write_data+0x9c>
		for(int i = 7; i >= 0; i--){
 8000682:	2307      	movs	r3, #7
 8000684:	613b      	str	r3, [r7, #16]
 8000686:	e01f      	b.n	80006c8 <Write_data+0x8c>
			if((data >> i) & 0x01){
 8000688:	79fa      	ldrb	r2, [r7, #7]
 800068a:	693b      	ldr	r3, [r7, #16]
 800068c:	fa42 f303 	asr.w	r3, r2, r3
 8000690:	f003 0301 	and.w	r3, r3, #1
 8000694:	2b00      	cmp	r3, #0
 8000696:	d008      	beq.n	80006aa <Write_data+0x6e>
				GPIO_WriteToOutPutPin(Pin_74H595_t->DS.pGPIOx, Pin_74H595_t->DS.GPIO_Pin_Config.GPIO_PinNumber, High);
 8000698:	697b      	ldr	r3, [r7, #20]
 800069a:	6918      	ldr	r0, [r3, #16]
 800069c:	697b      	ldr	r3, [r7, #20]
 800069e:	7d1b      	ldrb	r3, [r3, #20]
 80006a0:	2201      	movs	r2, #1
 80006a2:	4619      	mov	r1, r3
 80006a4:	f000 fb2d 	bl	8000d02 <GPIO_WriteToOutPutPin>
 80006a8:	e007      	b.n	80006ba <Write_data+0x7e>
			}else{
				GPIO_WriteToOutPutPin(Pin_74H595_t->DS.pGPIOx, Pin_74H595_t->DS.GPIO_Pin_Config.GPIO_PinNumber, Low);
 80006aa:	697b      	ldr	r3, [r7, #20]
 80006ac:	6918      	ldr	r0, [r3, #16]
 80006ae:	697b      	ldr	r3, [r7, #20]
 80006b0:	7d1b      	ldrb	r3, [r3, #20]
 80006b2:	2200      	movs	r2, #0
 80006b4:	4619      	mov	r1, r3
 80006b6:	f000 fb24 	bl	8000d02 <GPIO_WriteToOutPutPin>
			}
			Clk_En(DS_GPIO_PIN_NUM);
 80006ba:	79bb      	ldrb	r3, [r7, #6]
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff ff27 	bl	8000510 <Clk_En>
		for(int i = 7; i >= 0; i--){
 80006c2:	693b      	ldr	r3, [r7, #16]
 80006c4:	3b01      	subs	r3, #1
 80006c6:	613b      	str	r3, [r7, #16]
 80006c8:	693b      	ldr	r3, [r7, #16]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	dadc      	bge.n	8000688 <Write_data+0x4c>
		}
		Latch_En(DS_GPIO_PIN_NUM);
 80006ce:	79bb      	ldrb	r3, [r7, #6]
 80006d0:	4618      	mov	r0, r3
 80006d2:	f000 f83b 	bl	800074c <Latch_En>
			}
			Clk_En(DS_GPIO_PIN_NUM);
		}
		Latch_En(DS_GPIO_PIN_NUM);
	}
}
 80006d6:	e02c      	b.n	8000732 <Write_data+0xf6>
	else if (MSBorLSB == MSB){
 80006d8:	797b      	ldrb	r3, [r7, #5]
 80006da:	2b01      	cmp	r3, #1
 80006dc:	d129      	bne.n	8000732 <Write_data+0xf6>
		for(int i = 0; i < 8; i++){
 80006de:	2300      	movs	r3, #0
 80006e0:	60fb      	str	r3, [r7, #12]
 80006e2:	e01f      	b.n	8000724 <Write_data+0xe8>
			if((data >> i) & 0x01){
 80006e4:	79fa      	ldrb	r2, [r7, #7]
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	fa42 f303 	asr.w	r3, r2, r3
 80006ec:	f003 0301 	and.w	r3, r3, #1
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d008      	beq.n	8000706 <Write_data+0xca>
				GPIO_WriteToOutPutPin(Pin_74H595_t->DS.pGPIOx, Pin_74H595_t->DS.GPIO_Pin_Config.GPIO_PinNumber, High);
 80006f4:	697b      	ldr	r3, [r7, #20]
 80006f6:	6918      	ldr	r0, [r3, #16]
 80006f8:	697b      	ldr	r3, [r7, #20]
 80006fa:	7d1b      	ldrb	r3, [r3, #20]
 80006fc:	2201      	movs	r2, #1
 80006fe:	4619      	mov	r1, r3
 8000700:	f000 faff 	bl	8000d02 <GPIO_WriteToOutPutPin>
 8000704:	e007      	b.n	8000716 <Write_data+0xda>
				GPIO_WriteToOutPutPin(Pin_74H595_t->DS.pGPIOx, Pin_74H595_t->DS.GPIO_Pin_Config.GPIO_PinNumber, Low);
 8000706:	697b      	ldr	r3, [r7, #20]
 8000708:	6918      	ldr	r0, [r3, #16]
 800070a:	697b      	ldr	r3, [r7, #20]
 800070c:	7d1b      	ldrb	r3, [r3, #20]
 800070e:	2200      	movs	r2, #0
 8000710:	4619      	mov	r1, r3
 8000712:	f000 faf6 	bl	8000d02 <GPIO_WriteToOutPutPin>
			Clk_En(DS_GPIO_PIN_NUM);
 8000716:	79bb      	ldrb	r3, [r7, #6]
 8000718:	4618      	mov	r0, r3
 800071a:	f7ff fef9 	bl	8000510 <Clk_En>
		for(int i = 0; i < 8; i++){
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	3301      	adds	r3, #1
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	2b07      	cmp	r3, #7
 8000728:	dddc      	ble.n	80006e4 <Write_data+0xa8>
		Latch_En(DS_GPIO_PIN_NUM);
 800072a:	79bb      	ldrb	r3, [r7, #6]
 800072c:	4618      	mov	r0, r3
 800072e:	f000 f80d 	bl	800074c <Latch_En>
}
 8000732:	bf00      	nop
 8000734:	3718      	adds	r7, #24
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	2000008c 	.word	0x2000008c
 8000740:	200000b4 	.word	0x200000b4
 8000744:	200000dc 	.word	0x200000dc
 8000748:	20000104 	.word	0x20000104

0800074c <Latch_En>:

void Latch_En(uint8_t DS_GPIO_PIN_NUM){
 800074c:	b580      	push	{r7, lr}
 800074e:	b08a      	sub	sp, #40	@ 0x28
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	71fb      	strb	r3, [r7, #7]
	Pin_74H595 *Pin_74H595_t;
	if (DS_GPIO_PIN_NUM == DS0){
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	2b01      	cmp	r3, #1
 800075a:	d102      	bne.n	8000762 <Latch_En+0x16>
		Pin_74H595_t = &Pin_74H595_0;
 800075c:	4b40      	ldr	r3, [pc, #256]	@ (8000860 <Latch_En+0x114>)
 800075e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000760:	e010      	b.n	8000784 <Latch_En+0x38>
	}
	else if (DS_GPIO_PIN_NUM == DS1){
 8000762:	79fb      	ldrb	r3, [r7, #7]
 8000764:	2b03      	cmp	r3, #3
 8000766:	d102      	bne.n	800076e <Latch_En+0x22>
		Pin_74H595_t = &Pin_74H595_1;
 8000768:	4b3e      	ldr	r3, [pc, #248]	@ (8000864 <Latch_En+0x118>)
 800076a:	627b      	str	r3, [r7, #36]	@ 0x24
 800076c:	e00a      	b.n	8000784 <Latch_En+0x38>
	}
	else if (DS_GPIO_PIN_NUM == DS2){
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	2b05      	cmp	r3, #5
 8000772:	d102      	bne.n	800077a <Latch_En+0x2e>
		Pin_74H595_t = &Pin_74H595_2;
 8000774:	4b3c      	ldr	r3, [pc, #240]	@ (8000868 <Latch_En+0x11c>)
 8000776:	627b      	str	r3, [r7, #36]	@ 0x24
 8000778:	e004      	b.n	8000784 <Latch_En+0x38>
	}
	else if (DS_GPIO_PIN_NUM == DS3){
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	2b07      	cmp	r3, #7
 800077e:	d101      	bne.n	8000784 <Latch_En+0x38>
		Pin_74H595_t = &Pin_74H595_3;
 8000780:	4b3a      	ldr	r3, [pc, #232]	@ (800086c <Latch_En+0x120>)
 8000782:	627b      	str	r3, [r7, #36]	@ 0x24
	}
	GPIO_WriteToOutPutPin(Pin_74H595_t->ST_CP.pGPIOx, Pin_74H595_t->ST_CP.GPIO_Pin_Config.GPIO_PinNumber, High);
 8000784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000786:	69d8      	ldr	r0, [r3, #28]
 8000788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800078a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800078e:	2201      	movs	r2, #1
 8000790:	4619      	mov	r1, r3
 8000792:	f000 fab6 	bl	8000d02 <GPIO_WriteToOutPutPin>
	delay_ms(5);
 8000796:	2300      	movs	r3, #0
 8000798:	623b      	str	r3, [r7, #32]
 800079a:	e024      	b.n	80007e6 <Latch_En+0x9a>
 800079c:	4b34      	ldr	r3, [pc, #208]	@ (8000870 <Latch_En+0x124>)
 800079e:	68db      	ldr	r3, [r3, #12]
 80007a0:	4a33      	ldr	r2, [pc, #204]	@ (8000870 <Latch_En+0x124>)
 80007a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80007a6:	60d3      	str	r3, [r2, #12]
 80007a8:	4b32      	ldr	r3, [pc, #200]	@ (8000874 <Latch_En+0x128>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a31      	ldr	r2, [pc, #196]	@ (8000874 <Latch_En+0x128>)
 80007ae:	f043 0301 	orr.w	r3, r3, #1
 80007b2:	6013      	str	r3, [r2, #0]
 80007b4:	4b2f      	ldr	r3, [pc, #188]	@ (8000874 <Latch_En+0x128>)
 80007b6:	685b      	ldr	r3, [r3, #4]
 80007b8:	613b      	str	r3, [r7, #16]
 80007ba:	f001 fc69 	bl	8002090 <RCC_GetSystemClock>
 80007be:	4603      	mov	r3, r0
 80007c0:	4a2d      	ldr	r2, [pc, #180]	@ (8000878 <Latch_En+0x12c>)
 80007c2:	fba2 2303 	umull	r2, r3, r2, r3
 80007c6:	0c9b      	lsrs	r3, r3, #18
 80007c8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80007cc:	fb02 f303 	mul.w	r3, r2, r3
 80007d0:	60fb      	str	r3, [r7, #12]
 80007d2:	4b28      	ldr	r3, [pc, #160]	@ (8000874 <Latch_En+0x128>)
 80007d4:	685a      	ldr	r2, [r3, #4]
 80007d6:	693b      	ldr	r3, [r7, #16]
 80007d8:	1ad3      	subs	r3, r2, r3
 80007da:	68fa      	ldr	r2, [r7, #12]
 80007dc:	429a      	cmp	r2, r3
 80007de:	d8f8      	bhi.n	80007d2 <Latch_En+0x86>
 80007e0:	6a3b      	ldr	r3, [r7, #32]
 80007e2:	3301      	adds	r3, #1
 80007e4:	623b      	str	r3, [r7, #32]
 80007e6:	6a3b      	ldr	r3, [r7, #32]
 80007e8:	2b04      	cmp	r3, #4
 80007ea:	d9d7      	bls.n	800079c <Latch_En+0x50>
	GPIO_WriteToOutPutPin(Pin_74H595_t->ST_CP.pGPIOx, Pin_74H595_t->ST_CP.GPIO_Pin_Config.GPIO_PinNumber, Low);
 80007ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007ee:	69d8      	ldr	r0, [r3, #28]
 80007f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80007f6:	2200      	movs	r2, #0
 80007f8:	4619      	mov	r1, r3
 80007fa:	f000 fa82 	bl	8000d02 <GPIO_WriteToOutPutPin>
	delay_ms(5);
 80007fe:	2300      	movs	r3, #0
 8000800:	61fb      	str	r3, [r7, #28]
 8000802:	e024      	b.n	800084e <Latch_En+0x102>
 8000804:	4b1a      	ldr	r3, [pc, #104]	@ (8000870 <Latch_En+0x124>)
 8000806:	68db      	ldr	r3, [r3, #12]
 8000808:	4a19      	ldr	r2, [pc, #100]	@ (8000870 <Latch_En+0x124>)
 800080a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800080e:	60d3      	str	r3, [r2, #12]
 8000810:	4b18      	ldr	r3, [pc, #96]	@ (8000874 <Latch_En+0x128>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a17      	ldr	r2, [pc, #92]	@ (8000874 <Latch_En+0x128>)
 8000816:	f043 0301 	orr.w	r3, r3, #1
 800081a:	6013      	str	r3, [r2, #0]
 800081c:	4b15      	ldr	r3, [pc, #84]	@ (8000874 <Latch_En+0x128>)
 800081e:	685b      	ldr	r3, [r3, #4]
 8000820:	61bb      	str	r3, [r7, #24]
 8000822:	f001 fc35 	bl	8002090 <RCC_GetSystemClock>
 8000826:	4603      	mov	r3, r0
 8000828:	4a13      	ldr	r2, [pc, #76]	@ (8000878 <Latch_En+0x12c>)
 800082a:	fba2 2303 	umull	r2, r3, r2, r3
 800082e:	0c9b      	lsrs	r3, r3, #18
 8000830:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000834:	fb02 f303 	mul.w	r3, r2, r3
 8000838:	617b      	str	r3, [r7, #20]
 800083a:	4b0e      	ldr	r3, [pc, #56]	@ (8000874 <Latch_En+0x128>)
 800083c:	685a      	ldr	r2, [r3, #4]
 800083e:	69bb      	ldr	r3, [r7, #24]
 8000840:	1ad3      	subs	r3, r2, r3
 8000842:	697a      	ldr	r2, [r7, #20]
 8000844:	429a      	cmp	r2, r3
 8000846:	d8f8      	bhi.n	800083a <Latch_En+0xee>
 8000848:	69fb      	ldr	r3, [r7, #28]
 800084a:	3301      	adds	r3, #1
 800084c:	61fb      	str	r3, [r7, #28]
 800084e:	69fb      	ldr	r3, [r7, #28]
 8000850:	2b04      	cmp	r3, #4
 8000852:	d9d7      	bls.n	8000804 <Latch_En+0xb8>
}
 8000854:	bf00      	nop
 8000856:	bf00      	nop
 8000858:	3728      	adds	r7, #40	@ 0x28
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	2000008c 	.word	0x2000008c
 8000864:	200000b4 	.word	0x200000b4
 8000868:	200000dc 	.word	0x200000dc
 800086c:	20000104 	.word	0x20000104
 8000870:	e000edf0 	.word	0xe000edf0
 8000874:	e0001000 	.word	0xe0001000
 8000878:	431bde83 	.word	0x431bde83

0800087c <Set_74HC595>:

Pin_74H595 Set_74HC595(Pin_74H595 *Pin_74H595_t, uint8_t DS_GPIO_PIN_NUM, uint8_t ST_CP_GPIO_PIN_NUM){
 800087c:	b5b0      	push	{r4, r5, r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
 8000882:	60f8      	str	r0, [r7, #12]
 8000884:	60b9      	str	r1, [r7, #8]
 8000886:	4611      	mov	r1, r2
 8000888:	461a      	mov	r2, r3
 800088a:	460b      	mov	r3, r1
 800088c:	71fb      	strb	r3, [r7, #7]
 800088e:	4613      	mov	r3, r2
 8000890:	71bb      	strb	r3, [r7, #6]
	GPIOE_PCLK_EN;
 8000892:	4b30      	ldr	r3, [pc, #192]	@ (8000954 <Set_74HC595+0xd8>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	4a2f      	ldr	r2, [pc, #188]	@ (8000954 <Set_74HC595+0xd8>)
 8000898:	f043 0310 	orr.w	r3, r3, #16
 800089c:	6313      	str	r3, [r2, #48]	@ 0x30
	Pin_74H595_t->SH_CP.pGPIOx = GPIOE;
 800089e:	68bb      	ldr	r3, [r7, #8]
 80008a0:	4a2d      	ldr	r2, [pc, #180]	@ (8000958 <Set_74HC595+0xdc>)
 80008a2:	605a      	str	r2, [r3, #4]
	Pin_74H595_t->SH_CP.GPIO_Pin_Config.GPIO_PinNumber = GPIO_PIN_NUM_0;
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	2200      	movs	r2, #0
 80008a8:	721a      	strb	r2, [r3, #8]
	Pin_74H595_t->SH_CP.GPIO_Pin_Config.GPIO_PinMode = GPIO_MODER_OUTPUT;
 80008aa:	68bb      	ldr	r3, [r7, #8]
 80008ac:	2201      	movs	r2, #1
 80008ae:	725a      	strb	r2, [r3, #9]
	Pin_74H595_t->SH_CP.GPIO_Pin_Config.GPIO_PinOPType = GPIO_OTYPER_PP;
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	2200      	movs	r2, #0
 80008b4:	731a      	strb	r2, [r3, #12]
	Pin_74H595_t->SH_CP.GPIO_Pin_Config.GPIO_PinSpeed = GPIO_OSPEEDR_HIGH;
 80008b6:	68bb      	ldr	r3, [r7, #8]
 80008b8:	2202      	movs	r2, #2
 80008ba:	729a      	strb	r2, [r3, #10]
	Pin_74H595_t->SH_CP.GPIO_Pin_Config.GPIO_PinPuPdControl = GPIO_PUPDR_PU;
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	2201      	movs	r2, #1
 80008c0:	72da      	strb	r2, [r3, #11]
	GPIO_Init(&(Pin_74H595_t->SH_CP));
 80008c2:	68bb      	ldr	r3, [r7, #8]
 80008c4:	3304      	adds	r3, #4
 80008c6:	4618      	mov	r0, r3
 80008c8:	f000 f92b 	bl	8000b22 <GPIO_Init>

	Pin_74H595_t->DS.pGPIOx = GPIOE;
 80008cc:	68bb      	ldr	r3, [r7, #8]
 80008ce:	4a22      	ldr	r2, [pc, #136]	@ (8000958 <Set_74HC595+0xdc>)
 80008d0:	611a      	str	r2, [r3, #16]
	Pin_74H595_t->DS.GPIO_Pin_Config.GPIO_PinNumber = DS_GPIO_PIN_NUM;
 80008d2:	68bb      	ldr	r3, [r7, #8]
 80008d4:	79fa      	ldrb	r2, [r7, #7]
 80008d6:	751a      	strb	r2, [r3, #20]
	Pin_74H595_t->DS.GPIO_Pin_Config.GPIO_PinMode = GPIO_MODER_OUTPUT;
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	2201      	movs	r2, #1
 80008dc:	755a      	strb	r2, [r3, #21]
	Pin_74H595_t->DS.GPIO_Pin_Config.GPIO_PinOPType = GPIO_OTYPER_PP;
 80008de:	68bb      	ldr	r3, [r7, #8]
 80008e0:	2200      	movs	r2, #0
 80008e2:	761a      	strb	r2, [r3, #24]
	Pin_74H595_t->DS.GPIO_Pin_Config.GPIO_PinSpeed = GPIO_OSPEEDR_HIGH;
 80008e4:	68bb      	ldr	r3, [r7, #8]
 80008e6:	2202      	movs	r2, #2
 80008e8:	759a      	strb	r2, [r3, #22]
	Pin_74H595_t->DS.GPIO_Pin_Config.GPIO_PinPuPdControl = GPIO_PUPDR_PU;
 80008ea:	68bb      	ldr	r3, [r7, #8]
 80008ec:	2201      	movs	r2, #1
 80008ee:	75da      	strb	r2, [r3, #23]
	GPIO_Init(&(Pin_74H595_t->DS));
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	3310      	adds	r3, #16
 80008f4:	4618      	mov	r0, r3
 80008f6:	f000 f914 	bl	8000b22 <GPIO_Init>

	Pin_74H595_t->ST_CP.pGPIOx = GPIOE;
 80008fa:	68bb      	ldr	r3, [r7, #8]
 80008fc:	4a16      	ldr	r2, [pc, #88]	@ (8000958 <Set_74HC595+0xdc>)
 80008fe:	61da      	str	r2, [r3, #28]
	Pin_74H595_t->ST_CP.GPIO_Pin_Config.GPIO_PinNumber = ST_CP_GPIO_PIN_NUM;
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	79ba      	ldrb	r2, [r7, #6]
 8000904:	f883 2020 	strb.w	r2, [r3, #32]
	Pin_74H595_t->ST_CP.GPIO_Pin_Config.GPIO_PinMode = GPIO_MODER_OUTPUT;
 8000908:	68bb      	ldr	r3, [r7, #8]
 800090a:	2201      	movs	r2, #1
 800090c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	Pin_74H595_t->ST_CP.GPIO_Pin_Config.GPIO_PinOPType = GPIO_OTYPER_PP;
 8000910:	68bb      	ldr	r3, [r7, #8]
 8000912:	2200      	movs	r2, #0
 8000914:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	Pin_74H595_t->ST_CP.GPIO_Pin_Config.GPIO_PinSpeed = GPIO_OSPEEDR_HIGH;
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	2202      	movs	r2, #2
 800091c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	Pin_74H595_t->ST_CP.GPIO_Pin_Config.GPIO_PinPuPdControl = GPIO_PUPDR_PU;
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	2201      	movs	r2, #1
 8000924:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	GPIO_Init(&(Pin_74H595_t->ST_CP));
 8000928:	68bb      	ldr	r3, [r7, #8]
 800092a:	331c      	adds	r3, #28
 800092c:	4618      	mov	r0, r3
 800092e:	f000 f8f8 	bl	8000b22 <GPIO_Init>

	return *Pin_74H595_t;
 8000932:	68fa      	ldr	r2, [r7, #12]
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	4614      	mov	r4, r2
 8000938:	461d      	mov	r5, r3
 800093a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800093c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800093e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000940:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000942:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000946:	e884 0003 	stmia.w	r4, {r0, r1}
}
 800094a:	68f8      	ldr	r0, [r7, #12]
 800094c:	3710      	adds	r7, #16
 800094e:	46bd      	mov	sp, r7
 8000950:	bdb0      	pop	{r4, r5, r7, pc}
 8000952:	bf00      	nop
 8000954:	40023800 	.word	0x40023800
 8000958:	40021000 	.word	0x40021000

0800095c <init_74HC595>:

void init_74HC595(uint8_t DS_GPIO_PIN_NUM){
 800095c:	b5b0      	push	{r4, r5, r7, lr}
 800095e:	b08c      	sub	sp, #48	@ 0x30
 8000960:	af00      	add	r7, sp, #0
 8000962:	4603      	mov	r3, r0
 8000964:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (DS_GPIO_PIN_NUM == DS0){
 8000968:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800096c:	2b01      	cmp	r3, #1
 800096e:	d112      	bne.n	8000996 <init_74HC595+0x3a>
		Pin_74H595_0 = Set_74HC595(&Pin_74H595_0, DS_GPIO_PIN_NUM, ST_CP0);
 8000970:	4c2d      	ldr	r4, [pc, #180]	@ (8000a28 <init_74HC595+0xcc>)
 8000972:	4638      	mov	r0, r7
 8000974:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000978:	2302      	movs	r3, #2
 800097a:	492b      	ldr	r1, [pc, #172]	@ (8000a28 <init_74HC595+0xcc>)
 800097c:	f7ff ff7e 	bl	800087c <Set_74HC595>
 8000980:	4625      	mov	r5, r4
 8000982:	463c      	mov	r4, r7
 8000984:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000986:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000988:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800098a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800098c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000990:	e885 0003 	stmia.w	r5, {r0, r1}
		Pin_74H595_2 = Set_74HC595(&Pin_74H595_2, DS_GPIO_PIN_NUM, ST_CP2);
	}
	else if (DS_GPIO_PIN_NUM == DS3){
		Pin_74H595_2 = Set_74HC595(&Pin_74H595_3, DS_GPIO_PIN_NUM, ST_CP3);
	}
}
 8000994:	e043      	b.n	8000a1e <init_74HC595+0xc2>
	else if (DS_GPIO_PIN_NUM == DS1){
 8000996:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800099a:	2b03      	cmp	r3, #3
 800099c:	d112      	bne.n	80009c4 <init_74HC595+0x68>
		Pin_74H595_1 = Set_74HC595(&Pin_74H595_1, DS_GPIO_PIN_NUM, ST_CP1);
 800099e:	4c23      	ldr	r4, [pc, #140]	@ (8000a2c <init_74HC595+0xd0>)
 80009a0:	4638      	mov	r0, r7
 80009a2:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80009a6:	2304      	movs	r3, #4
 80009a8:	4920      	ldr	r1, [pc, #128]	@ (8000a2c <init_74HC595+0xd0>)
 80009aa:	f7ff ff67 	bl	800087c <Set_74HC595>
 80009ae:	4625      	mov	r5, r4
 80009b0:	463c      	mov	r4, r7
 80009b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009ba:	e894 0003 	ldmia.w	r4, {r0, r1}
 80009be:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80009c2:	e02c      	b.n	8000a1e <init_74HC595+0xc2>
	else if (DS_GPIO_PIN_NUM == DS2){
 80009c4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80009c8:	2b05      	cmp	r3, #5
 80009ca:	d112      	bne.n	80009f2 <init_74HC595+0x96>
		Pin_74H595_2 = Set_74HC595(&Pin_74H595_2, DS_GPIO_PIN_NUM, ST_CP2);
 80009cc:	4c18      	ldr	r4, [pc, #96]	@ (8000a30 <init_74HC595+0xd4>)
 80009ce:	4638      	mov	r0, r7
 80009d0:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80009d4:	2306      	movs	r3, #6
 80009d6:	4916      	ldr	r1, [pc, #88]	@ (8000a30 <init_74HC595+0xd4>)
 80009d8:	f7ff ff50 	bl	800087c <Set_74HC595>
 80009dc:	4625      	mov	r5, r4
 80009de:	463c      	mov	r4, r7
 80009e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80009ec:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80009f0:	e015      	b.n	8000a1e <init_74HC595+0xc2>
	else if (DS_GPIO_PIN_NUM == DS3){
 80009f2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80009f6:	2b07      	cmp	r3, #7
 80009f8:	d111      	bne.n	8000a1e <init_74HC595+0xc2>
		Pin_74H595_2 = Set_74HC595(&Pin_74H595_3, DS_GPIO_PIN_NUM, ST_CP3);
 80009fa:	4c0d      	ldr	r4, [pc, #52]	@ (8000a30 <init_74HC595+0xd4>)
 80009fc:	4638      	mov	r0, r7
 80009fe:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000a02:	2308      	movs	r3, #8
 8000a04:	490b      	ldr	r1, [pc, #44]	@ (8000a34 <init_74HC595+0xd8>)
 8000a06:	f7ff ff39 	bl	800087c <Set_74HC595>
 8000a0a:	4625      	mov	r5, r4
 8000a0c:	463c      	mov	r4, r7
 8000a0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a16:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000a1a:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000a1e:	bf00      	nop
 8000a20:	3730      	adds	r7, #48	@ 0x30
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bdb0      	pop	{r4, r5, r7, pc}
 8000a26:	bf00      	nop
 8000a28:	2000008c 	.word	0x2000008c
 8000a2c:	200000b4 	.word	0x200000b4
 8000a30:	200000dc 	.word	0x200000dc
 8000a34:	20000104 	.word	0x20000104

08000a38 <_ZN6DeviceC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

#include "Device.h"



Device::Device(std::string name){
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
 8000a40:	6039      	str	r1, [r7, #0]
	if (name.compare("Living Room") == 0){
 8000a42:	492c      	ldr	r1, [pc, #176]	@ (8000af4 <_ZN6DeviceC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xbc>)
 8000a44:	6838      	ldr	r0, [r7, #0]
 8000a46:	f002 fd22 	bl	800348e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	bf0c      	ite	eq
 8000a50:	2301      	moveq	r3, #1
 8000a52:	2300      	movne	r3, #0
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d009      	beq.n	8000a6e <_ZN6DeviceC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x36>
		id = em_LV_R;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	2202      	movs	r2, #2
 8000a5e:	701a      	strb	r2, [r3, #0]
		id_74HC[0] = DS0;	// For led
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2201      	movs	r2, #1
 8000a64:	705a      	strb	r2, [r3, #1]
		id_74HC[1] = DS3;	// For LCD
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	2207      	movs	r2, #7
 8000a6a:	709a      	strb	r2, [r3, #2]
 8000a6c:	e024      	b.n	8000ab8 <_ZN6DeviceC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x80>
	}
	else if (name.compare("Kitchen Room") == 0){
 8000a6e:	4922      	ldr	r1, [pc, #136]	@ (8000af8 <_ZN6DeviceC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc0>)
 8000a70:	6838      	ldr	r0, [r7, #0]
 8000a72:	f002 fd0c 	bl	800348e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	bf0c      	ite	eq
 8000a7c:	2301      	moveq	r3, #1
 8000a7e:	2300      	movne	r3, #0
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d006      	beq.n	8000a94 <_ZN6DeviceC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x5c>
		id = em_KC_R;
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	2203      	movs	r2, #3
 8000a8a:	701a      	strb	r2, [r3, #0]
		id_74HC[0] = DS1;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	2203      	movs	r2, #3
 8000a90:	705a      	strb	r2, [r3, #1]
 8000a92:	e011      	b.n	8000ab8 <_ZN6DeviceC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x80>
	}

	else if (name.compare("Bed Room") == 0){
 8000a94:	4919      	ldr	r1, [pc, #100]	@ (8000afc <_ZN6DeviceC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc4>)
 8000a96:	6838      	ldr	r0, [r7, #0]
 8000a98:	f002 fcf9 	bl	800348e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	bf0c      	ite	eq
 8000aa2:	2301      	moveq	r3, #1
 8000aa4:	2300      	movne	r3, #0
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d005      	beq.n	8000ab8 <_ZN6DeviceC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x80>
		id = em_B_R;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	2204      	movs	r2, #4
 8000ab0:	701a      	strb	r2, [r3, #0]
		id_74HC[0] = DS2;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	2205      	movs	r2, #5
 8000ab6:	705a      	strb	r2, [r3, #1]
	}

	// For shift IC
	for (uint8_t i = 0; i < sizeof(id_74HC); i++){
 8000ab8:	2300      	movs	r3, #0
 8000aba:	73fb      	strb	r3, [r7, #15]
 8000abc:	e009      	b.n	8000ad2 <_ZN6DeviceC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x9a>
		init_74HC595(id_74HC[i]);
 8000abe:	7bfb      	ldrb	r3, [r7, #15]
 8000ac0:	687a      	ldr	r2, [r7, #4]
 8000ac2:	4413      	add	r3, r2
 8000ac4:	785b      	ldrb	r3, [r3, #1]
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f7ff ff48 	bl	800095c <init_74HC595>
	for (uint8_t i = 0; i < sizeof(id_74HC); i++){
 8000acc:	7bfb      	ldrb	r3, [r7, #15]
 8000ace:	3301      	adds	r3, #1
 8000ad0:	73fb      	strb	r3, [r7, #15]
 8000ad2:	7bfb      	ldrb	r3, [r7, #15]
 8000ad4:	2b04      	cmp	r3, #4
 8000ad6:	d9f2      	bls.n	8000abe <_ZN6DeviceC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x86>
	}
	// For LCD
	if (id_74HC[1] == DS3){
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	789b      	ldrb	r3, [r3, #2]
 8000adc:	2b07      	cmp	r3, #7
 8000ade:	d103      	bne.n	8000ae8 <_ZN6DeviceC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xb0>
		i2c_lcd_init();
 8000ae0:	f000 fc42 	bl	8001368 <i2c_lcd_init>
		lcd_init();
 8000ae4:	f000 fed0 	bl	8001888 <lcd_init>
	}
}
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	4618      	mov	r0, r3
 8000aec:	3710      	adds	r7, #16
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	08003938 	.word	0x08003938
 8000af8:	08003944 	.word	0x08003944
 8000afc:	08003954 	.word	0x08003954

08000b00 <_ZN6Device9TurnOnLedEh>:

Device::~Device() {}

void Device::TurnOnLed(uint8_t data){
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
 8000b08:	460b      	mov	r3, r1
 8000b0a:	70fb      	strb	r3, [r7, #3]
	Write_data(data, id_74HC[0], MSB);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	7859      	ldrb	r1, [r3, #1]
 8000b10:	78fb      	ldrb	r3, [r7, #3]
 8000b12:	2201      	movs	r2, #1
 8000b14:	4618      	mov	r0, r3
 8000b16:	f7ff fd91 	bl	800063c <Write_data>
}
 8000b1a:	bf00      	nop
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <GPIO_Init>:
        else if(pGPIOx == GPIOD) GPIOD_PCLK_DIS;
    }
}

//Init and Denit
void GPIO_Init(GPIO_Handle_t *pGPIOHandel){
 8000b22:	b480      	push	{r7}
 8000b24:	b085      	sub	sp, #20
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	6078      	str	r0, [r7, #4]
    // 1.Configgure mode GPIO pin
    uint32_t temp = 0;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60fb      	str	r3, [r7, #12]
    if(pGPIOHandel->GPIO_Pin_Config.GPIO_PinMode <= GPIO_MODER_ANALOG){
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	795b      	ldrb	r3, [r3, #5]
 8000b32:	2b03      	cmp	r3, #3
 8000b34:	d81f      	bhi.n	8000b76 <GPIO_Init+0x54>
        temp = pGPIOHandel->GPIO_Pin_Config.GPIO_PinMode << (2* pGPIOHandel->GPIO_Pin_Config.GPIO_PinNumber);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	795b      	ldrb	r3, [r3, #5]
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	791b      	ldrb	r3, [r3, #4]
 8000b40:	005b      	lsls	r3, r3, #1
 8000b42:	fa02 f303 	lsl.w	r3, r2, r3
 8000b46:	60fb      	str	r3, [r7, #12]
        pGPIOHandel->pGPIOx->MODER &= ~(3 << (2* pGPIOHandel->GPIO_Pin_Config.GPIO_PinNumber));
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	791b      	ldrb	r3, [r3, #4]
 8000b52:	005b      	lsls	r3, r3, #1
 8000b54:	2103      	movs	r1, #3
 8000b56:	fa01 f303 	lsl.w	r3, r1, r3
 8000b5a:	43db      	mvns	r3, r3
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	400a      	ands	r2, r1
 8000b64:	601a      	str	r2, [r3, #0]
        pGPIOHandel->pGPIOx->MODER |= temp;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	6819      	ldr	r1, [r3, #0]
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	68fa      	ldr	r2, [r7, #12]
 8000b72:	430a      	orrs	r2, r1
 8000b74:	601a      	str	r2, [r3, #0]
    }
    else{
        // Interrupt
    }
    temp = 0;
 8000b76:	2300      	movs	r3, #0
 8000b78:	60fb      	str	r3, [r7, #12]
    // 2.Configure speed
    if(pGPIOHandel->GPIO_Pin_Config.GPIO_PinSpeed <= GPIO_OSPEEDR_VERYHIGH){
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	799b      	ldrb	r3, [r3, #6]
 8000b7e:	2b03      	cmp	r3, #3
 8000b80:	d81f      	bhi.n	8000bc2 <GPIO_Init+0xa0>
        temp = pGPIOHandel->GPIO_Pin_Config.GPIO_PinSpeed << (2* pGPIOHandel->GPIO_Pin_Config.GPIO_PinNumber);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	799b      	ldrb	r3, [r3, #6]
 8000b86:	461a      	mov	r2, r3
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	791b      	ldrb	r3, [r3, #4]
 8000b8c:	005b      	lsls	r3, r3, #1
 8000b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b92:	60fb      	str	r3, [r7, #12]
        pGPIOHandel->pGPIOx->OSPEEDR &= ~(3 << (2* pGPIOHandel->GPIO_Pin_Config.GPIO_PinNumber));
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	689a      	ldr	r2, [r3, #8]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	791b      	ldrb	r3, [r3, #4]
 8000b9e:	005b      	lsls	r3, r3, #1
 8000ba0:	2103      	movs	r1, #3
 8000ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba6:	43db      	mvns	r3, r3
 8000ba8:	4619      	mov	r1, r3
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	400a      	ands	r2, r1
 8000bb0:	609a      	str	r2, [r3, #8]
        pGPIOHandel->pGPIOx->OSPEEDR |= temp;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	6899      	ldr	r1, [r3, #8]
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	68fa      	ldr	r2, [r7, #12]
 8000bbe:	430a      	orrs	r2, r1
 8000bc0:	609a      	str	r2, [r3, #8]
    }
    else{
       // Interrupt
    }
    temp = 0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60fb      	str	r3, [r7, #12]

    // 3.Configure pupd setting
    if(pGPIOHandel->GPIO_Pin_Config.GPIO_PinPuPdControl <= GPIO_PUPDR_RESERVED){
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	79db      	ldrb	r3, [r3, #7]
 8000bca:	2b03      	cmp	r3, #3
 8000bcc:	d81f      	bhi.n	8000c0e <GPIO_Init+0xec>
        temp = pGPIOHandel->GPIO_Pin_Config.GPIO_PinPuPdControl << (2* pGPIOHandel->GPIO_Pin_Config.GPIO_PinNumber);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	79db      	ldrb	r3, [r3, #7]
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	791b      	ldrb	r3, [r3, #4]
 8000bd8:	005b      	lsls	r3, r3, #1
 8000bda:	fa02 f303 	lsl.w	r3, r2, r3
 8000bde:	60fb      	str	r3, [r7, #12]
        pGPIOHandel->pGPIOx->PUPDR &= ~(3 << (2* pGPIOHandel->GPIO_Pin_Config.GPIO_PinNumber));
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	68da      	ldr	r2, [r3, #12]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	791b      	ldrb	r3, [r3, #4]
 8000bea:	005b      	lsls	r3, r3, #1
 8000bec:	2103      	movs	r1, #3
 8000bee:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf2:	43db      	mvns	r3, r3
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	400a      	ands	r2, r1
 8000bfc:	60da      	str	r2, [r3, #12]
        pGPIOHandel->pGPIOx->PUPDR |= temp;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	68d9      	ldr	r1, [r3, #12]
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	68fa      	ldr	r2, [r7, #12]
 8000c0a:	430a      	orrs	r2, r1
 8000c0c:	60da      	str	r2, [r3, #12]
    }
    else{
        // Interrupt
    }
    temp = 0;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60fb      	str	r3, [r7, #12]
    // 4.Configure otype
    if(pGPIOHandel->GPIO_Pin_Config.GPIO_PinOPType <= GPIO_OTYPER_OD){
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	7a1b      	ldrb	r3, [r3, #8]
 8000c16:	2b01      	cmp	r3, #1
 8000c18:	d81d      	bhi.n	8000c56 <GPIO_Init+0x134>
        temp = pGPIOHandel->GPIO_Pin_Config.GPIO_PinOPType << pGPIOHandel->GPIO_Pin_Config.GPIO_PinNumber;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	7a1b      	ldrb	r3, [r3, #8]
 8000c1e:	461a      	mov	r2, r3
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	791b      	ldrb	r3, [r3, #4]
 8000c24:	fa02 f303 	lsl.w	r3, r2, r3
 8000c28:	60fb      	str	r3, [r7, #12]
        pGPIOHandel->pGPIOx->OTYPER &= ~(1 << pGPIOHandel->GPIO_Pin_Config.GPIO_PinNumber);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	685a      	ldr	r2, [r3, #4]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	791b      	ldrb	r3, [r3, #4]
 8000c34:	4619      	mov	r1, r3
 8000c36:	2301      	movs	r3, #1
 8000c38:	408b      	lsls	r3, r1
 8000c3a:	43db      	mvns	r3, r3
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	400a      	ands	r2, r1
 8000c44:	605a      	str	r2, [r3, #4]
        pGPIOHandel->pGPIOx->OTYPER |= temp;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	6859      	ldr	r1, [r3, #4]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	68fa      	ldr	r2, [r7, #12]
 8000c52:	430a      	orrs	r2, r1
 8000c54:	605a      	str	r2, [r3, #4]
    }
    else{
        // Interrupt
    }
    temp = 0;
 8000c56:	2300      	movs	r3, #0
 8000c58:	60fb      	str	r3, [r7, #12]
    // 5.Configure alt func mode
	if (pGPIOHandel->GPIO_Pin_Config.GPIO_PinAltFunMode_High <= GPIO_AFRH_AF15){
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	7a5b      	ldrb	r3, [r3, #9]
 8000c5e:	2b0f      	cmp	r3, #15
 8000c60:	d821      	bhi.n	8000ca6 <GPIO_Init+0x184>
		temp = pGPIOHandel->GPIO_Pin_Config.GPIO_PinAltFunMode_High << (4 * (pGPIOHandel->GPIO_Pin_Config.GPIO_PinNumber - 8));
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	7a5b      	ldrb	r3, [r3, #9]
 8000c66:	461a      	mov	r2, r3
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	791b      	ldrb	r3, [r3, #4]
 8000c6c:	3b08      	subs	r3, #8
 8000c6e:	009b      	lsls	r3, r3, #2
 8000c70:	fa02 f303 	lsl.w	r3, r2, r3
 8000c74:	60fb      	str	r3, [r7, #12]
		pGPIOHandel->pGPIOx->AFRH &= ~(4 << (4 * (pGPIOHandel->GPIO_Pin_Config.GPIO_PinNumber - 8)));
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	791b      	ldrb	r3, [r3, #4]
 8000c80:	3b08      	subs	r3, #8
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	2104      	movs	r1, #4
 8000c86:	fa01 f303 	lsl.w	r3, r1, r3
 8000c8a:	43db      	mvns	r3, r3
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	400a      	ands	r2, r1
 8000c94:	625a      	str	r2, [r3, #36]	@ 0x24
		pGPIOHandel->pGPIOx->AFRH |= temp;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	68fa      	ldr	r2, [r7, #12]
 8000ca2:	430a      	orrs	r2, r1
 8000ca4:	625a      	str	r2, [r3, #36]	@ 0x24
	}

	temp = 0;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	60fb      	str	r3, [r7, #12]
	if (pGPIOHandel->GPIO_Pin_Config.GPIO_PinAltFunMode_Low <= GPIO_AFRL_AF15){
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	7a9b      	ldrb	r3, [r3, #10]
 8000cae:	2b0f      	cmp	r3, #15
 8000cb0:	d81f      	bhi.n	8000cf2 <GPIO_Init+0x1d0>
		temp = pGPIOHandel->GPIO_Pin_Config.GPIO_PinAltFunMode_Low << (4 * (pGPIOHandel->GPIO_Pin_Config.GPIO_PinNumber));
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	7a9b      	ldrb	r3, [r3, #10]
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	791b      	ldrb	r3, [r3, #4]
 8000cbc:	009b      	lsls	r3, r3, #2
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	60fb      	str	r3, [r7, #12]
		pGPIOHandel->pGPIOx->AFRL &= ~(4 << (4 * (pGPIOHandel->GPIO_Pin_Config.GPIO_PinNumber)));
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	6a1a      	ldr	r2, [r3, #32]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	791b      	ldrb	r3, [r3, #4]
 8000cce:	009b      	lsls	r3, r3, #2
 8000cd0:	2104      	movs	r1, #4
 8000cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd6:	43db      	mvns	r3, r3
 8000cd8:	4619      	mov	r1, r3
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	400a      	ands	r2, r1
 8000ce0:	621a      	str	r2, [r3, #32]
		pGPIOHandel->pGPIOx->AFRL |= temp;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	6a19      	ldr	r1, [r3, #32]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	68fa      	ldr	r2, [r7, #12]
 8000cee:	430a      	orrs	r2, r1
 8000cf0:	621a      	str	r2, [r3, #32]
	}
	temp = 0;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60fb      	str	r3, [r7, #12]
}
 8000cf6:	bf00      	nop
 8000cf8:	3714      	adds	r7, #20
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr

08000d02 <GPIO_WriteToOutPutPin>:
    uint16_t value;
    value = (uint16_t)(pGPIOx->IDR);
    return value;
}

void GPIO_WriteToOutPutPin(GPIO_RegDef_t *pGPIOx, uint8_t GPIO_PinNumber, uint8_t Status){
 8000d02:	b480      	push	{r7}
 8000d04:	b083      	sub	sp, #12
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	70fb      	strb	r3, [r7, #3]
 8000d0e:	4613      	mov	r3, r2
 8000d10:	70bb      	strb	r3, [r7, #2]
    if(Status == GPIO_PIN_SET){
 8000d12:	78bb      	ldrb	r3, [r7, #2]
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d109      	bne.n	8000d2c <GPIO_WriteToOutPutPin+0x2a>
        pGPIOx->ODR |= (1 << GPIO_PinNumber);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	695b      	ldr	r3, [r3, #20]
 8000d1c:	78fa      	ldrb	r2, [r7, #3]
 8000d1e:	2101      	movs	r1, #1
 8000d20:	fa01 f202 	lsl.w	r2, r1, r2
 8000d24:	431a      	orrs	r2, r3
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	615a      	str	r2, [r3, #20]
    }
    else{
        pGPIOx->ODR &= ~(1 << GPIO_PinNumber);
    }
}
 8000d2a:	e009      	b.n	8000d40 <GPIO_WriteToOutPutPin+0x3e>
        pGPIOx->ODR &= ~(1 << GPIO_PinNumber);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	695b      	ldr	r3, [r3, #20]
 8000d30:	78fa      	ldrb	r2, [r7, #3]
 8000d32:	2101      	movs	r1, #1
 8000d34:	fa01 f202 	lsl.w	r2, r1, r2
 8000d38:	43d2      	mvns	r2, r2
 8000d3a:	401a      	ands	r2, r3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	615a      	str	r2, [r3, #20]
}
 8000d40:	bf00      	nop
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <I2C_GenrateStartCondition>:
static void I2C_GenrateStartCondition(I2C_RegDef_t *pI2Cx);
static void I2C_ClearAddrFlag(I2C_RegDef_t *pI2Cx);
static void I2C_GenrateStopCondition(I2C_RegDef_t *pI2Cx);
static void Config_GPIO_I2C();

static void I2C_GenrateStartCondition(I2C_RegDef_t *pI2Cx){
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1<<10);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	601a      	str	r2, [r3, #0]
    pI2Cx->CR1 |= (1<<8);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	601a      	str	r2, [r3, #0]
}
 8000d6c:	bf00      	nop
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <I2C_ClearAddrFlag>:

static void I2C_ClearAddrFlag(I2C_RegDef_t *pI2Cx){
 8000d78:	b480      	push	{r7}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
    uint32_t dummyRead = pI2Cx->SR1;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	695b      	ldr	r3, [r3, #20]
 8000d84:	60fb      	str	r3, [r7, #12]
    dummyRead = pI2Cx->SR2;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	699b      	ldr	r3, [r3, #24]
 8000d8a:	60fb      	str	r3, [r7, #12]
    (void)dummyRead;
}
 8000d8c:	bf00      	nop
 8000d8e:	3714      	adds	r7, #20
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <I2C_GenrateStopCondition>:

static void I2C_GenrateStopCondition(I2C_RegDef_t *pI2Cx){
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
    pI2Cx->CR1 |= (1<<9);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	601a      	str	r2, [r3, #0]
}
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <Config_GPIO_I2C>:

// Enable GPIO for I2C
static void Config_GPIO_I2C(){
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b086      	sub	sp, #24
 8000dbc:	af00      	add	r7, sp, #0
	GPIOB_PCLK_EN;
 8000dbe:	4b17      	ldr	r3, [pc, #92]	@ (8000e1c <Config_GPIO_I2C+0x64>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc2:	4a16      	ldr	r2, [pc, #88]	@ (8000e1c <Config_GPIO_I2C+0x64>)
 8000dc4:	f043 0302 	orr.w	r3, r3, #2
 8000dc8:	6313      	str	r3, [r2, #48]	@ 0x30
	// Enable port PB8
	GPIO_Handle_t PB8;	// SCL
	PB8.pGPIOx = GPIOB;
 8000dca:	4b15      	ldr	r3, [pc, #84]	@ (8000e20 <Config_GPIO_I2C+0x68>)
 8000dcc:	60fb      	str	r3, [r7, #12]
	PB8.GPIO_Pin_Config.GPIO_PinNumber = GPIO_PIN_NUM_8;
 8000dce:	2308      	movs	r3, #8
 8000dd0:	743b      	strb	r3, [r7, #16]
	PB8.GPIO_Pin_Config.GPIO_PinMode = GPIO_MODER_ALTFM;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	747b      	strb	r3, [r7, #17]
	PB8.GPIO_Pin_Config.GPIO_PinOPType = GPIO_OTYPER_OD;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	753b      	strb	r3, [r7, #20]
	PB8.GPIO_Pin_Config.GPIO_PinSpeed = GPIO_OSPEEDR_VERYHIGH;
 8000dda:	2303      	movs	r3, #3
 8000ddc:	74bb      	strb	r3, [r7, #18]
	PB8.GPIO_Pin_Config.GPIO_PinPuPdControl = GPIO_PUPDR_PU;
 8000dde:	2301      	movs	r3, #1
 8000de0:	74fb      	strb	r3, [r7, #19]
	PB8.GPIO_Pin_Config.GPIO_PinAltFunMode_High = GPIO_AFRH_AF4;
 8000de2:	2304      	movs	r3, #4
 8000de4:	757b      	strb	r3, [r7, #21]
	GPIO_Init(&PB8);
 8000de6:	f107 030c 	add.w	r3, r7, #12
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff fe99 	bl	8000b22 <GPIO_Init>

	// Enable port PB9
	GPIO_Handle_t PB9;	// SDA
	PB9.pGPIOx = GPIOB;
 8000df0:	4b0b      	ldr	r3, [pc, #44]	@ (8000e20 <Config_GPIO_I2C+0x68>)
 8000df2:	603b      	str	r3, [r7, #0]
	PB9.GPIO_Pin_Config.GPIO_PinNumber = GPIO_PIN_NUM_9;
 8000df4:	2309      	movs	r3, #9
 8000df6:	713b      	strb	r3, [r7, #4]
	PB9.GPIO_Pin_Config.GPIO_PinMode = GPIO_MODER_ALTFM;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	717b      	strb	r3, [r7, #5]
	PB9.GPIO_Pin_Config.GPIO_PinOPType = GPIO_OTYPER_OD;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	723b      	strb	r3, [r7, #8]
	PB9.GPIO_Pin_Config.GPIO_PinSpeed = GPIO_OSPEEDR_VERYHIGH;
 8000e00:	2303      	movs	r3, #3
 8000e02:	71bb      	strb	r3, [r7, #6]
	PB9.GPIO_Pin_Config.GPIO_PinPuPdControl = GPIO_PUPDR_PU;
 8000e04:	2301      	movs	r3, #1
 8000e06:	71fb      	strb	r3, [r7, #7]
	PB9.GPIO_Pin_Config.GPIO_PinAltFunMode_High = GPIO_AFRH_AF4;
 8000e08:	2304      	movs	r3, #4
 8000e0a:	727b      	strb	r3, [r7, #9]
	GPIO_Init(&PB9);
 8000e0c:	463b      	mov	r3, r7
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff fe87 	bl	8000b22 <GPIO_Init>

}
 8000e14:	bf00      	nop
 8000e16:	3718      	adds	r7, #24
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	40023800 	.word	0x40023800
 8000e20:	40020400 	.word	0x40020400

08000e24 <I2C_PeriClockControl>:


// Peripheral Clock setup
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDis){
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	460b      	mov	r3, r1
 8000e2e:	70fb      	strb	r3, [r7, #3]
    if(EnOrDis){
 8000e30:	78fb      	ldrb	r3, [r7, #3]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d020      	beq.n	8000e78 <I2C_PeriClockControl+0x54>
        if(pI2Cx == I2C1)		I2C1_PLCK_EN;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4a22      	ldr	r2, [pc, #136]	@ (8000ec4 <I2C_PeriClockControl+0xa0>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d106      	bne.n	8000e4c <I2C_PeriClockControl+0x28>
 8000e3e:	4b22      	ldr	r3, [pc, #136]	@ (8000ec8 <I2C_PeriClockControl+0xa4>)
 8000e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e42:	4a21      	ldr	r2, [pc, #132]	@ (8000ec8 <I2C_PeriClockControl+0xa4>)
 8000e44:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e48:	6413      	str	r3, [r2, #64]	@ 0x40
    else{
        if(pI2Cx == I2C1)       I2C1_PLCK_DIS;
        else if(pI2Cx == I2C2)  I2C2_PLCK_DIS;
        else if(pI2Cx == I2C3)  I2C3_PLCK_DIS;
    }
}
 8000e4a:	e035      	b.n	8000eb8 <I2C_PeriClockControl+0x94>
        else if(pI2Cx == I2C2)  I2C2_PLCK_EN;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	4a1d      	ldr	r2, [pc, #116]	@ (8000ec4 <I2C_PeriClockControl+0xa0>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d106      	bne.n	8000e62 <I2C_PeriClockControl+0x3e>
 8000e54:	4b1c      	ldr	r3, [pc, #112]	@ (8000ec8 <I2C_PeriClockControl+0xa4>)
 8000e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e58:	4a1b      	ldr	r2, [pc, #108]	@ (8000ec8 <I2C_PeriClockControl+0xa4>)
 8000e5a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e5e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000e60:	e02a      	b.n	8000eb8 <I2C_PeriClockControl+0x94>
        else if(pI2Cx == I2C3)  I2C3_PLCK_EN;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4a17      	ldr	r2, [pc, #92]	@ (8000ec4 <I2C_PeriClockControl+0xa0>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d126      	bne.n	8000eb8 <I2C_PeriClockControl+0x94>
 8000e6a:	4b17      	ldr	r3, [pc, #92]	@ (8000ec8 <I2C_PeriClockControl+0xa4>)
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e6e:	4a16      	ldr	r2, [pc, #88]	@ (8000ec8 <I2C_PeriClockControl+0xa4>)
 8000e70:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000e74:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000e76:	e01f      	b.n	8000eb8 <I2C_PeriClockControl+0x94>
        if(pI2Cx == I2C1)       I2C1_PLCK_DIS;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4a12      	ldr	r2, [pc, #72]	@ (8000ec4 <I2C_PeriClockControl+0xa0>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d106      	bne.n	8000e8e <I2C_PeriClockControl+0x6a>
 8000e80:	4b11      	ldr	r3, [pc, #68]	@ (8000ec8 <I2C_PeriClockControl+0xa4>)
 8000e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e84:	4a10      	ldr	r2, [pc, #64]	@ (8000ec8 <I2C_PeriClockControl+0xa4>)
 8000e86:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8000e8a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000e8c:	e014      	b.n	8000eb8 <I2C_PeriClockControl+0x94>
        else if(pI2Cx == I2C2)  I2C2_PLCK_DIS;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a0c      	ldr	r2, [pc, #48]	@ (8000ec4 <I2C_PeriClockControl+0xa0>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d106      	bne.n	8000ea4 <I2C_PeriClockControl+0x80>
 8000e96:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec8 <I2C_PeriClockControl+0xa4>)
 8000e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e9a:	4a0b      	ldr	r2, [pc, #44]	@ (8000ec8 <I2C_PeriClockControl+0xa4>)
 8000e9c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8000ea0:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000ea2:	e009      	b.n	8000eb8 <I2C_PeriClockControl+0x94>
        else if(pI2Cx == I2C3)  I2C3_PLCK_DIS;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	4a07      	ldr	r2, [pc, #28]	@ (8000ec4 <I2C_PeriClockControl+0xa0>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d105      	bne.n	8000eb8 <I2C_PeriClockControl+0x94>
 8000eac:	4b06      	ldr	r3, [pc, #24]	@ (8000ec8 <I2C_PeriClockControl+0xa4>)
 8000eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb0:	4a05      	ldr	r2, [pc, #20]	@ (8000ec8 <I2C_PeriClockControl+0xa4>)
 8000eb2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8000eb6:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000eb8:	bf00      	nop
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	40005400 	.word	0x40005400
 8000ec8:	40023800 	.word	0x40023800

08000ecc <I2C_Init>:

// Init and DeInit
void I2C_Init(I2C_Handle_t *pI2CHandle){
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
#ifdef I2C_Debug
	lcd_init();
#endif
	// Enable clock for I2C
	I2C_PeriClockControl(pI2CHandle->pI2Cx, Enable);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	2101      	movs	r1, #1
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff ffa2 	bl	8000e24 <I2C_PeriClockControl>
	// Config GPIO

	Config_GPIO_I2C();
 8000ee0:	f7ff ff6a 	bl	8000db8 <Config_GPIO_I2C>
	// Software reset
	pI2CHandle->pI2Cx->CR1 |= (1<<15);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000ef2:	601a      	str	r2, [r3, #0]
	pI2CHandle->pI2Cx->CR1 &= ~(1<<15);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000f02:	601a      	str	r2, [r3, #0]


	uint32_t temp;
    // Configure the FREQ of CR2
    temp = 0;
 8000f04:	2300      	movs	r3, #0
 8000f06:	60fb      	str	r3, [r7, #12]
    temp |= RCC_GetPCLK1Value() / 1000000U;
 8000f08:	f001 f870 	bl	8001fec <RCC_GetPCLK1Value>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	4a42      	ldr	r2, [pc, #264]	@ (8001018 <I2C_Init+0x14c>)
 8000f10:	fba2 2303 	umull	r2, r3, r2, r3
 8000f14:	0c9b      	lsrs	r3, r3, #18
 8000f16:	68fa      	ldr	r2, [r7, #12]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	60fb      	str	r3, [r7, #12]
    pI2CHandle->pI2Cx->CR2 = (temp & 0x3F);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	68fa      	ldr	r2, [r7, #12]
 8000f22:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000f26:	605a      	str	r2, [r3, #4]

    //CCR calculations
    uint16_t ccr_value = 0;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	817b      	strh	r3, [r7, #10]
    temp = 0;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	60fb      	str	r3, [r7, #12]
    if(pI2CHandle->I2C_Congif.I2C_SCLSpeed <= I2C_SCL_SPEED_SM){	// For normal mode
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	4a39      	ldr	r2, [pc, #228]	@ (800101c <I2C_Init+0x150>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d80f      	bhi.n	8000f5a <I2C_Init+0x8e>
        // Mode is standard mode
        ccr_value = (RCC_GetPCLK1Value() / (2 * pI2CHandle->I2C_Congif.I2C_SCLSpeed));
 8000f3a:	f001 f857 	bl	8001fec <RCC_GetPCLK1Value>
 8000f3e:	4602      	mov	r2, r0
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f4a:	817b      	strh	r3, [r7, #10]
        temp |= (ccr_value & 0xFFF);
 8000f4c:	897b      	ldrh	r3, [r7, #10]
 8000f4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f52:	68fa      	ldr	r2, [r7, #12]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	e02c      	b.n	8000fb4 <I2C_Init+0xe8>
    }
    else{
        // Mode is fast mode 
        temp |= (1 << 15);
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f60:	60fb      	str	r3, [r7, #12]
        temp |= (pI2CHandle->I2C_Congif.I2C_FMDutyCyCle << 14);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	895b      	ldrh	r3, [r3, #10]
 8000f66:	039b      	lsls	r3, r3, #14
 8000f68:	68fa      	ldr	r2, [r7, #12]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	60fb      	str	r3, [r7, #12]
        if(pI2CHandle->I2C_Congif.I2C_FMDutyCyCle == I2C_FMDUTY_2){
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	895b      	ldrh	r3, [r3, #10]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d10b      	bne.n	8000f8e <I2C_Init+0xc2>
            ccr_value = (RCC_GetPCLK1Value() / (3 * pI2CHandle->I2C_Congif.I2C_SCLSpeed));
 8000f76:	f001 f839 	bl	8001fec <RCC_GetPCLK1Value>
 8000f7a:	4601      	mov	r1, r0
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	685a      	ldr	r2, [r3, #4]
 8000f80:	4613      	mov	r3, r2
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	4413      	add	r3, r2
 8000f86:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f8a:	817b      	strh	r3, [r7, #10]
 8000f8c:	e00c      	b.n	8000fa8 <I2C_Init+0xdc>
        }
        else{
            ccr_value = (RCC_GetPCLK1Value() / (25 * pI2CHandle->I2C_Congif.I2C_SCLSpeed));
 8000f8e:	f001 f82d 	bl	8001fec <RCC_GetPCLK1Value>
 8000f92:	4601      	mov	r1, r0
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	685a      	ldr	r2, [r3, #4]
 8000f98:	4613      	mov	r3, r2
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	4413      	add	r3, r2
 8000f9e:	009a      	lsls	r2, r3, #2
 8000fa0:	4413      	add	r3, r2
 8000fa2:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fa6:	817b      	strh	r3, [r7, #10]
        }
        temp |= (ccr_value & 0xFFF);
 8000fa8:	897b      	ldrh	r3, [r7, #10]
 8000faa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fae:	68fa      	ldr	r2, [r7, #12]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	60fb      	str	r3, [r7, #12]
    }

    pI2CHandle->pI2Cx->CCR |= temp;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	69d9      	ldr	r1, [r3, #28]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	68fa      	ldr	r2, [r7, #12]
 8000fc0:	430a      	orrs	r2, r1
 8000fc2:	61da      	str	r2, [r3, #28]

    //TRISE calculations
    uint16_t trise_value = 0;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	813b      	strh	r3, [r7, #8]
    temp = 0;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60fb      	str	r3, [r7, #12]
    if(pI2CHandle->I2C_Congif.I2C_SCLSpeed <= I2C_SCL_SPEED_SM){	// Mode is standard mode
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	4a12      	ldr	r2, [pc, #72]	@ (800101c <I2C_Init+0x150>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d809      	bhi.n	8000fea <I2C_Init+0x11e>
    	trise_value = (RCC_GetPCLK1Value() / pI2CHandle->I2C_Congif.I2C_SCLSpeed) + 1;
 8000fd6:	f001 f809 	bl	8001fec <RCC_GetPCLK1Value>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fe4:	b29b      	uxth	r3, r3
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	813b      	strh	r3, [r7, #8]
//            ccr_value = (RCC_GetPCLK1Value() / (25 * pI2CHandle->I2C_Congif_t.I2C_SCLSpeed));
//        }
//        temp |= (ccr_value & 0xFFF);
    }

    temp |= (trise_value & 0x7F);
 8000fea:	893b      	ldrh	r3, [r7, #8]
 8000fec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000ff0:	68fa      	ldr	r2, [r7, #12]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	60fb      	str	r3, [r7, #12]
    pI2CHandle->pI2Cx->TRISE = temp;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	68fa      	ldr	r2, [r7, #12]
 8000ffc:	621a      	str	r2, [r3, #32]

    // Enable I2C
    pI2CHandle->pI2Cx->CR1 |= (1<<0);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f042 0201 	orr.w	r2, r2, #1
 800100c:	601a      	str	r2, [r3, #0]
}
 800100e:	bf00      	nop
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	431bde83 	.word	0x431bde83
 800101c:	000186a0 	.word	0x000186a0

08001020 <I2C_GetFlagStatus>:

uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx,uint32_t FlagName){
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	6039      	str	r1, [r7, #0]
    if(pI2Cx->SR1 & FlagName){
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	695a      	ldr	r2, [r3, #20]
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	4013      	ands	r3, r2
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <I2C_GetFlagStatus+0x1a>
        return Flag_Set;
 8001036:	2301      	movs	r3, #1
 8001038:	e000      	b.n	800103c <I2C_GetFlagStatus+0x1c>
    }
    return Flag_Reset;
 800103a:	2300      	movs	r3, #0
}
 800103c:	4618      	mov	r0, r3
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <I2C_Start>:

void I2C_Start(I2C_RegDef_t *pI2Cx){
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
    // 1. Genarate the Start condition
    I2C_GenrateStartCondition(pI2Cx);
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f7ff fe7b 	bl	8000d4c <I2C_GenrateStartCondition>
    // 2. Confirm that start generation is completed by checking the SB flag in the SR1
    // Note: Until SB is cleared SCL will be stretched (pulled to LOW)
    while(!(I2C_GetFlagStatus(pI2Cx,I2C_FLAG_SB)));
 8001056:	bf00      	nop
 8001058:	2101      	movs	r1, #1
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f7ff ffe0 	bl	8001020 <I2C_GetFlagStatus>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d0f8      	beq.n	8001058 <I2C_Start+0x10>
}
 8001066:	bf00      	nop
 8001068:	bf00      	nop
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <I2C_Address>:

I2C_Error_t I2C_Address(I2C_Handle_t *I2C_Handle){
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
	// 3. Send the addr of the slave with r/w bit set to w(0) (total 8 bit)
	I2C_Handle->pI2Cx->DR = I2C_Handle->I2C_Congif.I2C_DeviceAddr << 1;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	7a1b      	ldrb	r3, [r3, #8]
 800107c:	461a      	mov	r2, r3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	0052      	lsls	r2, r2, #1
 8001084:	611a      	str	r2, [r3, #16]
	// 4. Confirm that addr phase is completed by checking the Addr flas in SR1
	uint32_t TimeOut = I2C_Handle->I2C_Congif.TimeOut;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	68db      	ldr	r3, [r3, #12]
 800108a:	617b      	str	r3, [r7, #20]
	while(!(I2C_GetFlagStatus(I2C_Handle->pI2Cx,I2C_FLAG_ADDR))){
 800108c:	e036      	b.n	80010fc <I2C_Address+0x8c>
		delay_ms(1);
 800108e:	2300      	movs	r3, #0
 8001090:	613b      	str	r3, [r7, #16]
 8001092:	e024      	b.n	80010de <I2C_Address+0x6e>
 8001094:	4b22      	ldr	r3, [pc, #136]	@ (8001120 <I2C_Address+0xb0>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	4a21      	ldr	r2, [pc, #132]	@ (8001120 <I2C_Address+0xb0>)
 800109a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800109e:	60d3      	str	r3, [r2, #12]
 80010a0:	4b20      	ldr	r3, [pc, #128]	@ (8001124 <I2C_Address+0xb4>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a1f      	ldr	r2, [pc, #124]	@ (8001124 <I2C_Address+0xb4>)
 80010a6:	f043 0301 	orr.w	r3, r3, #1
 80010aa:	6013      	str	r3, [r2, #0]
 80010ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001124 <I2C_Address+0xb4>)
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	60fb      	str	r3, [r7, #12]
 80010b2:	f000 ffed 	bl	8002090 <RCC_GetSystemClock>
 80010b6:	4603      	mov	r3, r0
 80010b8:	4a1b      	ldr	r2, [pc, #108]	@ (8001128 <I2C_Address+0xb8>)
 80010ba:	fba2 2303 	umull	r2, r3, r2, r3
 80010be:	0c9b      	lsrs	r3, r3, #18
 80010c0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80010c4:	fb02 f303 	mul.w	r3, r2, r3
 80010c8:	60bb      	str	r3, [r7, #8]
 80010ca:	4b16      	ldr	r3, [pc, #88]	@ (8001124 <I2C_Address+0xb4>)
 80010cc:	685a      	ldr	r2, [r3, #4]
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	68ba      	ldr	r2, [r7, #8]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d8f8      	bhi.n	80010ca <I2C_Address+0x5a>
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	3301      	adds	r3, #1
 80010dc:	613b      	str	r3, [r7, #16]
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d0d7      	beq.n	8001094 <I2C_Address+0x24>
		TimeOut --;
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	3b01      	subs	r3, #1
 80010e8:	617b      	str	r3, [r7, #20]
		if (TimeOut == 0){
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d105      	bne.n	80010fc <I2C_Address+0x8c>
			i2c_error.errorFlags = I2C_ERR_ADDR;
 80010f0:	4b0e      	ldr	r3, [pc, #56]	@ (800112c <I2C_Address+0xbc>)
 80010f2:	2201      	movs	r2, #1
 80010f4:	701a      	strb	r2, [r3, #0]
			return i2c_error;
 80010f6:	4b0d      	ldr	r3, [pc, #52]	@ (800112c <I2C_Address+0xbc>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	e00d      	b.n	8001118 <I2C_Address+0xa8>
	while(!(I2C_GetFlagStatus(I2C_Handle->pI2Cx,I2C_FLAG_ADDR))){
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2102      	movs	r1, #2
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff ff8c 	bl	8001020 <I2C_GetFlagStatus>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d0bf      	beq.n	800108e <I2C_Address+0x1e>
		}
	}
	// 5. Clear the Addr flag according to its software sequence
	// Note: Until Addr is cleared SCL will be strectched (pulled to LOW)
	I2C_ClearAddrFlag(I2C_Handle->pI2Cx);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff fe30 	bl	8000d78 <I2C_ClearAddrFlag>
}
 8001118:	4618      	mov	r0, r3
 800111a:	3718      	adds	r7, #24
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	e000edf0 	.word	0xe000edf0
 8001124:	e0001000 	.word	0xe0001000
 8001128:	431bde83 	.word	0x431bde83
 800112c:	2000012c 	.word	0x2000012c

08001130 <I2C_MasterSend_Multi_Data>:
    pI2Cx->DR = data;
    while(!(I2C_GetFlagStatus(pI2Cx,I2C_FLAG_BTF)));

}

I2C_Error_t I2C_MasterSend_Multi_Data(I2C_Handle_t *I2C_Handle, uint8_t *pTxbuffer, uint32_t len){
 8001130:	b580      	push	{r7, lr}
 8001132:	b090      	sub	sp, #64	@ 0x40
 8001134:	af00      	add	r7, sp, #0
 8001136:	60f8      	str	r0, [r7, #12]
 8001138:	60b9      	str	r1, [r7, #8]
 800113a:	607a      	str	r2, [r7, #4]
	uint32_t TimeOut_TxE = I2C_Handle->I2C_Congif.TimeOut;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	63fb      	str	r3, [r7, #60]	@ 0x3c
	uint32_t TimeOut_BTF = I2C_Handle->I2C_Congif.TimeOut;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	68db      	ldr	r3, [r3, #12]
 8001146:	63bb      	str	r3, [r7, #56]	@ 0x38

	I2C_Start(I2C_Handle->pI2Cx);
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff ff7b 	bl	8001048 <I2C_Start>
	i2c_error = I2C_Address(I2C_Handle);
 8001152:	68f8      	ldr	r0, [r7, #12]
 8001154:	f7ff ff8c 	bl	8001070 <I2C_Address>
 8001158:	4603      	mov	r3, r0
 800115a:	4a65      	ldr	r2, [pc, #404]	@ (80012f0 <I2C_MasterSend_Multi_Data+0x1c0>)
 800115c:	7013      	strb	r3, [r2, #0]
	if(i2c_error.errorFlags == I2C_ERR_ADDR){
 800115e:	4b64      	ldr	r3, [pc, #400]	@ (80012f0 <I2C_MasterSend_Multi_Data+0x1c0>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d175      	bne.n	8001252 <I2C_MasterSend_Multi_Data+0x122>
#ifdef I2C_Debug
		lcd_put_cur(2, 1);
		send_string_lcd("TimeOutADDR");
#endif
		return i2c_error;
 8001166:	4b62      	ldr	r3, [pc, #392]	@ (80012f0 <I2C_MasterSend_Multi_Data+0x1c0>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	e0bd      	b.n	80012e8 <I2C_MasterSend_Multi_Data+0x1b8>

	// 6. Send the data until Len becomes 0
    while(len > 0){
        while(!(I2C_GetFlagStatus(I2C_Handle->pI2Cx, I2C_FLAG_TxE))) // Wait till TxE is set
        {
        	delay_ms(1);
 800116c:	2300      	movs	r3, #0
 800116e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001170:	e024      	b.n	80011bc <I2C_MasterSend_Multi_Data+0x8c>
 8001172:	4b60      	ldr	r3, [pc, #384]	@ (80012f4 <I2C_MasterSend_Multi_Data+0x1c4>)
 8001174:	68db      	ldr	r3, [r3, #12]
 8001176:	4a5f      	ldr	r2, [pc, #380]	@ (80012f4 <I2C_MasterSend_Multi_Data+0x1c4>)
 8001178:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800117c:	60d3      	str	r3, [r2, #12]
 800117e:	4b5e      	ldr	r3, [pc, #376]	@ (80012f8 <I2C_MasterSend_Multi_Data+0x1c8>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a5d      	ldr	r2, [pc, #372]	@ (80012f8 <I2C_MasterSend_Multi_Data+0x1c8>)
 8001184:	f043 0301 	orr.w	r3, r3, #1
 8001188:	6013      	str	r3, [r2, #0]
 800118a:	4b5b      	ldr	r3, [pc, #364]	@ (80012f8 <I2C_MasterSend_Multi_Data+0x1c8>)
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	61bb      	str	r3, [r7, #24]
 8001190:	f000 ff7e 	bl	8002090 <RCC_GetSystemClock>
 8001194:	4603      	mov	r3, r0
 8001196:	4a59      	ldr	r2, [pc, #356]	@ (80012fc <I2C_MasterSend_Multi_Data+0x1cc>)
 8001198:	fba2 2303 	umull	r2, r3, r2, r3
 800119c:	0c9b      	lsrs	r3, r3, #18
 800119e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80011a2:	fb02 f303 	mul.w	r3, r2, r3
 80011a6:	617b      	str	r3, [r7, #20]
 80011a8:	4b53      	ldr	r3, [pc, #332]	@ (80012f8 <I2C_MasterSend_Multi_Data+0x1c8>)
 80011aa:	685a      	ldr	r2, [r3, #4]
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	697a      	ldr	r2, [r7, #20]
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d8f8      	bhi.n	80011a8 <I2C_MasterSend_Multi_Data+0x78>
 80011b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011b8:	3301      	adds	r3, #1
 80011ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80011bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d0d7      	beq.n	8001172 <I2C_MasterSend_Multi_Data+0x42>
        	TimeOut_TxE -= 1;
 80011c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80011c4:	3b01      	subs	r3, #1
 80011c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
			if (TimeOut_TxE == 0){
 80011c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d102      	bne.n	80011d4 <I2C_MasterSend_Multi_Data+0xa4>
#ifdef I2C_Debug
				lcd_put_cur(2, 1);
				send_string_lcd("TimeOutTxE");
				i2c_error.errorFlags = I2C_ERR_TXE;
#endif
				return i2c_error;
 80011ce:	4b48      	ldr	r3, [pc, #288]	@ (80012f0 <I2C_MasterSend_Multi_Data+0x1c0>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	e089      	b.n	80012e8 <I2C_MasterSend_Multi_Data+0x1b8>
        while(!(I2C_GetFlagStatus(I2C_Handle->pI2Cx, I2C_FLAG_TxE))) // Wait till TxE is set
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2180      	movs	r1, #128	@ 0x80
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff ff20 	bl	8001020 <I2C_GetFlagStatus>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d0c2      	beq.n	800116c <I2C_MasterSend_Multi_Data+0x3c>
			}
        }
        I2C_Handle->pI2Cx->DR = (uint8_t)*pTxbuffer;
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	781a      	ldrb	r2, [r3, #0]
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	611a      	str	r2, [r3, #16]
        delay_ms(1);
 80011f0:	2300      	movs	r3, #0
 80011f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80011f4:	e024      	b.n	8001240 <I2C_MasterSend_Multi_Data+0x110>
 80011f6:	4b3f      	ldr	r3, [pc, #252]	@ (80012f4 <I2C_MasterSend_Multi_Data+0x1c4>)
 80011f8:	68db      	ldr	r3, [r3, #12]
 80011fa:	4a3e      	ldr	r2, [pc, #248]	@ (80012f4 <I2C_MasterSend_Multi_Data+0x1c4>)
 80011fc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001200:	60d3      	str	r3, [r2, #12]
 8001202:	4b3d      	ldr	r3, [pc, #244]	@ (80012f8 <I2C_MasterSend_Multi_Data+0x1c8>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a3c      	ldr	r2, [pc, #240]	@ (80012f8 <I2C_MasterSend_Multi_Data+0x1c8>)
 8001208:	f043 0301 	orr.w	r3, r3, #1
 800120c:	6013      	str	r3, [r2, #0]
 800120e:	4b3a      	ldr	r3, [pc, #232]	@ (80012f8 <I2C_MasterSend_Multi_Data+0x1c8>)
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	623b      	str	r3, [r7, #32]
 8001214:	f000 ff3c 	bl	8002090 <RCC_GetSystemClock>
 8001218:	4603      	mov	r3, r0
 800121a:	4a38      	ldr	r2, [pc, #224]	@ (80012fc <I2C_MasterSend_Multi_Data+0x1cc>)
 800121c:	fba2 2303 	umull	r2, r3, r2, r3
 8001220:	0c9b      	lsrs	r3, r3, #18
 8001222:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001226:	fb02 f303 	mul.w	r3, r2, r3
 800122a:	61fb      	str	r3, [r7, #28]
 800122c:	4b32      	ldr	r3, [pc, #200]	@ (80012f8 <I2C_MasterSend_Multi_Data+0x1c8>)
 800122e:	685a      	ldr	r2, [r3, #4]
 8001230:	6a3b      	ldr	r3, [r7, #32]
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	69fa      	ldr	r2, [r7, #28]
 8001236:	429a      	cmp	r2, r3
 8001238:	d8f8      	bhi.n	800122c <I2C_MasterSend_Multi_Data+0xfc>
 800123a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800123c:	3301      	adds	r3, #1
 800123e:	633b      	str	r3, [r7, #48]	@ 0x30
 8001240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001242:	2b00      	cmp	r3, #0
 8001244:	d0d7      	beq.n	80011f6 <I2C_MasterSend_Multi_Data+0xc6>
        pTxbuffer++;
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	3301      	adds	r3, #1
 800124a:	60bb      	str	r3, [r7, #8]
        len--;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	3b01      	subs	r3, #1
 8001250:	607b      	str	r3, [r7, #4]
    while(len > 0){
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d1bd      	bne.n	80011d4 <I2C_MasterSend_Multi_Data+0xa4>

    // 7. When Len becomes zero wait for TxE=1 and BTF=1 before generating the STOP condition
    // Note: TxE=1, BTF=1, means that both SR and DR are empty and next tranmission should begin 
    // when BTF=1 SCL will be stretched  (pulled to LOW)

    while(!(I2C_GetFlagStatus(I2C_Handle->pI2Cx,I2C_FLAG_BTF))){
 8001258:	e033      	b.n	80012c2 <I2C_MasterSend_Multi_Data+0x192>
    	delay_ms(1);
 800125a:	2300      	movs	r3, #0
 800125c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800125e:	e024      	b.n	80012aa <I2C_MasterSend_Multi_Data+0x17a>
 8001260:	4b24      	ldr	r3, [pc, #144]	@ (80012f4 <I2C_MasterSend_Multi_Data+0x1c4>)
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	4a23      	ldr	r2, [pc, #140]	@ (80012f4 <I2C_MasterSend_Multi_Data+0x1c4>)
 8001266:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800126a:	60d3      	str	r3, [r2, #12]
 800126c:	4b22      	ldr	r3, [pc, #136]	@ (80012f8 <I2C_MasterSend_Multi_Data+0x1c8>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a21      	ldr	r2, [pc, #132]	@ (80012f8 <I2C_MasterSend_Multi_Data+0x1c8>)
 8001272:	f043 0301 	orr.w	r3, r3, #1
 8001276:	6013      	str	r3, [r2, #0]
 8001278:	4b1f      	ldr	r3, [pc, #124]	@ (80012f8 <I2C_MasterSend_Multi_Data+0x1c8>)
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800127e:	f000 ff07 	bl	8002090 <RCC_GetSystemClock>
 8001282:	4603      	mov	r3, r0
 8001284:	4a1d      	ldr	r2, [pc, #116]	@ (80012fc <I2C_MasterSend_Multi_Data+0x1cc>)
 8001286:	fba2 2303 	umull	r2, r3, r2, r3
 800128a:	0c9b      	lsrs	r3, r3, #18
 800128c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001290:	fb02 f303 	mul.w	r3, r2, r3
 8001294:	627b      	str	r3, [r7, #36]	@ 0x24
 8001296:	4b18      	ldr	r3, [pc, #96]	@ (80012f8 <I2C_MasterSend_Multi_Data+0x1c8>)
 8001298:	685a      	ldr	r2, [r3, #4]
 800129a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d8f8      	bhi.n	8001296 <I2C_MasterSend_Multi_Data+0x166>
 80012a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012a6:	3301      	adds	r3, #1
 80012a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80012aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d0d7      	beq.n	8001260 <I2C_MasterSend_Multi_Data+0x130>
    	TimeOut_BTF -= 1;
 80012b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80012b2:	3b01      	subs	r3, #1
 80012b4:	63bb      	str	r3, [r7, #56]	@ 0x38
		if (TimeOut_BTF == 0){
 80012b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d102      	bne.n	80012c2 <I2C_MasterSend_Multi_Data+0x192>
#ifdef I2C_Debug
			lcd_put_cur(2, 1);
			send_string_lcd("TimeOutBTF");
			i2c_error.errorFlags = I2C_ERR_BTF;
#endif
			return i2c_error;
 80012bc:	4b0c      	ldr	r3, [pc, #48]	@ (80012f0 <I2C_MasterSend_Multi_Data+0x1c0>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	e012      	b.n	80012e8 <I2C_MasterSend_Multi_Data+0x1b8>
    while(!(I2C_GetFlagStatus(I2C_Handle->pI2Cx,I2C_FLAG_BTF))){
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2104      	movs	r1, #4
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff fea9 	bl	8001020 <I2C_GetFlagStatus>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d0c2      	beq.n	800125a <I2C_MasterSend_Multi_Data+0x12a>
		}
    }
    I2C_Stop(I2C_Handle->pI2Cx);
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4618      	mov	r0, r3
 80012da:	f000 f811 	bl	8001300 <I2C_Stop>
    i2c_error.errorFlags = I2C_ERR_NONE;
 80012de:	4b04      	ldr	r3, [pc, #16]	@ (80012f0 <I2C_MasterSend_Multi_Data+0x1c0>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	701a      	strb	r2, [r3, #0]
    return i2c_error;
 80012e4:	4b02      	ldr	r3, [pc, #8]	@ (80012f0 <I2C_MasterSend_Multi_Data+0x1c0>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3740      	adds	r7, #64	@ 0x40
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	2000012c 	.word	0x2000012c
 80012f4:	e000edf0 	.word	0xe000edf0
 80012f8:	e0001000 	.word	0xe0001000
 80012fc:	431bde83 	.word	0x431bde83

08001300 <I2C_Stop>:
		while(!(I2C_GetFlagStatus(pI2Cx, I2C_FLAG_RxNE)));
		buffer[size-remaining] = pI2Cx->DR;  // copy the data into the buffer
	}
}

void I2C_Stop(I2C_RegDef_t *pI2Cx){
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
	// 8. Genarate the Stop condition and Master need not to wait for the completion of stop condition
	// Note: generating STOP, automatically clears the BTF
	I2C_GenrateStopCondition(pI2Cx);
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f7ff fd45 	bl	8000d98 <I2C_GenrateStopCondition>

	// Wait until bus is no longer busy
	while(pI2Cx->SR2 & (1 << 1));  // Wait until BUSY = 0
 800130e:	bf00      	nop
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	699b      	ldr	r3, [r3, #24]
 8001314:	f003 0302 	and.w	r3, r3, #2
 8001318:	2b00      	cmp	r3, #0
 800131a:	d1f9      	bne.n	8001310 <I2C_Stop+0x10>
}
 800131c:	bf00      	nop
 800131e:	bf00      	nop
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
	...

08001328 <i2c_Config>:
#include "i2c_lcd2.h"

I2C_Handle_t hi2c1;
#define SLAVE_ADDRESS_LCD 0x27u

void i2c_Config(){
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
	hi2c1.pI2Cx = I2C1;
 800132c:	4b0b      	ldr	r3, [pc, #44]	@ (800135c <i2c_Config+0x34>)
 800132e:	4a0c      	ldr	r2, [pc, #48]	@ (8001360 <i2c_Config+0x38>)
 8001330:	601a      	str	r2, [r3, #0]
	hi2c1.I2C_Congif.I2C_AckControl = I2C_ACK_EN;
 8001332:	4b0a      	ldr	r3, [pc, #40]	@ (800135c <i2c_Config+0x34>)
 8001334:	2201      	movs	r2, #1
 8001336:	725a      	strb	r2, [r3, #9]
	hi2c1.I2C_Congif.I2C_DeviceAddr = SLAVE_ADDRESS_LCD;
 8001338:	4b08      	ldr	r3, [pc, #32]	@ (800135c <i2c_Config+0x34>)
 800133a:	2227      	movs	r2, #39	@ 0x27
 800133c:	721a      	strb	r2, [r3, #8]
	hi2c1.I2C_Congif.I2C_FMDutyCyCle = I2C_FMDUTY_2;
 800133e:	4b07      	ldr	r3, [pc, #28]	@ (800135c <i2c_Config+0x34>)
 8001340:	2200      	movs	r2, #0
 8001342:	815a      	strh	r2, [r3, #10]
	hi2c1.I2C_Congif.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 8001344:	4b05      	ldr	r3, [pc, #20]	@ (800135c <i2c_Config+0x34>)
 8001346:	4a07      	ldr	r2, [pc, #28]	@ (8001364 <i2c_Config+0x3c>)
 8001348:	605a      	str	r2, [r3, #4]
	hi2c1.I2C_Congif.TimeOut = 1000;
 800134a:	4b04      	ldr	r3, [pc, #16]	@ (800135c <i2c_Config+0x34>)
 800134c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001350:	60da      	str	r2, [r3, #12]
	I2C_Init(&hi2c1);
 8001352:	4802      	ldr	r0, [pc, #8]	@ (800135c <i2c_Config+0x34>)
 8001354:	f7ff fdba 	bl	8000ecc <I2C_Init>
}
 8001358:	bf00      	nop
 800135a:	bd80      	pop	{r7, pc}
 800135c:	20000130 	.word	0x20000130
 8001360:	40005400 	.word	0x40005400
 8001364:	000186a0 	.word	0x000186a0

08001368 <i2c_lcd_init>:

void i2c_lcd_init(){
 8001368:	b580      	push	{r7, lr}
 800136a:	b09c      	sub	sp, #112	@ 0x70
 800136c:	af00      	add	r7, sp, #0
	i2c_Config();
 800136e:	f7ff ffdb 	bl	8001328 <i2c_Config>
	delay_ms(10);
 8001372:	2300      	movs	r3, #0
 8001374:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001376:	e024      	b.n	80013c2 <i2c_lcd_init+0x5a>
 8001378:	4ba0      	ldr	r3, [pc, #640]	@ (80015fc <i2c_lcd_init+0x294>)
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	4a9f      	ldr	r2, [pc, #636]	@ (80015fc <i2c_lcd_init+0x294>)
 800137e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001382:	60d3      	str	r3, [r2, #12]
 8001384:	4b9e      	ldr	r3, [pc, #632]	@ (8001600 <i2c_lcd_init+0x298>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a9d      	ldr	r2, [pc, #628]	@ (8001600 <i2c_lcd_init+0x298>)
 800138a:	f043 0301 	orr.w	r3, r3, #1
 800138e:	6013      	str	r3, [r2, #0]
 8001390:	4b9b      	ldr	r3, [pc, #620]	@ (8001600 <i2c_lcd_init+0x298>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	60bb      	str	r3, [r7, #8]
 8001396:	f000 fe7b 	bl	8002090 <RCC_GetSystemClock>
 800139a:	4603      	mov	r3, r0
 800139c:	4a99      	ldr	r2, [pc, #612]	@ (8001604 <i2c_lcd_init+0x29c>)
 800139e:	fba2 2303 	umull	r2, r3, r2, r3
 80013a2:	0c9b      	lsrs	r3, r3, #18
 80013a4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80013a8:	fb02 f303 	mul.w	r3, r2, r3
 80013ac:	607b      	str	r3, [r7, #4]
 80013ae:	4b94      	ldr	r3, [pc, #592]	@ (8001600 <i2c_lcd_init+0x298>)
 80013b0:	685a      	ldr	r2, [r3, #4]
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d8f8      	bhi.n	80013ae <i2c_lcd_init+0x46>
 80013bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80013be:	3301      	adds	r3, #1
 80013c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80013c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80013c4:	2b09      	cmp	r3, #9
 80013c6:	d9d7      	bls.n	8001378 <i2c_lcd_init+0x10>
	i2c_send_cmd_lcd (0x33); /* set 4-bits interface */
 80013c8:	2033      	movs	r0, #51	@ 0x33
 80013ca:	f000 f98f 	bl	80016ec <i2c_send_cmd_lcd>
	i2c_send_cmd_lcd (0x32);delay_ms(1);
 80013ce:	2032      	movs	r0, #50	@ 0x32
 80013d0:	f000 f98c 	bl	80016ec <i2c_send_cmd_lcd>
 80013d4:	2300      	movs	r3, #0
 80013d6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80013d8:	e024      	b.n	8001424 <i2c_lcd_init+0xbc>
 80013da:	4b88      	ldr	r3, [pc, #544]	@ (80015fc <i2c_lcd_init+0x294>)
 80013dc:	68db      	ldr	r3, [r3, #12]
 80013de:	4a87      	ldr	r2, [pc, #540]	@ (80015fc <i2c_lcd_init+0x294>)
 80013e0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80013e4:	60d3      	str	r3, [r2, #12]
 80013e6:	4b86      	ldr	r3, [pc, #536]	@ (8001600 <i2c_lcd_init+0x298>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a85      	ldr	r2, [pc, #532]	@ (8001600 <i2c_lcd_init+0x298>)
 80013ec:	f043 0301 	orr.w	r3, r3, #1
 80013f0:	6013      	str	r3, [r2, #0]
 80013f2:	4b83      	ldr	r3, [pc, #524]	@ (8001600 <i2c_lcd_init+0x298>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	613b      	str	r3, [r7, #16]
 80013f8:	f000 fe4a 	bl	8002090 <RCC_GetSystemClock>
 80013fc:	4603      	mov	r3, r0
 80013fe:	4a81      	ldr	r2, [pc, #516]	@ (8001604 <i2c_lcd_init+0x29c>)
 8001400:	fba2 2303 	umull	r2, r3, r2, r3
 8001404:	0c9b      	lsrs	r3, r3, #18
 8001406:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800140a:	fb02 f303 	mul.w	r3, r2, r3
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	4b7b      	ldr	r3, [pc, #492]	@ (8001600 <i2c_lcd_init+0x298>)
 8001412:	685a      	ldr	r2, [r3, #4]
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	68fa      	ldr	r2, [r7, #12]
 800141a:	429a      	cmp	r2, r3
 800141c:	d8f8      	bhi.n	8001410 <i2c_lcd_init+0xa8>
 800141e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001420:	3301      	adds	r3, #1
 8001422:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001424:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001426:	2b00      	cmp	r3, #0
 8001428:	d0d7      	beq.n	80013da <i2c_lcd_init+0x72>
//    delay_ms(1); i2c_send_cmd_lcd (0x20);  // 4bit mode
	delay_ms(1); i2c_send_cmd_lcd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800142a:	2300      	movs	r3, #0
 800142c:	667b      	str	r3, [r7, #100]	@ 0x64
 800142e:	e024      	b.n	800147a <i2c_lcd_init+0x112>
 8001430:	4b72      	ldr	r3, [pc, #456]	@ (80015fc <i2c_lcd_init+0x294>)
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	4a71      	ldr	r2, [pc, #452]	@ (80015fc <i2c_lcd_init+0x294>)
 8001436:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800143a:	60d3      	str	r3, [r2, #12]
 800143c:	4b70      	ldr	r3, [pc, #448]	@ (8001600 <i2c_lcd_init+0x298>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a6f      	ldr	r2, [pc, #444]	@ (8001600 <i2c_lcd_init+0x298>)
 8001442:	f043 0301 	orr.w	r3, r3, #1
 8001446:	6013      	str	r3, [r2, #0]
 8001448:	4b6d      	ldr	r3, [pc, #436]	@ (8001600 <i2c_lcd_init+0x298>)
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	61bb      	str	r3, [r7, #24]
 800144e:	f000 fe1f 	bl	8002090 <RCC_GetSystemClock>
 8001452:	4603      	mov	r3, r0
 8001454:	4a6b      	ldr	r2, [pc, #428]	@ (8001604 <i2c_lcd_init+0x29c>)
 8001456:	fba2 2303 	umull	r2, r3, r2, r3
 800145a:	0c9b      	lsrs	r3, r3, #18
 800145c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001460:	fb02 f303 	mul.w	r3, r2, r3
 8001464:	617b      	str	r3, [r7, #20]
 8001466:	4b66      	ldr	r3, [pc, #408]	@ (8001600 <i2c_lcd_init+0x298>)
 8001468:	685a      	ldr	r2, [r3, #4]
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	697a      	ldr	r2, [r7, #20]
 8001470:	429a      	cmp	r2, r3
 8001472:	d8f8      	bhi.n	8001466 <i2c_lcd_init+0xfe>
 8001474:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001476:	3301      	adds	r3, #1
 8001478:	667b      	str	r3, [r7, #100]	@ 0x64
 800147a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800147c:	2b00      	cmp	r3, #0
 800147e:	d0d7      	beq.n	8001430 <i2c_lcd_init+0xc8>
 8001480:	2028      	movs	r0, #40	@ 0x28
 8001482:	f000 f933 	bl	80016ec <i2c_send_cmd_lcd>

	delay_ms(1);
 8001486:	2300      	movs	r3, #0
 8001488:	663b      	str	r3, [r7, #96]	@ 0x60
 800148a:	e024      	b.n	80014d6 <i2c_lcd_init+0x16e>
 800148c:	4b5b      	ldr	r3, [pc, #364]	@ (80015fc <i2c_lcd_init+0x294>)
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	4a5a      	ldr	r2, [pc, #360]	@ (80015fc <i2c_lcd_init+0x294>)
 8001492:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001496:	60d3      	str	r3, [r2, #12]
 8001498:	4b59      	ldr	r3, [pc, #356]	@ (8001600 <i2c_lcd_init+0x298>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a58      	ldr	r2, [pc, #352]	@ (8001600 <i2c_lcd_init+0x298>)
 800149e:	f043 0301 	orr.w	r3, r3, #1
 80014a2:	6013      	str	r3, [r2, #0]
 80014a4:	4b56      	ldr	r3, [pc, #344]	@ (8001600 <i2c_lcd_init+0x298>)
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	623b      	str	r3, [r7, #32]
 80014aa:	f000 fdf1 	bl	8002090 <RCC_GetSystemClock>
 80014ae:	4603      	mov	r3, r0
 80014b0:	4a54      	ldr	r2, [pc, #336]	@ (8001604 <i2c_lcd_init+0x29c>)
 80014b2:	fba2 2303 	umull	r2, r3, r2, r3
 80014b6:	0c9b      	lsrs	r3, r3, #18
 80014b8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80014bc:	fb02 f303 	mul.w	r3, r2, r3
 80014c0:	61fb      	str	r3, [r7, #28]
 80014c2:	4b4f      	ldr	r3, [pc, #316]	@ (8001600 <i2c_lcd_init+0x298>)
 80014c4:	685a      	ldr	r2, [r3, #4]
 80014c6:	6a3b      	ldr	r3, [r7, #32]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	69fa      	ldr	r2, [r7, #28]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d8f8      	bhi.n	80014c2 <i2c_lcd_init+0x15a>
 80014d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80014d2:	3301      	adds	r3, #1
 80014d4:	663b      	str	r3, [r7, #96]	@ 0x60
 80014d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d0d7      	beq.n	800148c <i2c_lcd_init+0x124>
	i2c_send_cmd_lcd(0x01); delay_ms(1); // clear display
 80014dc:	2001      	movs	r0, #1
 80014de:	f000 f905 	bl	80016ec <i2c_send_cmd_lcd>
 80014e2:	2300      	movs	r3, #0
 80014e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80014e6:	e024      	b.n	8001532 <i2c_lcd_init+0x1ca>
 80014e8:	4b44      	ldr	r3, [pc, #272]	@ (80015fc <i2c_lcd_init+0x294>)
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	4a43      	ldr	r2, [pc, #268]	@ (80015fc <i2c_lcd_init+0x294>)
 80014ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80014f2:	60d3      	str	r3, [r2, #12]
 80014f4:	4b42      	ldr	r3, [pc, #264]	@ (8001600 <i2c_lcd_init+0x298>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a41      	ldr	r2, [pc, #260]	@ (8001600 <i2c_lcd_init+0x298>)
 80014fa:	f043 0301 	orr.w	r3, r3, #1
 80014fe:	6013      	str	r3, [r2, #0]
 8001500:	4b3f      	ldr	r3, [pc, #252]	@ (8001600 <i2c_lcd_init+0x298>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001506:	f000 fdc3 	bl	8002090 <RCC_GetSystemClock>
 800150a:	4603      	mov	r3, r0
 800150c:	4a3d      	ldr	r2, [pc, #244]	@ (8001604 <i2c_lcd_init+0x29c>)
 800150e:	fba2 2303 	umull	r2, r3, r2, r3
 8001512:	0c9b      	lsrs	r3, r3, #18
 8001514:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001518:	fb02 f303 	mul.w	r3, r2, r3
 800151c:	627b      	str	r3, [r7, #36]	@ 0x24
 800151e:	4b38      	ldr	r3, [pc, #224]	@ (8001600 <i2c_lcd_init+0x298>)
 8001520:	685a      	ldr	r2, [r3, #4]
 8001522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001528:	429a      	cmp	r2, r3
 800152a:	d8f8      	bhi.n	800151e <i2c_lcd_init+0x1b6>
 800152c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800152e:	3301      	adds	r3, #1
 8001530:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001532:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001534:	2b00      	cmp	r3, #0
 8001536:	d0d7      	beq.n	80014e8 <i2c_lcd_init+0x180>
	i2c_send_cmd_lcd(0x06); delay_ms(2); // entry mode
 8001538:	2006      	movs	r0, #6
 800153a:	f000 f8d7 	bl	80016ec <i2c_send_cmd_lcd>
 800153e:	2300      	movs	r3, #0
 8001540:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001542:	e024      	b.n	800158e <i2c_lcd_init+0x226>
 8001544:	4b2d      	ldr	r3, [pc, #180]	@ (80015fc <i2c_lcd_init+0x294>)
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	4a2c      	ldr	r2, [pc, #176]	@ (80015fc <i2c_lcd_init+0x294>)
 800154a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800154e:	60d3      	str	r3, [r2, #12]
 8001550:	4b2b      	ldr	r3, [pc, #172]	@ (8001600 <i2c_lcd_init+0x298>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a2a      	ldr	r2, [pc, #168]	@ (8001600 <i2c_lcd_init+0x298>)
 8001556:	f043 0301 	orr.w	r3, r3, #1
 800155a:	6013      	str	r3, [r2, #0]
 800155c:	4b28      	ldr	r3, [pc, #160]	@ (8001600 <i2c_lcd_init+0x298>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	633b      	str	r3, [r7, #48]	@ 0x30
 8001562:	f000 fd95 	bl	8002090 <RCC_GetSystemClock>
 8001566:	4603      	mov	r3, r0
 8001568:	4a26      	ldr	r2, [pc, #152]	@ (8001604 <i2c_lcd_init+0x29c>)
 800156a:	fba2 2303 	umull	r2, r3, r2, r3
 800156e:	0c9b      	lsrs	r3, r3, #18
 8001570:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001574:	fb02 f303 	mul.w	r3, r2, r3
 8001578:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800157a:	4b21      	ldr	r3, [pc, #132]	@ (8001600 <i2c_lcd_init+0x298>)
 800157c:	685a      	ldr	r2, [r3, #4]
 800157e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001584:	429a      	cmp	r2, r3
 8001586:	d8f8      	bhi.n	800157a <i2c_lcd_init+0x212>
 8001588:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800158a:	3301      	adds	r3, #1
 800158c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800158e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001590:	2b01      	cmp	r3, #1
 8001592:	d9d7      	bls.n	8001544 <i2c_lcd_init+0x1dc>
	i2c_send_cmd_lcd(0x0C); delay_ms(1); // set on display
 8001594:	200c      	movs	r0, #12
 8001596:	f000 f8a9 	bl	80016ec <i2c_send_cmd_lcd>
 800159a:	2300      	movs	r3, #0
 800159c:	657b      	str	r3, [r7, #84]	@ 0x54
 800159e:	e024      	b.n	80015ea <i2c_lcd_init+0x282>
 80015a0:	4b16      	ldr	r3, [pc, #88]	@ (80015fc <i2c_lcd_init+0x294>)
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	4a15      	ldr	r2, [pc, #84]	@ (80015fc <i2c_lcd_init+0x294>)
 80015a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80015aa:	60d3      	str	r3, [r2, #12]
 80015ac:	4b14      	ldr	r3, [pc, #80]	@ (8001600 <i2c_lcd_init+0x298>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a13      	ldr	r2, [pc, #76]	@ (8001600 <i2c_lcd_init+0x298>)
 80015b2:	f043 0301 	orr.w	r3, r3, #1
 80015b6:	6013      	str	r3, [r2, #0]
 80015b8:	4b11      	ldr	r3, [pc, #68]	@ (8001600 <i2c_lcd_init+0x298>)
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80015be:	f000 fd67 	bl	8002090 <RCC_GetSystemClock>
 80015c2:	4603      	mov	r3, r0
 80015c4:	4a0f      	ldr	r2, [pc, #60]	@ (8001604 <i2c_lcd_init+0x29c>)
 80015c6:	fba2 2303 	umull	r2, r3, r2, r3
 80015ca:	0c9b      	lsrs	r3, r3, #18
 80015cc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80015d0:	fb02 f303 	mul.w	r3, r2, r3
 80015d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80015d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001600 <i2c_lcd_init+0x298>)
 80015d8:	685a      	ldr	r2, [r3, #4]
 80015da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d8f8      	bhi.n	80015d6 <i2c_lcd_init+0x26e>
 80015e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80015e6:	3301      	adds	r3, #1
 80015e8:	657b      	str	r3, [r7, #84]	@ 0x54
 80015ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d0d7      	beq.n	80015a0 <i2c_lcd_init+0x238>
	i2c_send_cmd_lcd(0x02); delay_ms(1); // move cursor to home
 80015f0:	2002      	movs	r0, #2
 80015f2:	f000 f87b 	bl	80016ec <i2c_send_cmd_lcd>
 80015f6:	2300      	movs	r3, #0
 80015f8:	653b      	str	r3, [r7, #80]	@ 0x50
 80015fa:	e02a      	b.n	8001652 <i2c_lcd_init+0x2ea>
 80015fc:	e000edf0 	.word	0xe000edf0
 8001600:	e0001000 	.word	0xe0001000
 8001604:	431bde83 	.word	0x431bde83
 8001608:	4b34      	ldr	r3, [pc, #208]	@ (80016dc <i2c_lcd_init+0x374>)
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	4a33      	ldr	r2, [pc, #204]	@ (80016dc <i2c_lcd_init+0x374>)
 800160e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001612:	60d3      	str	r3, [r2, #12]
 8001614:	4b32      	ldr	r3, [pc, #200]	@ (80016e0 <i2c_lcd_init+0x378>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a31      	ldr	r2, [pc, #196]	@ (80016e0 <i2c_lcd_init+0x378>)
 800161a:	f043 0301 	orr.w	r3, r3, #1
 800161e:	6013      	str	r3, [r2, #0]
 8001620:	4b2f      	ldr	r3, [pc, #188]	@ (80016e0 <i2c_lcd_init+0x378>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	643b      	str	r3, [r7, #64]	@ 0x40
 8001626:	f000 fd33 	bl	8002090 <RCC_GetSystemClock>
 800162a:	4603      	mov	r3, r0
 800162c:	4a2d      	ldr	r2, [pc, #180]	@ (80016e4 <i2c_lcd_init+0x37c>)
 800162e:	fba2 2303 	umull	r2, r3, r2, r3
 8001632:	0c9b      	lsrs	r3, r3, #18
 8001634:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001638:	fb02 f303 	mul.w	r3, r2, r3
 800163c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800163e:	4b28      	ldr	r3, [pc, #160]	@ (80016e0 <i2c_lcd_init+0x378>)
 8001640:	685a      	ldr	r2, [r3, #4]
 8001642:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001648:	429a      	cmp	r2, r3
 800164a:	d8f8      	bhi.n	800163e <i2c_lcd_init+0x2d6>
 800164c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800164e:	3301      	adds	r3, #1
 8001650:	653b      	str	r3, [r7, #80]	@ 0x50
 8001652:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001654:	2b00      	cmp	r3, #0
 8001656:	d0d7      	beq.n	8001608 <i2c_lcd_init+0x2a0>

	i2c_lcd_clear();
 8001658:	f000 f8ba 	bl	80017d0 <i2c_lcd_clear>

	i2c_lcd_put_cur(0,0);
 800165c:	2100      	movs	r1, #0
 800165e:	2000      	movs	r0, #0
 8001660:	f000 f8f2 	bl	8001848 <i2c_lcd_put_cur>
	i2c_send_string("Init LCD succes"); // Test
 8001664:	4820      	ldr	r0, [pc, #128]	@ (80016e8 <i2c_lcd_init+0x380>)
 8001666:	f000 f89d 	bl	80017a4 <i2c_send_string>

	i2c_lcd_put_cur(1,0);
 800166a:	2100      	movs	r1, #0
 800166c:	2001      	movs	r0, #1
 800166e:	f000 f8eb 	bl	8001848 <i2c_lcd_put_cur>
	i2c_send_string("Init LCD succes"); // Test
 8001672:	481d      	ldr	r0, [pc, #116]	@ (80016e8 <i2c_lcd_init+0x380>)
 8001674:	f000 f896 	bl	80017a4 <i2c_send_string>

	delay_ms(500);
 8001678:	2300      	movs	r3, #0
 800167a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800167c:	e024      	b.n	80016c8 <i2c_lcd_init+0x360>
 800167e:	4b17      	ldr	r3, [pc, #92]	@ (80016dc <i2c_lcd_init+0x374>)
 8001680:	68db      	ldr	r3, [r3, #12]
 8001682:	4a16      	ldr	r2, [pc, #88]	@ (80016dc <i2c_lcd_init+0x374>)
 8001684:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001688:	60d3      	str	r3, [r2, #12]
 800168a:	4b15      	ldr	r3, [pc, #84]	@ (80016e0 <i2c_lcd_init+0x378>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a14      	ldr	r2, [pc, #80]	@ (80016e0 <i2c_lcd_init+0x378>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	6013      	str	r3, [r2, #0]
 8001696:	4b12      	ldr	r3, [pc, #72]	@ (80016e0 <i2c_lcd_init+0x378>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800169c:	f000 fcf8 	bl	8002090 <RCC_GetSystemClock>
 80016a0:	4603      	mov	r3, r0
 80016a2:	4a10      	ldr	r2, [pc, #64]	@ (80016e4 <i2c_lcd_init+0x37c>)
 80016a4:	fba2 2303 	umull	r2, r3, r2, r3
 80016a8:	0c9b      	lsrs	r3, r3, #18
 80016aa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80016ae:	fb02 f303 	mul.w	r3, r2, r3
 80016b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80016b4:	4b0a      	ldr	r3, [pc, #40]	@ (80016e0 <i2c_lcd_init+0x378>)
 80016b6:	685a      	ldr	r2, [r3, #4]
 80016b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80016be:	429a      	cmp	r2, r3
 80016c0:	d8f8      	bhi.n	80016b4 <i2c_lcd_init+0x34c>
 80016c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80016c4:	3301      	adds	r3, #1
 80016c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80016c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80016ca:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80016ce:	d3d6      	bcc.n	800167e <i2c_lcd_init+0x316>
	i2c_lcd_clear();
 80016d0:	f000 f87e 	bl	80017d0 <i2c_lcd_clear>
}
 80016d4:	bf00      	nop
 80016d6:	3770      	adds	r7, #112	@ 0x70
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	e000edf0 	.word	0xe000edf0
 80016e0:	e0001000 	.word	0xe0001000
 80016e4:	431bde83 	.word	0x431bde83
 80016e8:	08003960 	.word	0x08003960

080016ec <i2c_send_cmd_lcd>:


void i2c_send_cmd_lcd(char data){
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80016f6:	79fb      	ldrb	r3, [r7, #7]
 80016f8:	f023 030f 	bic.w	r3, r3, #15
 80016fc:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80016fe:	79fb      	ldrb	r3, [r7, #7]
 8001700:	011b      	lsls	r3, r3, #4
 8001702:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001704:	7bfb      	ldrb	r3, [r7, #15]
 8001706:	f043 030c 	orr.w	r3, r3, #12
 800170a:	b2db      	uxtb	r3, r3
 800170c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800170e:	7bfb      	ldrb	r3, [r7, #15]
 8001710:	f043 0308 	orr.w	r3, r3, #8
 8001714:	b2db      	uxtb	r3, r3
 8001716:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001718:	7bbb      	ldrb	r3, [r7, #14]
 800171a:	f043 030c 	orr.w	r3, r3, #12
 800171e:	b2db      	uxtb	r3, r3
 8001720:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8001722:	7bbb      	ldrb	r3, [r7, #14]
 8001724:	f043 0308 	orr.w	r3, r3, #8
 8001728:	b2db      	uxtb	r3, r3
 800172a:	72fb      	strb	r3, [r7, #11]
	I2C_MasterSend_Multi_Data(&hi2c1, data_t, 4);
 800172c:	f107 0308 	add.w	r3, r7, #8
 8001730:	2204      	movs	r2, #4
 8001732:	4619      	mov	r1, r3
 8001734:	4803      	ldr	r0, [pc, #12]	@ (8001744 <i2c_send_cmd_lcd+0x58>)
 8001736:	f7ff fcfb 	bl	8001130 <I2C_MasterSend_Multi_Data>
}
 800173a:	bf00      	nop
 800173c:	3710      	adds	r7, #16
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	20000130 	.word	0x20000130

08001748 <i2c_send_data_lcd>:

void i2c_send_data_lcd(char data){
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8001752:	79fb      	ldrb	r3, [r7, #7]
 8001754:	f023 030f 	bic.w	r3, r3, #15
 8001758:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800175a:	79fb      	ldrb	r3, [r7, #7]
 800175c:	011b      	lsls	r3, r3, #4
 800175e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 8001760:	7bfb      	ldrb	r3, [r7, #15]
 8001762:	f043 030d 	orr.w	r3, r3, #13
 8001766:	b2db      	uxtb	r3, r3
 8001768:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 800176a:	7bfb      	ldrb	r3, [r7, #15]
 800176c:	f043 0309 	orr.w	r3, r3, #9
 8001770:	b2db      	uxtb	r3, r3
 8001772:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 8001774:	7bbb      	ldrb	r3, [r7, #14]
 8001776:	f043 030d 	orr.w	r3, r3, #13
 800177a:	b2db      	uxtb	r3, r3
 800177c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 800177e:	7bbb      	ldrb	r3, [r7, #14]
 8001780:	f043 0309 	orr.w	r3, r3, #9
 8001784:	b2db      	uxtb	r3, r3
 8001786:	72fb      	strb	r3, [r7, #11]
	I2C_MasterSend_Multi_Data(&hi2c1, data_t, 4);
 8001788:	f107 0308 	add.w	r3, r7, #8
 800178c:	2204      	movs	r2, #4
 800178e:	4619      	mov	r1, r3
 8001790:	4803      	ldr	r0, [pc, #12]	@ (80017a0 <i2c_send_data_lcd+0x58>)
 8001792:	f7ff fccd 	bl	8001130 <I2C_MasterSend_Multi_Data>
}
 8001796:	bf00      	nop
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20000130 	.word	0x20000130

080017a4 <i2c_send_string>:

void i2c_send_string(char *data){
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
	while (*data){
 80017ac:	e006      	b.n	80017bc <i2c_send_string+0x18>
		i2c_send_data_lcd(*data++);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	1c5a      	adds	r2, r3, #1
 80017b2:	607a      	str	r2, [r7, #4]
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7ff ffc6 	bl	8001748 <i2c_send_data_lcd>
	while (*data){
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d1f4      	bne.n	80017ae <i2c_send_string+0xa>
	}
}
 80017c4:	bf00      	nop
 80017c6:	bf00      	nop
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
	...

080017d0 <i2c_lcd_clear>:

void i2c_lcd_clear(){
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
	i2c_send_cmd_lcd(0x01);delay_ms(1);
 80017d6:	2001      	movs	r0, #1
 80017d8:	f7ff ff88 	bl	80016ec <i2c_send_cmd_lcd>
 80017dc:	2300      	movs	r3, #0
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	e024      	b.n	800182c <i2c_lcd_clear+0x5c>
 80017e2:	4b16      	ldr	r3, [pc, #88]	@ (800183c <i2c_lcd_clear+0x6c>)
 80017e4:	68db      	ldr	r3, [r3, #12]
 80017e6:	4a15      	ldr	r2, [pc, #84]	@ (800183c <i2c_lcd_clear+0x6c>)
 80017e8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017ec:	60d3      	str	r3, [r2, #12]
 80017ee:	4b14      	ldr	r3, [pc, #80]	@ (8001840 <i2c_lcd_clear+0x70>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a13      	ldr	r2, [pc, #76]	@ (8001840 <i2c_lcd_clear+0x70>)
 80017f4:	f043 0301 	orr.w	r3, r3, #1
 80017f8:	6013      	str	r3, [r2, #0]
 80017fa:	4b11      	ldr	r3, [pc, #68]	@ (8001840 <i2c_lcd_clear+0x70>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	60bb      	str	r3, [r7, #8]
 8001800:	f000 fc46 	bl	8002090 <RCC_GetSystemClock>
 8001804:	4603      	mov	r3, r0
 8001806:	4a0f      	ldr	r2, [pc, #60]	@ (8001844 <i2c_lcd_clear+0x74>)
 8001808:	fba2 2303 	umull	r2, r3, r2, r3
 800180c:	0c9b      	lsrs	r3, r3, #18
 800180e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001812:	fb02 f303 	mul.w	r3, r2, r3
 8001816:	607b      	str	r3, [r7, #4]
 8001818:	4b09      	ldr	r3, [pc, #36]	@ (8001840 <i2c_lcd_clear+0x70>)
 800181a:	685a      	ldr	r2, [r3, #4]
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	429a      	cmp	r2, r3
 8001824:	d8f8      	bhi.n	8001818 <i2c_lcd_clear+0x48>
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	3301      	adds	r3, #1
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d0d7      	beq.n	80017e2 <i2c_lcd_clear+0x12>
}
 8001832:	bf00      	nop
 8001834:	bf00      	nop
 8001836:	3710      	adds	r7, #16
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	e000edf0 	.word	0xe000edf0
 8001840:	e0001000 	.word	0xe0001000
 8001844:	431bde83 	.word	0x431bde83

08001848 <i2c_lcd_put_cur>:

void i2c_lcd_put_cur(int row, int col){
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
    switch (row){
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d003      	beq.n	8001860 <i2c_lcd_put_cur+0x18>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2b01      	cmp	r3, #1
 800185c:	d005      	beq.n	800186a <i2c_lcd_put_cur+0x22>
 800185e:	e009      	b.n	8001874 <i2c_lcd_put_cur+0x2c>
        case 0:
            col |= 0x80;
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001866:	603b      	str	r3, [r7, #0]
            break;
 8001868:	e004      	b.n	8001874 <i2c_lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001870:	603b      	str	r3, [r7, #0]
            break;
 8001872:	bf00      	nop
    }

    i2c_send_cmd_lcd (col);
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	b2db      	uxtb	r3, r3
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff ff37 	bl	80016ec <i2c_send_cmd_lcd>
}
 800187e:	bf00      	nop
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
	...

08001888 <lcd_init>:

#include "lcd.h"

#define lcd4_bit

void lcd_init(){
 8001888:	b580      	push	{r7, lr}
 800188a:	b098      	sub	sp, #96	@ 0x60
 800188c:	af00      	add	r7, sp, #0
#ifdef lcd4_bit

	delay_ms(10); send_cmd_lcd (0x2);  // 4bit mode
 800188e:	2300      	movs	r3, #0
 8001890:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001892:	e024      	b.n	80018de <lcd_init+0x56>
 8001894:	4ba1      	ldr	r3, [pc, #644]	@ (8001b1c <lcd_init+0x294>)
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	4aa0      	ldr	r2, [pc, #640]	@ (8001b1c <lcd_init+0x294>)
 800189a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800189e:	60d3      	str	r3, [r2, #12]
 80018a0:	4b9f      	ldr	r3, [pc, #636]	@ (8001b20 <lcd_init+0x298>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a9e      	ldr	r2, [pc, #632]	@ (8001b20 <lcd_init+0x298>)
 80018a6:	f043 0301 	orr.w	r3, r3, #1
 80018aa:	6013      	str	r3, [r2, #0]
 80018ac:	4b9c      	ldr	r3, [pc, #624]	@ (8001b20 <lcd_init+0x298>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	607b      	str	r3, [r7, #4]
 80018b2:	f000 fbed 	bl	8002090 <RCC_GetSystemClock>
 80018b6:	4603      	mov	r3, r0
 80018b8:	4a9a      	ldr	r2, [pc, #616]	@ (8001b24 <lcd_init+0x29c>)
 80018ba:	fba2 2303 	umull	r2, r3, r2, r3
 80018be:	0c9b      	lsrs	r3, r3, #18
 80018c0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80018c4:	fb02 f303 	mul.w	r3, r2, r3
 80018c8:	603b      	str	r3, [r7, #0]
 80018ca:	4b95      	ldr	r3, [pc, #596]	@ (8001b20 <lcd_init+0x298>)
 80018cc:	685a      	ldr	r2, [r3, #4]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	683a      	ldr	r2, [r7, #0]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d8f8      	bhi.n	80018ca <lcd_init+0x42>
 80018d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80018da:	3301      	adds	r3, #1
 80018dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80018de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80018e0:	2b09      	cmp	r3, #9
 80018e2:	d9d7      	bls.n	8001894 <lcd_init+0xc>
 80018e4:	2002      	movs	r0, #2
 80018e6:	f000 f966 	bl	8001bb6 <send_cmd_lcd>
	delay_ms(1000); send_cmd_lcd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80018ea:	2300      	movs	r3, #0
 80018ec:	65bb      	str	r3, [r7, #88]	@ 0x58
 80018ee:	e024      	b.n	800193a <lcd_init+0xb2>
 80018f0:	4b8a      	ldr	r3, [pc, #552]	@ (8001b1c <lcd_init+0x294>)
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	4a89      	ldr	r2, [pc, #548]	@ (8001b1c <lcd_init+0x294>)
 80018f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018fa:	60d3      	str	r3, [r2, #12]
 80018fc:	4b88      	ldr	r3, [pc, #544]	@ (8001b20 <lcd_init+0x298>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a87      	ldr	r2, [pc, #540]	@ (8001b20 <lcd_init+0x298>)
 8001902:	f043 0301 	orr.w	r3, r3, #1
 8001906:	6013      	str	r3, [r2, #0]
 8001908:	4b85      	ldr	r3, [pc, #532]	@ (8001b20 <lcd_init+0x298>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	60fb      	str	r3, [r7, #12]
 800190e:	f000 fbbf 	bl	8002090 <RCC_GetSystemClock>
 8001912:	4603      	mov	r3, r0
 8001914:	4a83      	ldr	r2, [pc, #524]	@ (8001b24 <lcd_init+0x29c>)
 8001916:	fba2 2303 	umull	r2, r3, r2, r3
 800191a:	0c9b      	lsrs	r3, r3, #18
 800191c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001920:	fb02 f303 	mul.w	r3, r2, r3
 8001924:	60bb      	str	r3, [r7, #8]
 8001926:	4b7e      	ldr	r3, [pc, #504]	@ (8001b20 <lcd_init+0x298>)
 8001928:	685a      	ldr	r2, [r3, #4]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	68ba      	ldr	r2, [r7, #8]
 8001930:	429a      	cmp	r2, r3
 8001932:	d8f8      	bhi.n	8001926 <lcd_init+0x9e>
 8001934:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001936:	3301      	adds	r3, #1
 8001938:	65bb      	str	r3, [r7, #88]	@ 0x58
 800193a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800193c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001940:	d3d6      	bcc.n	80018f0 <lcd_init+0x68>
 8001942:	2028      	movs	r0, #40	@ 0x28
 8001944:	f000 f937 	bl	8001bb6 <send_cmd_lcd>
	delay_ms(1);
 8001948:	2300      	movs	r3, #0
 800194a:	657b      	str	r3, [r7, #84]	@ 0x54
 800194c:	e024      	b.n	8001998 <lcd_init+0x110>
 800194e:	4b73      	ldr	r3, [pc, #460]	@ (8001b1c <lcd_init+0x294>)
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	4a72      	ldr	r2, [pc, #456]	@ (8001b1c <lcd_init+0x294>)
 8001954:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001958:	60d3      	str	r3, [r2, #12]
 800195a:	4b71      	ldr	r3, [pc, #452]	@ (8001b20 <lcd_init+0x298>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a70      	ldr	r2, [pc, #448]	@ (8001b20 <lcd_init+0x298>)
 8001960:	f043 0301 	orr.w	r3, r3, #1
 8001964:	6013      	str	r3, [r2, #0]
 8001966:	4b6e      	ldr	r3, [pc, #440]	@ (8001b20 <lcd_init+0x298>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	617b      	str	r3, [r7, #20]
 800196c:	f000 fb90 	bl	8002090 <RCC_GetSystemClock>
 8001970:	4603      	mov	r3, r0
 8001972:	4a6c      	ldr	r2, [pc, #432]	@ (8001b24 <lcd_init+0x29c>)
 8001974:	fba2 2303 	umull	r2, r3, r2, r3
 8001978:	0c9b      	lsrs	r3, r3, #18
 800197a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800197e:	fb02 f303 	mul.w	r3, r2, r3
 8001982:	613b      	str	r3, [r7, #16]
 8001984:	4b66      	ldr	r3, [pc, #408]	@ (8001b20 <lcd_init+0x298>)
 8001986:	685a      	ldr	r2, [r3, #4]
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	693a      	ldr	r2, [r7, #16]
 800198e:	429a      	cmp	r2, r3
 8001990:	d8f8      	bhi.n	8001984 <lcd_init+0xfc>
 8001992:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001994:	3301      	adds	r3, #1
 8001996:	657b      	str	r3, [r7, #84]	@ 0x54
 8001998:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800199a:	2b00      	cmp	r3, #0
 800199c:	d0d7      	beq.n	800194e <lcd_init+0xc6>
#else
	send_cmd_lcd (0x38); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
	delay_ms(1);
#endif

	send_cmd_lcd(0x0C); delay_ms(1);
 800199e:	200c      	movs	r0, #12
 80019a0:	f000 f909 	bl	8001bb6 <send_cmd_lcd>
 80019a4:	2300      	movs	r3, #0
 80019a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80019a8:	e024      	b.n	80019f4 <lcd_init+0x16c>
 80019aa:	4b5c      	ldr	r3, [pc, #368]	@ (8001b1c <lcd_init+0x294>)
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	4a5b      	ldr	r2, [pc, #364]	@ (8001b1c <lcd_init+0x294>)
 80019b0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019b4:	60d3      	str	r3, [r2, #12]
 80019b6:	4b5a      	ldr	r3, [pc, #360]	@ (8001b20 <lcd_init+0x298>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a59      	ldr	r2, [pc, #356]	@ (8001b20 <lcd_init+0x298>)
 80019bc:	f043 0301 	orr.w	r3, r3, #1
 80019c0:	6013      	str	r3, [r2, #0]
 80019c2:	4b57      	ldr	r3, [pc, #348]	@ (8001b20 <lcd_init+0x298>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	61fb      	str	r3, [r7, #28]
 80019c8:	f000 fb62 	bl	8002090 <RCC_GetSystemClock>
 80019cc:	4603      	mov	r3, r0
 80019ce:	4a55      	ldr	r2, [pc, #340]	@ (8001b24 <lcd_init+0x29c>)
 80019d0:	fba2 2303 	umull	r2, r3, r2, r3
 80019d4:	0c9b      	lsrs	r3, r3, #18
 80019d6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80019da:	fb02 f303 	mul.w	r3, r2, r3
 80019de:	61bb      	str	r3, [r7, #24]
 80019e0:	4b4f      	ldr	r3, [pc, #316]	@ (8001b20 <lcd_init+0x298>)
 80019e2:	685a      	ldr	r2, [r3, #4]
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d8f8      	bhi.n	80019e0 <lcd_init+0x158>
 80019ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80019f0:	3301      	adds	r3, #1
 80019f2:	653b      	str	r3, [r7, #80]	@ 0x50
 80019f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d0d7      	beq.n	80019aa <lcd_init+0x122>
	send_cmd_lcd(0x01); delay_ms(2);
 80019fa:	2001      	movs	r0, #1
 80019fc:	f000 f8db 	bl	8001bb6 <send_cmd_lcd>
 8001a00:	2300      	movs	r3, #0
 8001a02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a04:	e024      	b.n	8001a50 <lcd_init+0x1c8>
 8001a06:	4b45      	ldr	r3, [pc, #276]	@ (8001b1c <lcd_init+0x294>)
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	4a44      	ldr	r2, [pc, #272]	@ (8001b1c <lcd_init+0x294>)
 8001a0c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a10:	60d3      	str	r3, [r2, #12]
 8001a12:	4b43      	ldr	r3, [pc, #268]	@ (8001b20 <lcd_init+0x298>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a42      	ldr	r2, [pc, #264]	@ (8001b20 <lcd_init+0x298>)
 8001a18:	f043 0301 	orr.w	r3, r3, #1
 8001a1c:	6013      	str	r3, [r2, #0]
 8001a1e:	4b40      	ldr	r3, [pc, #256]	@ (8001b20 <lcd_init+0x298>)
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a24:	f000 fb34 	bl	8002090 <RCC_GetSystemClock>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	4a3e      	ldr	r2, [pc, #248]	@ (8001b24 <lcd_init+0x29c>)
 8001a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a30:	0c9b      	lsrs	r3, r3, #18
 8001a32:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001a36:	fb02 f303 	mul.w	r3, r2, r3
 8001a3a:	623b      	str	r3, [r7, #32]
 8001a3c:	4b38      	ldr	r3, [pc, #224]	@ (8001b20 <lcd_init+0x298>)
 8001a3e:	685a      	ldr	r2, [r3, #4]
 8001a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	6a3a      	ldr	r2, [r7, #32]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d8f8      	bhi.n	8001a3c <lcd_init+0x1b4>
 8001a4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d9d7      	bls.n	8001a06 <lcd_init+0x17e>
	send_cmd_lcd(0x06); delay_ms(1);
 8001a56:	2006      	movs	r0, #6
 8001a58:	f000 f8ad 	bl	8001bb6 <send_cmd_lcd>
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001a60:	e024      	b.n	8001aac <lcd_init+0x224>
 8001a62:	4b2e      	ldr	r3, [pc, #184]	@ (8001b1c <lcd_init+0x294>)
 8001a64:	68db      	ldr	r3, [r3, #12]
 8001a66:	4a2d      	ldr	r2, [pc, #180]	@ (8001b1c <lcd_init+0x294>)
 8001a68:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a6c:	60d3      	str	r3, [r2, #12]
 8001a6e:	4b2c      	ldr	r3, [pc, #176]	@ (8001b20 <lcd_init+0x298>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a2b      	ldr	r2, [pc, #172]	@ (8001b20 <lcd_init+0x298>)
 8001a74:	f043 0301 	orr.w	r3, r3, #1
 8001a78:	6013      	str	r3, [r2, #0]
 8001a7a:	4b29      	ldr	r3, [pc, #164]	@ (8001b20 <lcd_init+0x298>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a80:	f000 fb06 	bl	8002090 <RCC_GetSystemClock>
 8001a84:	4603      	mov	r3, r0
 8001a86:	4a27      	ldr	r2, [pc, #156]	@ (8001b24 <lcd_init+0x29c>)
 8001a88:	fba2 2303 	umull	r2, r3, r2, r3
 8001a8c:	0c9b      	lsrs	r3, r3, #18
 8001a8e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001a92:	fb02 f303 	mul.w	r3, r2, r3
 8001a96:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a98:	4b21      	ldr	r3, [pc, #132]	@ (8001b20 <lcd_init+0x298>)
 8001a9a:	685a      	ldr	r2, [r3, #4]
 8001a9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d8f8      	bhi.n	8001a98 <lcd_init+0x210>
 8001aa6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001aac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d0d7      	beq.n	8001a62 <lcd_init+0x1da>

	delay_ms(200);
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	647b      	str	r3, [r7, #68]	@ 0x44
 8001ab6:	e024      	b.n	8001b02 <lcd_init+0x27a>
 8001ab8:	4b18      	ldr	r3, [pc, #96]	@ (8001b1c <lcd_init+0x294>)
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	4a17      	ldr	r2, [pc, #92]	@ (8001b1c <lcd_init+0x294>)
 8001abe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ac2:	60d3      	str	r3, [r2, #12]
 8001ac4:	4b16      	ldr	r3, [pc, #88]	@ (8001b20 <lcd_init+0x298>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a15      	ldr	r2, [pc, #84]	@ (8001b20 <lcd_init+0x298>)
 8001aca:	f043 0301 	orr.w	r3, r3, #1
 8001ace:	6013      	str	r3, [r2, #0]
 8001ad0:	4b13      	ldr	r3, [pc, #76]	@ (8001b20 <lcd_init+0x298>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ad6:	f000 fadb 	bl	8002090 <RCC_GetSystemClock>
 8001ada:	4603      	mov	r3, r0
 8001adc:	4a11      	ldr	r2, [pc, #68]	@ (8001b24 <lcd_init+0x29c>)
 8001ade:	fba2 2303 	umull	r2, r3, r2, r3
 8001ae2:	0c9b      	lsrs	r3, r3, #18
 8001ae4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001ae8:	fb02 f303 	mul.w	r3, r2, r3
 8001aec:	633b      	str	r3, [r7, #48]	@ 0x30
 8001aee:	4b0c      	ldr	r3, [pc, #48]	@ (8001b20 <lcd_init+0x298>)
 8001af0:	685a      	ldr	r2, [r3, #4]
 8001af2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d8f8      	bhi.n	8001aee <lcd_init+0x266>
 8001afc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001afe:	3301      	adds	r3, #1
 8001b00:	647b      	str	r3, [r7, #68]	@ 0x44
 8001b02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b04:	2bc7      	cmp	r3, #199	@ 0xc7
 8001b06:	d9d7      	bls.n	8001ab8 <lcd_init+0x230>
	lcd_put_cur(0,0);
 8001b08:	2100      	movs	r1, #0
 8001b0a:	2000      	movs	r0, #0
 8001b0c:	f000 f8e4 	bl	8001cd8 <lcd_put_cur>
	send_string_lcd("Init LCD successfull"); // Test
 8001b10:	4805      	ldr	r0, [pc, #20]	@ (8001b28 <lcd_init+0x2a0>)
 8001b12:	f000 f88f 	bl	8001c34 <send_string_lcd>
//	send_string_lcd("Init LCD successfull"); // Test
//	lcd_put_cur(2,0);
//	send_string_lcd("Init LCD successfull"); // Test
//	lcd_put_cur(3,0);
//	send_string_lcd("Init LCD successfull"); // Test
	delay_ms(500);
 8001b16:	2300      	movs	r3, #0
 8001b18:	643b      	str	r3, [r7, #64]	@ 0x40
 8001b1a:	e02c      	b.n	8001b76 <lcd_init+0x2ee>
 8001b1c:	e000edf0 	.word	0xe000edf0
 8001b20:	e0001000 	.word	0xe0001000
 8001b24:	431bde83 	.word	0x431bde83
 8001b28:	08003970 	.word	0x08003970
 8001b2c:	4b17      	ldr	r3, [pc, #92]	@ (8001b8c <lcd_init+0x304>)
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	4a16      	ldr	r2, [pc, #88]	@ (8001b8c <lcd_init+0x304>)
 8001b32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b36:	60d3      	str	r3, [r2, #12]
 8001b38:	4b15      	ldr	r3, [pc, #84]	@ (8001b90 <lcd_init+0x308>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a14      	ldr	r2, [pc, #80]	@ (8001b90 <lcd_init+0x308>)
 8001b3e:	f043 0301 	orr.w	r3, r3, #1
 8001b42:	6013      	str	r3, [r2, #0]
 8001b44:	4b12      	ldr	r3, [pc, #72]	@ (8001b90 <lcd_init+0x308>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001b4a:	f000 faa1 	bl	8002090 <RCC_GetSystemClock>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	4a10      	ldr	r2, [pc, #64]	@ (8001b94 <lcd_init+0x30c>)
 8001b52:	fba2 2303 	umull	r2, r3, r2, r3
 8001b56:	0c9b      	lsrs	r3, r3, #18
 8001b58:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001b5c:	fb02 f303 	mul.w	r3, r2, r3
 8001b60:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001b62:	4b0b      	ldr	r3, [pc, #44]	@ (8001b90 <lcd_init+0x308>)
 8001b64:	685a      	ldr	r2, [r3, #4]
 8001b66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d8f8      	bhi.n	8001b62 <lcd_init+0x2da>
 8001b70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b72:	3301      	adds	r3, #1
 8001b74:	643b      	str	r3, [r7, #64]	@ 0x40
 8001b76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b78:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001b7c:	d3d6      	bcc.n	8001b2c <lcd_init+0x2a4>
	lcd_clear();
 8001b7e:	f000 f86f 	bl	8001c60 <lcd_clear>
}
 8001b82:	bf00      	nop
 8001b84:	3760      	adds	r7, #96	@ 0x60
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	e000edf0 	.word	0xe000edf0
 8001b90:	e0001000 	.word	0xe0001000
 8001b94:	431bde83 	.word	0x431bde83

08001b98 <write_data_lcd>:

void write_data_lcd(char data){
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	71fb      	strb	r3, [r7, #7]
	Write_data((uint8_t)data, DS3, LSB);
 8001ba2:	79fb      	ldrb	r3, [r7, #7]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	2107      	movs	r1, #7
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7fe fd47 	bl	800063c <Write_data>
}
 8001bae:	bf00      	nop
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <send_cmd_lcd>:

void send_cmd_lcd(char data){
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b084      	sub	sp, #16
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	71fb      	strb	r3, [r7, #7]

#ifdef lcd4_bit
	char tmp;
	tmp = ((data >> 4) | 0x20) & 0x3F;
 8001bc0:	79fb      	ldrb	r3, [r7, #7]
 8001bc2:	091b      	lsrs	r3, r3, #4
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	f043 0320 	orr.w	r3, r3, #32
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001bd0:	73fb      	strb	r3, [r7, #15]
	write_data_lcd(tmp);
 8001bd2:	7bfb      	ldrb	r3, [r7, #15]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff ffdf 	bl	8001b98 <write_data_lcd>

	tmp = data & 0x0F;
 8001bda:	79fb      	ldrb	r3, [r7, #7]
 8001bdc:	f003 030f 	and.w	r3, r3, #15
 8001be0:	73fb      	strb	r3, [r7, #15]
	write_data_lcd(tmp);
 8001be2:	7bfb      	ldrb	r3, [r7, #15]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff ffd7 	bl	8001b98 <write_data_lcd>
#else
	write_data_lcd(data);
#endif	// LCD_4bit
}
 8001bea:	bf00      	nop
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <send_data_lcd>:

void send_data_lcd(char data){
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b084      	sub	sp, #16
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	71fb      	strb	r3, [r7, #7]

#ifdef lcd4_bit
    char tmp;
	tmp = ((data >> 4) | (1<<4)) & 0x1F;
 8001bfc:	79fb      	ldrb	r3, [r7, #7]
 8001bfe:	091b      	lsrs	r3, r3, #4
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	f043 0310 	orr.w	r3, r3, #16
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	f003 031f 	and.w	r3, r3, #31
 8001c0c:	73fb      	strb	r3, [r7, #15]
	write_data_lcd(tmp);
 8001c0e:	7bfb      	ldrb	r3, [r7, #15]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff ffc1 	bl	8001b98 <write_data_lcd>

	tmp = (data | (1<<4)) & 0x1F;
 8001c16:	79fb      	ldrb	r3, [r7, #7]
 8001c18:	f043 0310 	orr.w	r3, r3, #16
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	f003 031f 	and.w	r3, r3, #31
 8001c22:	73fb      	strb	r3, [r7, #15]
	write_data_lcd(tmp);
 8001c24:	7bfb      	ldrb	r3, [r7, #15]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff ffb6 	bl	8001b98 <write_data_lcd>
#else
	write_data_lcd(data);
#endif	// lcd4_bit

}
 8001c2c:	bf00      	nop
 8001c2e:	3710      	adds	r7, #16
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <send_string_lcd>:

void send_string_lcd(char *data){
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
	while (*data){
 8001c3c:	e006      	b.n	8001c4c <send_string_lcd+0x18>
		send_data_lcd(*data++);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	1c5a      	adds	r2, r3, #1
 8001c42:	607a      	str	r2, [r7, #4]
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff ffd3 	bl	8001bf2 <send_data_lcd>
	while (*data){
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d1f4      	bne.n	8001c3e <send_string_lcd+0xa>
	}
}
 8001c54:	bf00      	nop
 8001c56:	bf00      	nop
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
	...

08001c60 <lcd_clear>:

void lcd_clear(){
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
	send_cmd_lcd(0x01); delay_ms(2);
 8001c66:	2001      	movs	r0, #1
 8001c68:	f7ff ffa5 	bl	8001bb6 <send_cmd_lcd>
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	e024      	b.n	8001cbc <lcd_clear+0x5c>
 8001c72:	4b16      	ldr	r3, [pc, #88]	@ (8001ccc <lcd_clear+0x6c>)
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	4a15      	ldr	r2, [pc, #84]	@ (8001ccc <lcd_clear+0x6c>)
 8001c78:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c7c:	60d3      	str	r3, [r2, #12]
 8001c7e:	4b14      	ldr	r3, [pc, #80]	@ (8001cd0 <lcd_clear+0x70>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a13      	ldr	r2, [pc, #76]	@ (8001cd0 <lcd_clear+0x70>)
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	6013      	str	r3, [r2, #0]
 8001c8a:	4b11      	ldr	r3, [pc, #68]	@ (8001cd0 <lcd_clear+0x70>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	60bb      	str	r3, [r7, #8]
 8001c90:	f000 f9fe 	bl	8002090 <RCC_GetSystemClock>
 8001c94:	4603      	mov	r3, r0
 8001c96:	4a0f      	ldr	r2, [pc, #60]	@ (8001cd4 <lcd_clear+0x74>)
 8001c98:	fba2 2303 	umull	r2, r3, r2, r3
 8001c9c:	0c9b      	lsrs	r3, r3, #18
 8001c9e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001ca2:	fb02 f303 	mul.w	r3, r2, r3
 8001ca6:	607b      	str	r3, [r7, #4]
 8001ca8:	4b09      	ldr	r3, [pc, #36]	@ (8001cd0 <lcd_clear+0x70>)
 8001caa:	685a      	ldr	r2, [r3, #4]
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d8f8      	bhi.n	8001ca8 <lcd_clear+0x48>
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d9d7      	bls.n	8001c72 <lcd_clear+0x12>
}
 8001cc2:	bf00      	nop
 8001cc4:	bf00      	nop
 8001cc6:	3710      	adds	r7, #16
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	e000edf0 	.word	0xe000edf0
 8001cd0:	e0001000 	.word	0xe0001000
 8001cd4:	431bde83 	.word	0x431bde83

08001cd8 <lcd_put_cur>:

void lcd_put_cur(int row, int col){
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
    switch (row){
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2b03      	cmp	r3, #3
 8001ce6:	d81f      	bhi.n	8001d28 <lcd_put_cur+0x50>
 8001ce8:	a201      	add	r2, pc, #4	@ (adr r2, 8001cf0 <lcd_put_cur+0x18>)
 8001cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cee:	bf00      	nop
 8001cf0:	08001d01 	.word	0x08001d01
 8001cf4:	08001d0b 	.word	0x08001d0b
 8001cf8:	08001d15 	.word	0x08001d15
 8001cfc:	08001d1f 	.word	0x08001d1f
        case 0:
            col |= 0x80;
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d06:	603b      	str	r3, [r7, #0]
            break;
 8001d08:	e00e      	b.n	8001d28 <lcd_put_cur+0x50>
        case 1:
            col |= 0xC0;
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001d10:	603b      	str	r3, [r7, #0]
            break;
 8001d12:	e009      	b.n	8001d28 <lcd_put_cur+0x50>
        case 2:
            col |= 0x94;
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	f043 0394 	orr.w	r3, r3, #148	@ 0x94
 8001d1a:	603b      	str	r3, [r7, #0]
            break;
 8001d1c:	e004      	b.n	8001d28 <lcd_put_cur+0x50>
        case 3:
            col |= 0xD4;
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	f043 03d4 	orr.w	r3, r3, #212	@ 0xd4
 8001d24:	603b      	str	r3, [r7, #0]
            break;
 8001d26:	bf00      	nop
    }

    send_cmd_lcd (col);
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7ff ff42 	bl	8001bb6 <send_cmd_lcd>
}
 8001d32:	bf00      	nop
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop

08001d3c <_ZN4RoomC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
#include "Device.h"

class Room : public Device {
private:
public:
    Room(std::string name) : Device(name) {}
 8001d3c:	b590      	push	{r4, r7, lr}
 8001d3e:	b089      	sub	sp, #36	@ 0x24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
 8001d46:	687c      	ldr	r4, [r7, #4]
 8001d48:	f107 0308 	add.w	r3, r7, #8
 8001d4c:	6839      	ldr	r1, [r7, #0]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f001 fbcb 	bl	80034ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8001d54:	f107 0308 	add.w	r3, r7, #8
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4620      	mov	r0, r4
 8001d5c:	f7fe fe6c 	bl	8000a38 <_ZN6DeviceC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001d60:	f107 0308 	add.w	r3, r7, #8
 8001d64:	4618      	mov	r0, r3
 8001d66:	f001 fb8c 	bl	8003482 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3724      	adds	r7, #36	@ 0x24
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd90      	pop	{r4, r7, pc}

08001d74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b0a2      	sub	sp, #136	@ 0x88
 8001d78:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d7a:	f000 fb09 	bl	8002390 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d7e:	f000 f8b1 	bl	8001ee4 <_Z18SystemClock_Configv>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
//  MX_I2C1_Init();
  MX_TIM1_Init();
 8001d82:	f000 fa69 	bl	8002258 <MX_TIM1_Init>
 8001d86:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001d8a:	673b      	str	r3, [r7, #112]	@ 0x70
  /* USER CODE BEGIN 2 */
	Room LVR("Living Room");
 8001d8c:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8001d90:	f107 031c 	add.w	r3, r7, #28
 8001d94:	494d      	ldr	r1, [pc, #308]	@ (8001ecc <main+0x158>)
 8001d96:	4618      	mov	r0, r3
 8001d98:	f001 fbd0 	bl	800353c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001d9c:	f107 021c 	add.w	r2, r7, #28
 8001da0:	f107 0314 	add.w	r3, r7, #20
 8001da4:	4611      	mov	r1, r2
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7ff ffc8 	bl	8001d3c <_ZN4RoomC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001dac:	f107 031c 	add.w	r3, r7, #28
 8001db0:	4618      	mov	r0, r3
 8001db2:	f001 fb66 	bl	8003482 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

      __attribute__((__always_inline__))
#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8001db6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f000 f902 	bl	8001fc4 <_ZNSt15__new_allocatorIcED1Ev>
 8001dc0:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001dc4:	677b      	str	r3, [r7, #116]	@ 0x74
	Room KTR("Kitchen Room");
 8001dc6:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8001dca:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001dce:	4940      	ldr	r1, [pc, #256]	@ (8001ed0 <main+0x15c>)
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f001 fbb3 	bl	800353c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001dd6:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8001dda:	f107 030c 	add.w	r3, r7, #12
 8001dde:	4611      	mov	r1, r2
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7ff ffab 	bl	8001d3c <_ZN4RoomC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001de6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001dea:	4618      	mov	r0, r3
 8001dec:	f001 fb49 	bl	8003482 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001df0:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001df4:	4618      	mov	r0, r3
 8001df6:	f000 f8e5 	bl	8001fc4 <_ZNSt15__new_allocatorIcED1Ev>
 8001dfa:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001dfe:	67bb      	str	r3, [r7, #120]	@ 0x78
	Room BR("Bed Room");
 8001e00:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8001e04:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001e08:	4932      	ldr	r1, [pc, #200]	@ (8001ed4 <main+0x160>)
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f001 fb96 	bl	800353c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001e10:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8001e14:	1d3b      	adds	r3, r7, #4
 8001e16:	4611      	mov	r1, r2
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff ff8f 	bl	8001d3c <_ZN4RoomC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001e1e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001e22:	4618      	mov	r0, r3
 8001e24:	f001 fb2d 	bl	8003482 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001e28:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f000 f8c9 	bl	8001fc4 <_ZNSt15__new_allocatorIcED1Ev>
	LVR.TurnOnLed(Room::em_Led1);
 8001e32:	f107 0314 	add.w	r3, r7, #20
 8001e36:	2180      	movs	r1, #128	@ 0x80
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7fe fe61 	bl	8000b00 <_ZN6Device9TurnOnLedEh>
	KTR.TurnOnLed(Room::em_Led2);
 8001e3e:	f107 030c 	add.w	r3, r7, #12
 8001e42:	2140      	movs	r1, #64	@ 0x40
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7fe fe5b 	bl	8000b00 <_ZN6Device9TurnOnLedEh>
	BR.TurnOnLed(Room::em_Led3);
 8001e4a:	1d3b      	adds	r3, r7, #4
 8001e4c:	2120      	movs	r1, #32
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7fe fe56 	bl	8000b00 <_ZN6Device9TurnOnLedEh>
	delay_ms(1000);
 8001e54:	2300      	movs	r3, #0
 8001e56:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001e5a:	e02d      	b.n	8001eb8 <main+0x144>
 8001e5c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ed8 <main+0x164>)
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	4a1d      	ldr	r2, [pc, #116]	@ (8001ed8 <main+0x164>)
 8001e62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e66:	60d3      	str	r3, [r2, #12]
 8001e68:	4b1c      	ldr	r3, [pc, #112]	@ (8001edc <main+0x168>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a1b      	ldr	r2, [pc, #108]	@ (8001edc <main+0x168>)
 8001e6e:	f043 0301 	orr.w	r3, r3, #1
 8001e72:	6013      	str	r3, [r2, #0]
 8001e74:	4b19      	ldr	r3, [pc, #100]	@ (8001edc <main+0x168>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001e7c:	f000 f908 	bl	8002090 <RCC_GetSystemClock>
 8001e80:	4603      	mov	r3, r0
 8001e82:	4a17      	ldr	r2, [pc, #92]	@ (8001ee0 <main+0x16c>)
 8001e84:	fba2 2303 	umull	r2, r3, r2, r3
 8001e88:	0c9b      	lsrs	r3, r3, #18
 8001e8a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001e8e:	fb02 f303 	mul.w	r3, r2, r3
 8001e92:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001e94:	4b11      	ldr	r3, [pc, #68]	@ (8001edc <main+0x168>)
 8001e96:	685a      	ldr	r2, [r3, #4]
 8001e98:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	bf8c      	ite	hi
 8001ea4:	2301      	movhi	r3, #1
 8001ea6:	2300      	movls	r3, #0
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d1f2      	bne.n	8001e94 <main+0x120>
 8001eae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001eb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001ebc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001ec0:	d3cc      	bcc.n	8001e5c <main+0xe8>
	i2c_lcd_clear();
 8001ec2:	f7ff fc85 	bl	80017d0 <i2c_lcd_clear>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001ec6:	bf00      	nop
 8001ec8:	e7fd      	b.n	8001ec6 <main+0x152>
 8001eca:	bf00      	nop
 8001ecc:	08003988 	.word	0x08003988
 8001ed0:	08003994 	.word	0x08003994
 8001ed4:	080039a4 	.word	0x080039a4
 8001ed8:	e000edf0 	.word	0xe000edf0
 8001edc:	e0001000 	.word	0xe0001000
 8001ee0:	431bde83 	.word	0x431bde83

08001ee4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b094      	sub	sp, #80	@ 0x50
 8001ee8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001eea:	f107 0320 	add.w	r3, r7, #32
 8001eee:	2230      	movs	r2, #48	@ 0x30
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f001 fc34 	bl	8003760 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ef8:	f107 030c 	add.w	r3, r7, #12
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	605a      	str	r2, [r3, #4]
 8001f02:	609a      	str	r2, [r3, #8]
 8001f04:	60da      	str	r2, [r3, #12]
 8001f06:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f08:	2300      	movs	r3, #0
 8001f0a:	60bb      	str	r3, [r7, #8]
 8001f0c:	4b28      	ldr	r3, [pc, #160]	@ (8001fb0 <_Z18SystemClock_Configv+0xcc>)
 8001f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f10:	4a27      	ldr	r2, [pc, #156]	@ (8001fb0 <_Z18SystemClock_Configv+0xcc>)
 8001f12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f16:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f18:	4b25      	ldr	r3, [pc, #148]	@ (8001fb0 <_Z18SystemClock_Configv+0xcc>)
 8001f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f20:	60bb      	str	r3, [r7, #8]
 8001f22:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f24:	2300      	movs	r3, #0
 8001f26:	607b      	str	r3, [r7, #4]
 8001f28:	4b22      	ldr	r3, [pc, #136]	@ (8001fb4 <_Z18SystemClock_Configv+0xd0>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001f30:	4a20      	ldr	r2, [pc, #128]	@ (8001fb4 <_Z18SystemClock_Configv+0xd0>)
 8001f32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f36:	6013      	str	r3, [r2, #0]
 8001f38:	4b1e      	ldr	r3, [pc, #120]	@ (8001fb4 <_Z18SystemClock_Configv+0xd0>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001f40:	607b      	str	r3, [r7, #4]
 8001f42:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f44:	2302      	movs	r3, #2
 8001f46:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f4c:	2310      	movs	r3, #16
 8001f4e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001f50:	2300      	movs	r3, #0
 8001f52:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f54:	f107 0320 	add.w	r3, r7, #32
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f000 fb71 	bl	8002640 <HAL_RCC_OscConfig>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	bf14      	ite	ne
 8001f64:	2301      	movne	r3, #1
 8001f66:	2300      	moveq	r3, #0
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <_Z18SystemClock_Configv+0x8e>
  {
    Error_Handler();
 8001f6e:	f000 f823 	bl	8001fb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f72:	230f      	movs	r3, #15
 8001f74:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001f76:	2300      	movs	r3, #0
 8001f78:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f82:	2300      	movs	r3, #0
 8001f84:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001f86:	f107 030c 	add.w	r3, r7, #12
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f000 fdcf 	bl	8002b30 <HAL_RCC_ClockConfig>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	bf14      	ite	ne
 8001f98:	2301      	movne	r3, #1
 8001f9a:	2300      	moveq	r3, #0
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <_Z18SystemClock_Configv+0xc2>
  {
    Error_Handler();
 8001fa2:	f000 f809 	bl	8001fb8 <Error_Handler>
  }
}
 8001fa6:	bf00      	nop
 8001fa8:	3750      	adds	r7, #80	@ 0x50
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	40023800 	.word	0x40023800
 8001fb4:	40007000 	.word	0x40007000

08001fb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fbc:	b672      	cpsid	i
}
 8001fbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fc0:	bf00      	nop
 8001fc2:	e7fd      	b.n	8001fc0 <Error_Handler+0x8>

08001fc4 <_ZNSt15__new_allocatorIcED1Ev>:
#if __cplusplus >= 201103L
      __new_allocator& operator=(const __new_allocator&) = default;
#endif

#if __cplusplus <= 201703L
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr

08001fda <Get_Output_CLK>:

uint16_t AHB_Prescaler[8] = {2,4,8,16,64,128,256,512};
uint8_t APB1_Prescaler[4] = {2,4,8,16};
uint8_t APB2_Prescaler[4] = {2,4,8,16};

uint32_t Get_Output_CLK(){
 8001fda:	b480      	push	{r7}
 8001fdc:	af00      	add	r7, sp, #0
    return 0;
 8001fde:	2300      	movs	r3, #0
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
	...

08001fec <RCC_GetPCLK1Value>:
uint32_t RCC_GetPCLK1Value(void){
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
    uint32_t pclk1, SystemClk;
    uint8_t clksrc, temp, ahbp, apb1;
    clksrc = (RCC->CFGR >> 2) & 0x3;
 8001ff2:	4b22      	ldr	r3, [pc, #136]	@ (800207c <RCC_GetPCLK1Value+0x90>)
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	089b      	lsrs	r3, r3, #2
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	f003 0303 	and.w	r3, r3, #3
 8001ffe:	727b      	strb	r3, [r7, #9]
    if(clksrc == 0){
 8002000:	7a7b      	ldrb	r3, [r7, #9]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d102      	bne.n	800200c <RCC_GetPCLK1Value+0x20>
        SystemClk = 16000000; // HSI = 16MHz
 8002006:	4b1e      	ldr	r3, [pc, #120]	@ (8002080 <RCC_GetPCLK1Value+0x94>)
 8002008:	60fb      	str	r3, [r7, #12]
 800200a:	e00b      	b.n	8002024 <RCC_GetPCLK1Value+0x38>
    }
    else if(clksrc == 1){
 800200c:	7a7b      	ldrb	r3, [r7, #9]
 800200e:	2b01      	cmp	r3, #1
 8002010:	d102      	bne.n	8002018 <RCC_GetPCLK1Value+0x2c>
        SystemClk = 8000000; // HSE optional
 8002012:	4b1c      	ldr	r3, [pc, #112]	@ (8002084 <RCC_GetPCLK1Value+0x98>)
 8002014:	60fb      	str	r3, [r7, #12]
 8002016:	e005      	b.n	8002024 <RCC_GetPCLK1Value+0x38>
    }
    else if(clksrc == 2){
 8002018:	7a7b      	ldrb	r3, [r7, #9]
 800201a:	2b02      	cmp	r3, #2
 800201c:	d102      	bne.n	8002024 <RCC_GetPCLK1Value+0x38>
        SystemClk = Get_Output_CLK();
 800201e:	f7ff ffdc 	bl	8001fda <Get_Output_CLK>
 8002022:	60f8      	str	r0, [r7, #12]
    }

    // AHB
    temp = (RCC->CFGR >> 4) & 0xFF;
 8002024:	4b15      	ldr	r3, [pc, #84]	@ (800207c <RCC_GetPCLK1Value+0x90>)
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	091b      	lsrs	r3, r3, #4
 800202a:	723b      	strb	r3, [r7, #8]
    if(temp < 8){
 800202c:	7a3b      	ldrb	r3, [r7, #8]
 800202e:	2b07      	cmp	r3, #7
 8002030:	d802      	bhi.n	8002038 <RCC_GetPCLK1Value+0x4c>
        ahbp = 1;
 8002032:	2301      	movs	r3, #1
 8002034:	72fb      	strb	r3, [r7, #11]
 8002036:	e005      	b.n	8002044 <RCC_GetPCLK1Value+0x58>
    }
    else {
        ahbp = AHB_Prescaler[temp - 8];
 8002038:	7a3b      	ldrb	r3, [r7, #8]
 800203a:	3b08      	subs	r3, #8
 800203c:	4a12      	ldr	r2, [pc, #72]	@ (8002088 <RCC_GetPCLK1Value+0x9c>)
 800203e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002042:	72fb      	strb	r3, [r7, #11]
    }

    // APB1
    temp = (RCC->CFGR >> 10) & 0xFF;
 8002044:	4b0d      	ldr	r3, [pc, #52]	@ (800207c <RCC_GetPCLK1Value+0x90>)
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	0a9b      	lsrs	r3, r3, #10
 800204a:	723b      	strb	r3, [r7, #8]
    if(temp < 4){
 800204c:	7a3b      	ldrb	r3, [r7, #8]
 800204e:	2b03      	cmp	r3, #3
 8002050:	d802      	bhi.n	8002058 <RCC_GetPCLK1Value+0x6c>
        apb1 = 1;
 8002052:	2301      	movs	r3, #1
 8002054:	72bb      	strb	r3, [r7, #10]
 8002056:	e004      	b.n	8002062 <RCC_GetPCLK1Value+0x76>
    }
    else {
    	apb1 = APB1_Prescaler[temp - 4];
 8002058:	7a3b      	ldrb	r3, [r7, #8]
 800205a:	3b04      	subs	r3, #4
 800205c:	4a0b      	ldr	r2, [pc, #44]	@ (800208c <RCC_GetPCLK1Value+0xa0>)
 800205e:	5cd3      	ldrb	r3, [r2, r3]
 8002060:	72bb      	strb	r3, [r7, #10]
    }

    pclk1 = (SystemClk/ahbp) / apb1;
 8002062:	7afb      	ldrb	r3, [r7, #11]
 8002064:	68fa      	ldr	r2, [r7, #12]
 8002066:	fbb2 f2f3 	udiv	r2, r2, r3
 800206a:	7abb      	ldrb	r3, [r7, #10]
 800206c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002070:	607b      	str	r3, [r7, #4]
    return pclk1;
 8002072:	687b      	ldr	r3, [r7, #4]
}
 8002074:	4618      	mov	r0, r3
 8002076:	3710      	adds	r7, #16
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	40023800 	.word	0x40023800
 8002080:	00f42400 	.word	0x00f42400
 8002084:	007a1200 	.word	0x007a1200
 8002088:	20000000 	.word	0x20000000
 800208c:	20000010 	.word	0x20000010

08002090 <RCC_GetSystemClock>:
    pclk2 = (SystemClk/ahbp) / apb2;
    return pclk2;
}

// Delay Function
uint32_t RCC_GetSystemClock(void) {
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
    uint8_t clksrc = (RCC->CFGR >> 2) & 0x3;
 8002096:	4b0c      	ldr	r3, [pc, #48]	@ (80020c8 <RCC_GetSystemClock+0x38>)
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	089b      	lsrs	r3, r3, #2
 800209c:	b2db      	uxtb	r3, r3
 800209e:	f003 0303 	and.w	r3, r3, #3
 80020a2:	71fb      	strb	r3, [r7, #7]
    if (clksrc == 0) return 16000000U;     // HSI
 80020a4:	79fb      	ldrb	r3, [r7, #7]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d101      	bne.n	80020ae <RCC_GetSystemClock+0x1e>
 80020aa:	4b08      	ldr	r3, [pc, #32]	@ (80020cc <RCC_GetSystemClock+0x3c>)
 80020ac:	e007      	b.n	80020be <RCC_GetSystemClock+0x2e>
    if (clksrc == 1) return 8000000U;      // HSE
 80020ae:	79fb      	ldrb	r3, [r7, #7]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d101      	bne.n	80020b8 <RCC_GetSystemClock+0x28>
 80020b4:	4b06      	ldr	r3, [pc, #24]	@ (80020d0 <RCC_GetSystemClock+0x40>)
 80020b6:	e002      	b.n	80020be <RCC_GetSystemClock+0x2e>
    return Get_Output_CLK();              // PLL
 80020b8:	f7ff ff8f 	bl	8001fda <Get_Output_CLK>
 80020bc:	4603      	mov	r3, r0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	40023800 	.word	0x40023800
 80020cc:	00f42400 	.word	0x00f42400
 80020d0:	007a1200 	.word	0x007a1200

080020d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020da:	2300      	movs	r3, #0
 80020dc:	607b      	str	r3, [r7, #4]
 80020de:	4b10      	ldr	r3, [pc, #64]	@ (8002120 <HAL_MspInit+0x4c>)
 80020e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020e2:	4a0f      	ldr	r2, [pc, #60]	@ (8002120 <HAL_MspInit+0x4c>)
 80020e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80020ea:	4b0d      	ldr	r3, [pc, #52]	@ (8002120 <HAL_MspInit+0x4c>)
 80020ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020f2:	607b      	str	r3, [r7, #4]
 80020f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020f6:	2300      	movs	r3, #0
 80020f8:	603b      	str	r3, [r7, #0]
 80020fa:	4b09      	ldr	r3, [pc, #36]	@ (8002120 <HAL_MspInit+0x4c>)
 80020fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020fe:	4a08      	ldr	r2, [pc, #32]	@ (8002120 <HAL_MspInit+0x4c>)
 8002100:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002104:	6413      	str	r3, [r2, #64]	@ 0x40
 8002106:	4b06      	ldr	r3, [pc, #24]	@ (8002120 <HAL_MspInit+0x4c>)
 8002108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800210a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800210e:	603b      	str	r3, [r7, #0]
 8002110:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002112:	bf00      	nop
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	40023800 	.word	0x40023800

08002124 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002128:	bf00      	nop
 800212a:	e7fd      	b.n	8002128 <NMI_Handler+0x4>

0800212c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002130:	bf00      	nop
 8002132:	e7fd      	b.n	8002130 <HardFault_Handler+0x4>

08002134 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002138:	bf00      	nop
 800213a:	e7fd      	b.n	8002138 <MemManage_Handler+0x4>

0800213c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002140:	bf00      	nop
 8002142:	e7fd      	b.n	8002140 <BusFault_Handler+0x4>

08002144 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002148:	bf00      	nop
 800214a:	e7fd      	b.n	8002148 <UsageFault_Handler+0x4>

0800214c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002150:	bf00      	nop
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr

0800215a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800215a:	b480      	push	{r7}
 800215c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800215e:	bf00      	nop
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800216c:	bf00      	nop
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr

08002176 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800217a:	f000 f95b 	bl	8002434 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800217e:	bf00      	nop
 8002180:	bd80      	pop	{r7, pc}

08002182 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002182:	b480      	push	{r7}
 8002184:	af00      	add	r7, sp, #0
  return 1;
 8002186:	2301      	movs	r3, #1
}
 8002188:	4618      	mov	r0, r3
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr

08002192 <_kill>:

int _kill(int pid, int sig)
{
 8002192:	b580      	push	{r7, lr}
 8002194:	b082      	sub	sp, #8
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
 800219a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800219c:	f001 fb3c 	bl	8003818 <__errno>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2216      	movs	r2, #22
 80021a4:	601a      	str	r2, [r3, #0]
  return -1;
 80021a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <_exit>:

void _exit (int status)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b082      	sub	sp, #8
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80021ba:	f04f 31ff 	mov.w	r1, #4294967295
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f7ff ffe7 	bl	8002192 <_kill>
  while (1) {}    /* Make sure we hang here */
 80021c4:	bf00      	nop
 80021c6:	e7fd      	b.n	80021c4 <_exit+0x12>

080021c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b086      	sub	sp, #24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021d0:	4a14      	ldr	r2, [pc, #80]	@ (8002224 <_sbrk+0x5c>)
 80021d2:	4b15      	ldr	r3, [pc, #84]	@ (8002228 <_sbrk+0x60>)
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021dc:	4b13      	ldr	r3, [pc, #76]	@ (800222c <_sbrk+0x64>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d102      	bne.n	80021ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021e4:	4b11      	ldr	r3, [pc, #68]	@ (800222c <_sbrk+0x64>)
 80021e6:	4a12      	ldr	r2, [pc, #72]	@ (8002230 <_sbrk+0x68>)
 80021e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021ea:	4b10      	ldr	r3, [pc, #64]	@ (800222c <_sbrk+0x64>)
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4413      	add	r3, r2
 80021f2:	693a      	ldr	r2, [r7, #16]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d207      	bcs.n	8002208 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021f8:	f001 fb0e 	bl	8003818 <__errno>
 80021fc:	4603      	mov	r3, r0
 80021fe:	220c      	movs	r2, #12
 8002200:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002202:	f04f 33ff 	mov.w	r3, #4294967295
 8002206:	e009      	b.n	800221c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002208:	4b08      	ldr	r3, [pc, #32]	@ (800222c <_sbrk+0x64>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800220e:	4b07      	ldr	r3, [pc, #28]	@ (800222c <_sbrk+0x64>)
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4413      	add	r3, r2
 8002216:	4a05      	ldr	r2, [pc, #20]	@ (800222c <_sbrk+0x64>)
 8002218:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800221a:	68fb      	ldr	r3, [r7, #12]
}
 800221c:	4618      	mov	r0, r3
 800221e:	3718      	adds	r7, #24
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	20018000 	.word	0x20018000
 8002228:	00000400 	.word	0x00000400
 800222c:	20000140 	.word	0x20000140
 8002230:	200002e0 	.word	0x200002e0

08002234 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002238:	4b06      	ldr	r3, [pc, #24]	@ (8002254 <SystemInit+0x20>)
 800223a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800223e:	4a05      	ldr	r2, [pc, #20]	@ (8002254 <SystemInit+0x20>)
 8002240:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002244:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002248:	bf00      	nop
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	e000ed00 	.word	0xe000ed00

08002258 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b086      	sub	sp, #24
 800225c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800225e:	f107 0308 	add.w	r3, r7, #8
 8002262:	2200      	movs	r2, #0
 8002264:	601a      	str	r2, [r3, #0]
 8002266:	605a      	str	r2, [r3, #4]
 8002268:	609a      	str	r2, [r3, #8]
 800226a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800226c:	463b      	mov	r3, r7
 800226e:	2200      	movs	r2, #0
 8002270:	601a      	str	r2, [r3, #0]
 8002272:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002274:	4b1e      	ldr	r3, [pc, #120]	@ (80022f0 <MX_TIM1_Init+0x98>)
 8002276:	4a1f      	ldr	r2, [pc, #124]	@ (80022f4 <MX_TIM1_Init+0x9c>)
 8002278:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800227a:	4b1d      	ldr	r3, [pc, #116]	@ (80022f0 <MX_TIM1_Init+0x98>)
 800227c:	2200      	movs	r2, #0
 800227e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002280:	4b1b      	ldr	r3, [pc, #108]	@ (80022f0 <MX_TIM1_Init+0x98>)
 8002282:	2200      	movs	r2, #0
 8002284:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002286:	4b1a      	ldr	r3, [pc, #104]	@ (80022f0 <MX_TIM1_Init+0x98>)
 8002288:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800228c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800228e:	4b18      	ldr	r3, [pc, #96]	@ (80022f0 <MX_TIM1_Init+0x98>)
 8002290:	2200      	movs	r2, #0
 8002292:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002294:	4b16      	ldr	r3, [pc, #88]	@ (80022f0 <MX_TIM1_Init+0x98>)
 8002296:	2200      	movs	r2, #0
 8002298:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800229a:	4b15      	ldr	r3, [pc, #84]	@ (80022f0 <MX_TIM1_Init+0x98>)
 800229c:	2200      	movs	r2, #0
 800229e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80022a0:	4813      	ldr	r0, [pc, #76]	@ (80022f0 <MX_TIM1_Init+0x98>)
 80022a2:	f000 fdf1 	bl	8002e88 <HAL_TIM_Base_Init>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d001      	beq.n	80022b0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80022ac:	f7ff fe84 	bl	8001fb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80022b6:	f107 0308 	add.w	r3, r7, #8
 80022ba:	4619      	mov	r1, r3
 80022bc:	480c      	ldr	r0, [pc, #48]	@ (80022f0 <MX_TIM1_Init+0x98>)
 80022be:	f000 fe32 	bl	8002f26 <HAL_TIM_ConfigClockSource>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d001      	beq.n	80022cc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80022c8:	f7ff fe76 	bl	8001fb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022cc:	2300      	movs	r3, #0
 80022ce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022d0:	2300      	movs	r3, #0
 80022d2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80022d4:	463b      	mov	r3, r7
 80022d6:	4619      	mov	r1, r3
 80022d8:	4805      	ldr	r0, [pc, #20]	@ (80022f0 <MX_TIM1_Init+0x98>)
 80022da:	f001 f80b 	bl	80032f4 <HAL_TIMEx_MasterConfigSynchronization>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d001      	beq.n	80022e8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80022e4:	f7ff fe68 	bl	8001fb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80022e8:	bf00      	nop
 80022ea:	3718      	adds	r7, #24
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	20000144 	.word	0x20000144
 80022f4:	40010000 	.word	0x40010000

080022f8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b085      	sub	sp, #20
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a0b      	ldr	r2, [pc, #44]	@ (8002334 <HAL_TIM_Base_MspInit+0x3c>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d10d      	bne.n	8002326 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800230a:	2300      	movs	r3, #0
 800230c:	60fb      	str	r3, [r7, #12]
 800230e:	4b0a      	ldr	r3, [pc, #40]	@ (8002338 <HAL_TIM_Base_MspInit+0x40>)
 8002310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002312:	4a09      	ldr	r2, [pc, #36]	@ (8002338 <HAL_TIM_Base_MspInit+0x40>)
 8002314:	f043 0301 	orr.w	r3, r3, #1
 8002318:	6453      	str	r3, [r2, #68]	@ 0x44
 800231a:	4b07      	ldr	r3, [pc, #28]	@ (8002338 <HAL_TIM_Base_MspInit+0x40>)
 800231c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	60fb      	str	r3, [r7, #12]
 8002324:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002326:	bf00      	nop
 8002328:	3714      	adds	r7, #20
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	40010000 	.word	0x40010000
 8002338:	40023800 	.word	0x40023800

0800233c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800233c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002374 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002340:	f7ff ff78 	bl	8002234 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002344:	480c      	ldr	r0, [pc, #48]	@ (8002378 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002346:	490d      	ldr	r1, [pc, #52]	@ (800237c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002348:	4a0d      	ldr	r2, [pc, #52]	@ (8002380 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800234a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800234c:	e002      	b.n	8002354 <LoopCopyDataInit>

0800234e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800234e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002350:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002352:	3304      	adds	r3, #4

08002354 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002354:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002356:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002358:	d3f9      	bcc.n	800234e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800235a:	4a0a      	ldr	r2, [pc, #40]	@ (8002384 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800235c:	4c0a      	ldr	r4, [pc, #40]	@ (8002388 <LoopFillZerobss+0x22>)
  movs r3, #0
 800235e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002360:	e001      	b.n	8002366 <LoopFillZerobss>

08002362 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002362:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002364:	3204      	adds	r2, #4

08002366 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002366:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002368:	d3fb      	bcc.n	8002362 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800236a:	f001 fa5b 	bl	8003824 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800236e:	f7ff fd01 	bl	8001d74 <main>
  bx  lr    
 8002372:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002374:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002378:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800237c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002380:	08003a1c 	.word	0x08003a1c
  ldr r2, =_sbss
 8002384:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002388:	200002dc 	.word	0x200002dc

0800238c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800238c:	e7fe      	b.n	800238c <ADC_IRQHandler>
	...

08002390 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002394:	4b0e      	ldr	r3, [pc, #56]	@ (80023d0 <HAL_Init+0x40>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a0d      	ldr	r2, [pc, #52]	@ (80023d0 <HAL_Init+0x40>)
 800239a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800239e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023a0:	4b0b      	ldr	r3, [pc, #44]	@ (80023d0 <HAL_Init+0x40>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a0a      	ldr	r2, [pc, #40]	@ (80023d0 <HAL_Init+0x40>)
 80023a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80023aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023ac:	4b08      	ldr	r3, [pc, #32]	@ (80023d0 <HAL_Init+0x40>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a07      	ldr	r2, [pc, #28]	@ (80023d0 <HAL_Init+0x40>)
 80023b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023b8:	2003      	movs	r0, #3
 80023ba:	f000 f90d 	bl	80025d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023be:	200f      	movs	r0, #15
 80023c0:	f000 f808 	bl	80023d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023c4:	f7ff fe86 	bl	80020d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	40023c00 	.word	0x40023c00

080023d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023dc:	4b12      	ldr	r3, [pc, #72]	@ (8002428 <HAL_InitTick+0x54>)
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	4b12      	ldr	r3, [pc, #72]	@ (800242c <HAL_InitTick+0x58>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	4619      	mov	r1, r3
 80023e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80023ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f2:	4618      	mov	r0, r3
 80023f4:	f000 f917 	bl	8002626 <HAL_SYSTICK_Config>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e00e      	b.n	8002420 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2b0f      	cmp	r3, #15
 8002406:	d80a      	bhi.n	800241e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002408:	2200      	movs	r2, #0
 800240a:	6879      	ldr	r1, [r7, #4]
 800240c:	f04f 30ff 	mov.w	r0, #4294967295
 8002410:	f000 f8ed 	bl	80025ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002414:	4a06      	ldr	r2, [pc, #24]	@ (8002430 <HAL_InitTick+0x5c>)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800241a:	2300      	movs	r3, #0
 800241c:	e000      	b.n	8002420 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
}
 8002420:	4618      	mov	r0, r3
 8002422:	3708      	adds	r7, #8
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	20000014 	.word	0x20000014
 800242c:	2000001c 	.word	0x2000001c
 8002430:	20000018 	.word	0x20000018

08002434 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002438:	4b06      	ldr	r3, [pc, #24]	@ (8002454 <HAL_IncTick+0x20>)
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	461a      	mov	r2, r3
 800243e:	4b06      	ldr	r3, [pc, #24]	@ (8002458 <HAL_IncTick+0x24>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4413      	add	r3, r2
 8002444:	4a04      	ldr	r2, [pc, #16]	@ (8002458 <HAL_IncTick+0x24>)
 8002446:	6013      	str	r3, [r2, #0]
}
 8002448:	bf00      	nop
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	2000001c 	.word	0x2000001c
 8002458:	2000018c 	.word	0x2000018c

0800245c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  return uwTick;
 8002460:	4b03      	ldr	r3, [pc, #12]	@ (8002470 <HAL_GetTick+0x14>)
 8002462:	681b      	ldr	r3, [r3, #0]
}
 8002464:	4618      	mov	r0, r3
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	2000018c 	.word	0x2000018c

08002474 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002474:	b480      	push	{r7}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f003 0307 	and.w	r3, r3, #7
 8002482:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002484:	4b0c      	ldr	r3, [pc, #48]	@ (80024b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800248a:	68ba      	ldr	r2, [r7, #8]
 800248c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002490:	4013      	ands	r3, r2
 8002492:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800249c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80024a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024a6:	4a04      	ldr	r2, [pc, #16]	@ (80024b8 <__NVIC_SetPriorityGrouping+0x44>)
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	60d3      	str	r3, [r2, #12]
}
 80024ac:	bf00      	nop
 80024ae:	3714      	adds	r7, #20
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr
 80024b8:	e000ed00 	.word	0xe000ed00

080024bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024c0:	4b04      	ldr	r3, [pc, #16]	@ (80024d4 <__NVIC_GetPriorityGrouping+0x18>)
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	0a1b      	lsrs	r3, r3, #8
 80024c6:	f003 0307 	and.w	r3, r3, #7
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr
 80024d4:	e000ed00 	.word	0xe000ed00

080024d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	4603      	mov	r3, r0
 80024e0:	6039      	str	r1, [r7, #0]
 80024e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	db0a      	blt.n	8002502 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	b2da      	uxtb	r2, r3
 80024f0:	490c      	ldr	r1, [pc, #48]	@ (8002524 <__NVIC_SetPriority+0x4c>)
 80024f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f6:	0112      	lsls	r2, r2, #4
 80024f8:	b2d2      	uxtb	r2, r2
 80024fa:	440b      	add	r3, r1
 80024fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002500:	e00a      	b.n	8002518 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	b2da      	uxtb	r2, r3
 8002506:	4908      	ldr	r1, [pc, #32]	@ (8002528 <__NVIC_SetPriority+0x50>)
 8002508:	79fb      	ldrb	r3, [r7, #7]
 800250a:	f003 030f 	and.w	r3, r3, #15
 800250e:	3b04      	subs	r3, #4
 8002510:	0112      	lsls	r2, r2, #4
 8002512:	b2d2      	uxtb	r2, r2
 8002514:	440b      	add	r3, r1
 8002516:	761a      	strb	r2, [r3, #24]
}
 8002518:	bf00      	nop
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr
 8002524:	e000e100 	.word	0xe000e100
 8002528:	e000ed00 	.word	0xe000ed00

0800252c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800252c:	b480      	push	{r7}
 800252e:	b089      	sub	sp, #36	@ 0x24
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	f003 0307 	and.w	r3, r3, #7
 800253e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	f1c3 0307 	rsb	r3, r3, #7
 8002546:	2b04      	cmp	r3, #4
 8002548:	bf28      	it	cs
 800254a:	2304      	movcs	r3, #4
 800254c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	3304      	adds	r3, #4
 8002552:	2b06      	cmp	r3, #6
 8002554:	d902      	bls.n	800255c <NVIC_EncodePriority+0x30>
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	3b03      	subs	r3, #3
 800255a:	e000      	b.n	800255e <NVIC_EncodePriority+0x32>
 800255c:	2300      	movs	r3, #0
 800255e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002560:	f04f 32ff 	mov.w	r2, #4294967295
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	fa02 f303 	lsl.w	r3, r2, r3
 800256a:	43da      	mvns	r2, r3
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	401a      	ands	r2, r3
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002574:	f04f 31ff 	mov.w	r1, #4294967295
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	fa01 f303 	lsl.w	r3, r1, r3
 800257e:	43d9      	mvns	r1, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002584:	4313      	orrs	r3, r2
         );
}
 8002586:	4618      	mov	r0, r3
 8002588:	3724      	adds	r7, #36	@ 0x24
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
	...

08002594 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	3b01      	subs	r3, #1
 80025a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80025a4:	d301      	bcc.n	80025aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025a6:	2301      	movs	r3, #1
 80025a8:	e00f      	b.n	80025ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025aa:	4a0a      	ldr	r2, [pc, #40]	@ (80025d4 <SysTick_Config+0x40>)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	3b01      	subs	r3, #1
 80025b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025b2:	210f      	movs	r1, #15
 80025b4:	f04f 30ff 	mov.w	r0, #4294967295
 80025b8:	f7ff ff8e 	bl	80024d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025bc:	4b05      	ldr	r3, [pc, #20]	@ (80025d4 <SysTick_Config+0x40>)
 80025be:	2200      	movs	r2, #0
 80025c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025c2:	4b04      	ldr	r3, [pc, #16]	@ (80025d4 <SysTick_Config+0x40>)
 80025c4:	2207      	movs	r2, #7
 80025c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	e000e010 	.word	0xe000e010

080025d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f7ff ff47 	bl	8002474 <__NVIC_SetPriorityGrouping>
}
 80025e6:	bf00      	nop
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}

080025ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025ee:	b580      	push	{r7, lr}
 80025f0:	b086      	sub	sp, #24
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	4603      	mov	r3, r0
 80025f6:	60b9      	str	r1, [r7, #8]
 80025f8:	607a      	str	r2, [r7, #4]
 80025fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025fc:	2300      	movs	r3, #0
 80025fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002600:	f7ff ff5c 	bl	80024bc <__NVIC_GetPriorityGrouping>
 8002604:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	68b9      	ldr	r1, [r7, #8]
 800260a:	6978      	ldr	r0, [r7, #20]
 800260c:	f7ff ff8e 	bl	800252c <NVIC_EncodePriority>
 8002610:	4602      	mov	r2, r0
 8002612:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002616:	4611      	mov	r1, r2
 8002618:	4618      	mov	r0, r3
 800261a:	f7ff ff5d 	bl	80024d8 <__NVIC_SetPriority>
}
 800261e:	bf00      	nop
 8002620:	3718      	adds	r7, #24
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}

08002626 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002626:	b580      	push	{r7, lr}
 8002628:	b082      	sub	sp, #8
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f7ff ffb0 	bl	8002594 <SysTick_Config>
 8002634:	4603      	mov	r3, r0
}
 8002636:	4618      	mov	r0, r3
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
	...

08002640 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b086      	sub	sp, #24
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e267      	b.n	8002b22 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	2b00      	cmp	r3, #0
 800265c:	d075      	beq.n	800274a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800265e:	4b88      	ldr	r3, [pc, #544]	@ (8002880 <HAL_RCC_OscConfig+0x240>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f003 030c 	and.w	r3, r3, #12
 8002666:	2b04      	cmp	r3, #4
 8002668:	d00c      	beq.n	8002684 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800266a:	4b85      	ldr	r3, [pc, #532]	@ (8002880 <HAL_RCC_OscConfig+0x240>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002672:	2b08      	cmp	r3, #8
 8002674:	d112      	bne.n	800269c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002676:	4b82      	ldr	r3, [pc, #520]	@ (8002880 <HAL_RCC_OscConfig+0x240>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800267e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002682:	d10b      	bne.n	800269c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002684:	4b7e      	ldr	r3, [pc, #504]	@ (8002880 <HAL_RCC_OscConfig+0x240>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d05b      	beq.n	8002748 <HAL_RCC_OscConfig+0x108>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d157      	bne.n	8002748 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e242      	b.n	8002b22 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026a4:	d106      	bne.n	80026b4 <HAL_RCC_OscConfig+0x74>
 80026a6:	4b76      	ldr	r3, [pc, #472]	@ (8002880 <HAL_RCC_OscConfig+0x240>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a75      	ldr	r2, [pc, #468]	@ (8002880 <HAL_RCC_OscConfig+0x240>)
 80026ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026b0:	6013      	str	r3, [r2, #0]
 80026b2:	e01d      	b.n	80026f0 <HAL_RCC_OscConfig+0xb0>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80026bc:	d10c      	bne.n	80026d8 <HAL_RCC_OscConfig+0x98>
 80026be:	4b70      	ldr	r3, [pc, #448]	@ (8002880 <HAL_RCC_OscConfig+0x240>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a6f      	ldr	r2, [pc, #444]	@ (8002880 <HAL_RCC_OscConfig+0x240>)
 80026c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026c8:	6013      	str	r3, [r2, #0]
 80026ca:	4b6d      	ldr	r3, [pc, #436]	@ (8002880 <HAL_RCC_OscConfig+0x240>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a6c      	ldr	r2, [pc, #432]	@ (8002880 <HAL_RCC_OscConfig+0x240>)
 80026d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026d4:	6013      	str	r3, [r2, #0]
 80026d6:	e00b      	b.n	80026f0 <HAL_RCC_OscConfig+0xb0>
 80026d8:	4b69      	ldr	r3, [pc, #420]	@ (8002880 <HAL_RCC_OscConfig+0x240>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a68      	ldr	r2, [pc, #416]	@ (8002880 <HAL_RCC_OscConfig+0x240>)
 80026de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026e2:	6013      	str	r3, [r2, #0]
 80026e4:	4b66      	ldr	r3, [pc, #408]	@ (8002880 <HAL_RCC_OscConfig+0x240>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a65      	ldr	r2, [pc, #404]	@ (8002880 <HAL_RCC_OscConfig+0x240>)
 80026ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d013      	beq.n	8002720 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f8:	f7ff feb0 	bl	800245c <HAL_GetTick>
 80026fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026fe:	e008      	b.n	8002712 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002700:	f7ff feac 	bl	800245c <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b64      	cmp	r3, #100	@ 0x64
 800270c:	d901      	bls.n	8002712 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e207      	b.n	8002b22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002712:	4b5b      	ldr	r3, [pc, #364]	@ (8002880 <HAL_RCC_OscConfig+0x240>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d0f0      	beq.n	8002700 <HAL_RCC_OscConfig+0xc0>
 800271e:	e014      	b.n	800274a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002720:	f7ff fe9c 	bl	800245c <HAL_GetTick>
 8002724:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002726:	e008      	b.n	800273a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002728:	f7ff fe98 	bl	800245c <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b64      	cmp	r3, #100	@ 0x64
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e1f3      	b.n	8002b22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800273a:	4b51      	ldr	r3, [pc, #324]	@ (8002880 <HAL_RCC_OscConfig+0x240>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d1f0      	bne.n	8002728 <HAL_RCC_OscConfig+0xe8>
 8002746:	e000      	b.n	800274a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002748:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d063      	beq.n	800281e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002756:	4b4a      	ldr	r3, [pc, #296]	@ (8002880 <HAL_RCC_OscConfig+0x240>)
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f003 030c 	and.w	r3, r3, #12
 800275e:	2b00      	cmp	r3, #0
 8002760:	d00b      	beq.n	800277a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002762:	4b47      	ldr	r3, [pc, #284]	@ (8002880 <HAL_RCC_OscConfig+0x240>)
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800276a:	2b08      	cmp	r3, #8
 800276c:	d11c      	bne.n	80027a8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800276e:	4b44      	ldr	r3, [pc, #272]	@ (8002880 <HAL_RCC_OscConfig+0x240>)
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d116      	bne.n	80027a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800277a:	4b41      	ldr	r3, [pc, #260]	@ (8002880 <HAL_RCC_OscConfig+0x240>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d005      	beq.n	8002792 <HAL_RCC_OscConfig+0x152>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d001      	beq.n	8002792 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e1c7      	b.n	8002b22 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002792:	4b3b      	ldr	r3, [pc, #236]	@ (8002880 <HAL_RCC_OscConfig+0x240>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	00db      	lsls	r3, r3, #3
 80027a0:	4937      	ldr	r1, [pc, #220]	@ (8002880 <HAL_RCC_OscConfig+0x240>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027a6:	e03a      	b.n	800281e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d020      	beq.n	80027f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027b0:	4b34      	ldr	r3, [pc, #208]	@ (8002884 <HAL_RCC_OscConfig+0x244>)
 80027b2:	2201      	movs	r2, #1
 80027b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b6:	f7ff fe51 	bl	800245c <HAL_GetTick>
 80027ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027bc:	e008      	b.n	80027d0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027be:	f7ff fe4d 	bl	800245c <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d901      	bls.n	80027d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e1a8      	b.n	8002b22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027d0:	4b2b      	ldr	r3, [pc, #172]	@ (8002880 <HAL_RCC_OscConfig+0x240>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0302 	and.w	r3, r3, #2
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d0f0      	beq.n	80027be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027dc:	4b28      	ldr	r3, [pc, #160]	@ (8002880 <HAL_RCC_OscConfig+0x240>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	00db      	lsls	r3, r3, #3
 80027ea:	4925      	ldr	r1, [pc, #148]	@ (8002880 <HAL_RCC_OscConfig+0x240>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	600b      	str	r3, [r1, #0]
 80027f0:	e015      	b.n	800281e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027f2:	4b24      	ldr	r3, [pc, #144]	@ (8002884 <HAL_RCC_OscConfig+0x244>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f8:	f7ff fe30 	bl	800245c <HAL_GetTick>
 80027fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027fe:	e008      	b.n	8002812 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002800:	f7ff fe2c 	bl	800245c <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b02      	cmp	r3, #2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e187      	b.n	8002b22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002812:	4b1b      	ldr	r3, [pc, #108]	@ (8002880 <HAL_RCC_OscConfig+0x240>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1f0      	bne.n	8002800 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0308 	and.w	r3, r3, #8
 8002826:	2b00      	cmp	r3, #0
 8002828:	d036      	beq.n	8002898 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	695b      	ldr	r3, [r3, #20]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d016      	beq.n	8002860 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002832:	4b15      	ldr	r3, [pc, #84]	@ (8002888 <HAL_RCC_OscConfig+0x248>)
 8002834:	2201      	movs	r2, #1
 8002836:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002838:	f7ff fe10 	bl	800245c <HAL_GetTick>
 800283c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800283e:	e008      	b.n	8002852 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002840:	f7ff fe0c 	bl	800245c <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b02      	cmp	r3, #2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e167      	b.n	8002b22 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002852:	4b0b      	ldr	r3, [pc, #44]	@ (8002880 <HAL_RCC_OscConfig+0x240>)
 8002854:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d0f0      	beq.n	8002840 <HAL_RCC_OscConfig+0x200>
 800285e:	e01b      	b.n	8002898 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002860:	4b09      	ldr	r3, [pc, #36]	@ (8002888 <HAL_RCC_OscConfig+0x248>)
 8002862:	2200      	movs	r2, #0
 8002864:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002866:	f7ff fdf9 	bl	800245c <HAL_GetTick>
 800286a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800286c:	e00e      	b.n	800288c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800286e:	f7ff fdf5 	bl	800245c <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	2b02      	cmp	r3, #2
 800287a:	d907      	bls.n	800288c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e150      	b.n	8002b22 <HAL_RCC_OscConfig+0x4e2>
 8002880:	40023800 	.word	0x40023800
 8002884:	42470000 	.word	0x42470000
 8002888:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800288c:	4b88      	ldr	r3, [pc, #544]	@ (8002ab0 <HAL_RCC_OscConfig+0x470>)
 800288e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002890:	f003 0302 	and.w	r3, r3, #2
 8002894:	2b00      	cmp	r3, #0
 8002896:	d1ea      	bne.n	800286e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0304 	and.w	r3, r3, #4
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f000 8097 	beq.w	80029d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028a6:	2300      	movs	r3, #0
 80028a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028aa:	4b81      	ldr	r3, [pc, #516]	@ (8002ab0 <HAL_RCC_OscConfig+0x470>)
 80028ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d10f      	bne.n	80028d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028b6:	2300      	movs	r3, #0
 80028b8:	60bb      	str	r3, [r7, #8]
 80028ba:	4b7d      	ldr	r3, [pc, #500]	@ (8002ab0 <HAL_RCC_OscConfig+0x470>)
 80028bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028be:	4a7c      	ldr	r2, [pc, #496]	@ (8002ab0 <HAL_RCC_OscConfig+0x470>)
 80028c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80028c6:	4b7a      	ldr	r3, [pc, #488]	@ (8002ab0 <HAL_RCC_OscConfig+0x470>)
 80028c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028ce:	60bb      	str	r3, [r7, #8]
 80028d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028d2:	2301      	movs	r3, #1
 80028d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d6:	4b77      	ldr	r3, [pc, #476]	@ (8002ab4 <HAL_RCC_OscConfig+0x474>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d118      	bne.n	8002914 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028e2:	4b74      	ldr	r3, [pc, #464]	@ (8002ab4 <HAL_RCC_OscConfig+0x474>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a73      	ldr	r2, [pc, #460]	@ (8002ab4 <HAL_RCC_OscConfig+0x474>)
 80028e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028ee:	f7ff fdb5 	bl	800245c <HAL_GetTick>
 80028f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f4:	e008      	b.n	8002908 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028f6:	f7ff fdb1 	bl	800245c <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	2b02      	cmp	r3, #2
 8002902:	d901      	bls.n	8002908 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e10c      	b.n	8002b22 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002908:	4b6a      	ldr	r3, [pc, #424]	@ (8002ab4 <HAL_RCC_OscConfig+0x474>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002910:	2b00      	cmp	r3, #0
 8002912:	d0f0      	beq.n	80028f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	2b01      	cmp	r3, #1
 800291a:	d106      	bne.n	800292a <HAL_RCC_OscConfig+0x2ea>
 800291c:	4b64      	ldr	r3, [pc, #400]	@ (8002ab0 <HAL_RCC_OscConfig+0x470>)
 800291e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002920:	4a63      	ldr	r2, [pc, #396]	@ (8002ab0 <HAL_RCC_OscConfig+0x470>)
 8002922:	f043 0301 	orr.w	r3, r3, #1
 8002926:	6713      	str	r3, [r2, #112]	@ 0x70
 8002928:	e01c      	b.n	8002964 <HAL_RCC_OscConfig+0x324>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	2b05      	cmp	r3, #5
 8002930:	d10c      	bne.n	800294c <HAL_RCC_OscConfig+0x30c>
 8002932:	4b5f      	ldr	r3, [pc, #380]	@ (8002ab0 <HAL_RCC_OscConfig+0x470>)
 8002934:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002936:	4a5e      	ldr	r2, [pc, #376]	@ (8002ab0 <HAL_RCC_OscConfig+0x470>)
 8002938:	f043 0304 	orr.w	r3, r3, #4
 800293c:	6713      	str	r3, [r2, #112]	@ 0x70
 800293e:	4b5c      	ldr	r3, [pc, #368]	@ (8002ab0 <HAL_RCC_OscConfig+0x470>)
 8002940:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002942:	4a5b      	ldr	r2, [pc, #364]	@ (8002ab0 <HAL_RCC_OscConfig+0x470>)
 8002944:	f043 0301 	orr.w	r3, r3, #1
 8002948:	6713      	str	r3, [r2, #112]	@ 0x70
 800294a:	e00b      	b.n	8002964 <HAL_RCC_OscConfig+0x324>
 800294c:	4b58      	ldr	r3, [pc, #352]	@ (8002ab0 <HAL_RCC_OscConfig+0x470>)
 800294e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002950:	4a57      	ldr	r2, [pc, #348]	@ (8002ab0 <HAL_RCC_OscConfig+0x470>)
 8002952:	f023 0301 	bic.w	r3, r3, #1
 8002956:	6713      	str	r3, [r2, #112]	@ 0x70
 8002958:	4b55      	ldr	r3, [pc, #340]	@ (8002ab0 <HAL_RCC_OscConfig+0x470>)
 800295a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800295c:	4a54      	ldr	r2, [pc, #336]	@ (8002ab0 <HAL_RCC_OscConfig+0x470>)
 800295e:	f023 0304 	bic.w	r3, r3, #4
 8002962:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d015      	beq.n	8002998 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800296c:	f7ff fd76 	bl	800245c <HAL_GetTick>
 8002970:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002972:	e00a      	b.n	800298a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002974:	f7ff fd72 	bl	800245c <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002982:	4293      	cmp	r3, r2
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e0cb      	b.n	8002b22 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800298a:	4b49      	ldr	r3, [pc, #292]	@ (8002ab0 <HAL_RCC_OscConfig+0x470>)
 800298c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d0ee      	beq.n	8002974 <HAL_RCC_OscConfig+0x334>
 8002996:	e014      	b.n	80029c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002998:	f7ff fd60 	bl	800245c <HAL_GetTick>
 800299c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800299e:	e00a      	b.n	80029b6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029a0:	f7ff fd5c 	bl	800245c <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e0b5      	b.n	8002b22 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029b6:	4b3e      	ldr	r3, [pc, #248]	@ (8002ab0 <HAL_RCC_OscConfig+0x470>)
 80029b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d1ee      	bne.n	80029a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80029c2:	7dfb      	ldrb	r3, [r7, #23]
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d105      	bne.n	80029d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029c8:	4b39      	ldr	r3, [pc, #228]	@ (8002ab0 <HAL_RCC_OscConfig+0x470>)
 80029ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029cc:	4a38      	ldr	r2, [pc, #224]	@ (8002ab0 <HAL_RCC_OscConfig+0x470>)
 80029ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029d2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	699b      	ldr	r3, [r3, #24]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	f000 80a1 	beq.w	8002b20 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029de:	4b34      	ldr	r3, [pc, #208]	@ (8002ab0 <HAL_RCC_OscConfig+0x470>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f003 030c 	and.w	r3, r3, #12
 80029e6:	2b08      	cmp	r3, #8
 80029e8:	d05c      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d141      	bne.n	8002a76 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029f2:	4b31      	ldr	r3, [pc, #196]	@ (8002ab8 <HAL_RCC_OscConfig+0x478>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f8:	f7ff fd30 	bl	800245c <HAL_GetTick>
 80029fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029fe:	e008      	b.n	8002a12 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a00:	f7ff fd2c 	bl	800245c <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e087      	b.n	8002b22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a12:	4b27      	ldr	r3, [pc, #156]	@ (8002ab0 <HAL_RCC_OscConfig+0x470>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d1f0      	bne.n	8002a00 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	69da      	ldr	r2, [r3, #28]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a1b      	ldr	r3, [r3, #32]
 8002a26:	431a      	orrs	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a2c:	019b      	lsls	r3, r3, #6
 8002a2e:	431a      	orrs	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a34:	085b      	lsrs	r3, r3, #1
 8002a36:	3b01      	subs	r3, #1
 8002a38:	041b      	lsls	r3, r3, #16
 8002a3a:	431a      	orrs	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a40:	061b      	lsls	r3, r3, #24
 8002a42:	491b      	ldr	r1, [pc, #108]	@ (8002ab0 <HAL_RCC_OscConfig+0x470>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a48:	4b1b      	ldr	r3, [pc, #108]	@ (8002ab8 <HAL_RCC_OscConfig+0x478>)
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a4e:	f7ff fd05 	bl	800245c <HAL_GetTick>
 8002a52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a54:	e008      	b.n	8002a68 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a56:	f7ff fd01 	bl	800245c <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d901      	bls.n	8002a68 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e05c      	b.n	8002b22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a68:	4b11      	ldr	r3, [pc, #68]	@ (8002ab0 <HAL_RCC_OscConfig+0x470>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d0f0      	beq.n	8002a56 <HAL_RCC_OscConfig+0x416>
 8002a74:	e054      	b.n	8002b20 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a76:	4b10      	ldr	r3, [pc, #64]	@ (8002ab8 <HAL_RCC_OscConfig+0x478>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a7c:	f7ff fcee 	bl	800245c <HAL_GetTick>
 8002a80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a82:	e008      	b.n	8002a96 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a84:	f7ff fcea 	bl	800245c <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d901      	bls.n	8002a96 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e045      	b.n	8002b22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a96:	4b06      	ldr	r3, [pc, #24]	@ (8002ab0 <HAL_RCC_OscConfig+0x470>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d1f0      	bne.n	8002a84 <HAL_RCC_OscConfig+0x444>
 8002aa2:	e03d      	b.n	8002b20 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	699b      	ldr	r3, [r3, #24]
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d107      	bne.n	8002abc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e038      	b.n	8002b22 <HAL_RCC_OscConfig+0x4e2>
 8002ab0:	40023800 	.word	0x40023800
 8002ab4:	40007000 	.word	0x40007000
 8002ab8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002abc:	4b1b      	ldr	r3, [pc, #108]	@ (8002b2c <HAL_RCC_OscConfig+0x4ec>)
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	699b      	ldr	r3, [r3, #24]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d028      	beq.n	8002b1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d121      	bne.n	8002b1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d11a      	bne.n	8002b1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ae6:	68fa      	ldr	r2, [r7, #12]
 8002ae8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002aec:	4013      	ands	r3, r2
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002af2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d111      	bne.n	8002b1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b02:	085b      	lsrs	r3, r3, #1
 8002b04:	3b01      	subs	r3, #1
 8002b06:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d107      	bne.n	8002b1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b16:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d001      	beq.n	8002b20 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e000      	b.n	8002b22 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3718      	adds	r7, #24
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	40023800 	.word	0x40023800

08002b30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d101      	bne.n	8002b44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e0cc      	b.n	8002cde <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b44:	4b68      	ldr	r3, [pc, #416]	@ (8002ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0307 	and.w	r3, r3, #7
 8002b4c:	683a      	ldr	r2, [r7, #0]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d90c      	bls.n	8002b6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b52:	4b65      	ldr	r3, [pc, #404]	@ (8002ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b54:	683a      	ldr	r2, [r7, #0]
 8002b56:	b2d2      	uxtb	r2, r2
 8002b58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b5a:	4b63      	ldr	r3, [pc, #396]	@ (8002ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0307 	and.w	r3, r3, #7
 8002b62:	683a      	ldr	r2, [r7, #0]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d001      	beq.n	8002b6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e0b8      	b.n	8002cde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0302 	and.w	r3, r3, #2
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d020      	beq.n	8002bba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0304 	and.w	r3, r3, #4
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d005      	beq.n	8002b90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b84:	4b59      	ldr	r3, [pc, #356]	@ (8002cec <HAL_RCC_ClockConfig+0x1bc>)
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	4a58      	ldr	r2, [pc, #352]	@ (8002cec <HAL_RCC_ClockConfig+0x1bc>)
 8002b8a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002b8e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0308 	and.w	r3, r3, #8
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d005      	beq.n	8002ba8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b9c:	4b53      	ldr	r3, [pc, #332]	@ (8002cec <HAL_RCC_ClockConfig+0x1bc>)
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	4a52      	ldr	r2, [pc, #328]	@ (8002cec <HAL_RCC_ClockConfig+0x1bc>)
 8002ba2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002ba6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ba8:	4b50      	ldr	r3, [pc, #320]	@ (8002cec <HAL_RCC_ClockConfig+0x1bc>)
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	494d      	ldr	r1, [pc, #308]	@ (8002cec <HAL_RCC_ClockConfig+0x1bc>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d044      	beq.n	8002c50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d107      	bne.n	8002bde <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bce:	4b47      	ldr	r3, [pc, #284]	@ (8002cec <HAL_RCC_ClockConfig+0x1bc>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d119      	bne.n	8002c0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e07f      	b.n	8002cde <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d003      	beq.n	8002bee <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bea:	2b03      	cmp	r3, #3
 8002bec:	d107      	bne.n	8002bfe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bee:	4b3f      	ldr	r3, [pc, #252]	@ (8002cec <HAL_RCC_ClockConfig+0x1bc>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d109      	bne.n	8002c0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e06f      	b.n	8002cde <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bfe:	4b3b      	ldr	r3, [pc, #236]	@ (8002cec <HAL_RCC_ClockConfig+0x1bc>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d101      	bne.n	8002c0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e067      	b.n	8002cde <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c0e:	4b37      	ldr	r3, [pc, #220]	@ (8002cec <HAL_RCC_ClockConfig+0x1bc>)
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f023 0203 	bic.w	r2, r3, #3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	4934      	ldr	r1, [pc, #208]	@ (8002cec <HAL_RCC_ClockConfig+0x1bc>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c20:	f7ff fc1c 	bl	800245c <HAL_GetTick>
 8002c24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c26:	e00a      	b.n	8002c3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c28:	f7ff fc18 	bl	800245c <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e04f      	b.n	8002cde <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c3e:	4b2b      	ldr	r3, [pc, #172]	@ (8002cec <HAL_RCC_ClockConfig+0x1bc>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f003 020c 	and.w	r2, r3, #12
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d1eb      	bne.n	8002c28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c50:	4b25      	ldr	r3, [pc, #148]	@ (8002ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0307 	and.w	r3, r3, #7
 8002c58:	683a      	ldr	r2, [r7, #0]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d20c      	bcs.n	8002c78 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c5e:	4b22      	ldr	r3, [pc, #136]	@ (8002ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c60:	683a      	ldr	r2, [r7, #0]
 8002c62:	b2d2      	uxtb	r2, r2
 8002c64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c66:	4b20      	ldr	r3, [pc, #128]	@ (8002ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0307 	and.w	r3, r3, #7
 8002c6e:	683a      	ldr	r2, [r7, #0]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d001      	beq.n	8002c78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e032      	b.n	8002cde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0304 	and.w	r3, r3, #4
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d008      	beq.n	8002c96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c84:	4b19      	ldr	r3, [pc, #100]	@ (8002cec <HAL_RCC_ClockConfig+0x1bc>)
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	4916      	ldr	r1, [pc, #88]	@ (8002cec <HAL_RCC_ClockConfig+0x1bc>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0308 	and.w	r3, r3, #8
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d009      	beq.n	8002cb6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ca2:	4b12      	ldr	r3, [pc, #72]	@ (8002cec <HAL_RCC_ClockConfig+0x1bc>)
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	00db      	lsls	r3, r3, #3
 8002cb0:	490e      	ldr	r1, [pc, #56]	@ (8002cec <HAL_RCC_ClockConfig+0x1bc>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002cb6:	f000 f821 	bl	8002cfc <HAL_RCC_GetSysClockFreq>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	4b0b      	ldr	r3, [pc, #44]	@ (8002cec <HAL_RCC_ClockConfig+0x1bc>)
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	091b      	lsrs	r3, r3, #4
 8002cc2:	f003 030f 	and.w	r3, r3, #15
 8002cc6:	490a      	ldr	r1, [pc, #40]	@ (8002cf0 <HAL_RCC_ClockConfig+0x1c0>)
 8002cc8:	5ccb      	ldrb	r3, [r1, r3]
 8002cca:	fa22 f303 	lsr.w	r3, r2, r3
 8002cce:	4a09      	ldr	r2, [pc, #36]	@ (8002cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002cd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002cd2:	4b09      	ldr	r3, [pc, #36]	@ (8002cf8 <HAL_RCC_ClockConfig+0x1c8>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7ff fb7c 	bl	80023d4 <HAL_InitTick>

  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	40023c00 	.word	0x40023c00
 8002cec:	40023800 	.word	0x40023800
 8002cf0:	080039b0 	.word	0x080039b0
 8002cf4:	20000014 	.word	0x20000014
 8002cf8:	20000018 	.word	0x20000018

08002cfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d00:	b090      	sub	sp, #64	@ 0x40
 8002d02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002d04:	2300      	movs	r3, #0
 8002d06:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002d10:	2300      	movs	r3, #0
 8002d12:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d14:	4b59      	ldr	r3, [pc, #356]	@ (8002e7c <HAL_RCC_GetSysClockFreq+0x180>)
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f003 030c 	and.w	r3, r3, #12
 8002d1c:	2b08      	cmp	r3, #8
 8002d1e:	d00d      	beq.n	8002d3c <HAL_RCC_GetSysClockFreq+0x40>
 8002d20:	2b08      	cmp	r3, #8
 8002d22:	f200 80a1 	bhi.w	8002e68 <HAL_RCC_GetSysClockFreq+0x16c>
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d002      	beq.n	8002d30 <HAL_RCC_GetSysClockFreq+0x34>
 8002d2a:	2b04      	cmp	r3, #4
 8002d2c:	d003      	beq.n	8002d36 <HAL_RCC_GetSysClockFreq+0x3a>
 8002d2e:	e09b      	b.n	8002e68 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d30:	4b53      	ldr	r3, [pc, #332]	@ (8002e80 <HAL_RCC_GetSysClockFreq+0x184>)
 8002d32:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002d34:	e09b      	b.n	8002e6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d36:	4b53      	ldr	r3, [pc, #332]	@ (8002e84 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d38:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002d3a:	e098      	b.n	8002e6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d3c:	4b4f      	ldr	r3, [pc, #316]	@ (8002e7c <HAL_RCC_GetSysClockFreq+0x180>)
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d44:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d46:	4b4d      	ldr	r3, [pc, #308]	@ (8002e7c <HAL_RCC_GetSysClockFreq+0x180>)
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d028      	beq.n	8002da4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d52:	4b4a      	ldr	r3, [pc, #296]	@ (8002e7c <HAL_RCC_GetSysClockFreq+0x180>)
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	099b      	lsrs	r3, r3, #6
 8002d58:	2200      	movs	r2, #0
 8002d5a:	623b      	str	r3, [r7, #32]
 8002d5c:	627a      	str	r2, [r7, #36]	@ 0x24
 8002d5e:	6a3b      	ldr	r3, [r7, #32]
 8002d60:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002d64:	2100      	movs	r1, #0
 8002d66:	4b47      	ldr	r3, [pc, #284]	@ (8002e84 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d68:	fb03 f201 	mul.w	r2, r3, r1
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	fb00 f303 	mul.w	r3, r0, r3
 8002d72:	4413      	add	r3, r2
 8002d74:	4a43      	ldr	r2, [pc, #268]	@ (8002e84 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d76:	fba0 1202 	umull	r1, r2, r0, r2
 8002d7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d7c:	460a      	mov	r2, r1
 8002d7e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002d80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d82:	4413      	add	r3, r2
 8002d84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d88:	2200      	movs	r2, #0
 8002d8a:	61bb      	str	r3, [r7, #24]
 8002d8c:	61fa      	str	r2, [r7, #28]
 8002d8e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d92:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002d96:	f7fd fa25 	bl	80001e4 <__aeabi_uldivmod>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	4613      	mov	r3, r2
 8002da0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002da2:	e053      	b.n	8002e4c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002da4:	4b35      	ldr	r3, [pc, #212]	@ (8002e7c <HAL_RCC_GetSysClockFreq+0x180>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	099b      	lsrs	r3, r3, #6
 8002daa:	2200      	movs	r2, #0
 8002dac:	613b      	str	r3, [r7, #16]
 8002dae:	617a      	str	r2, [r7, #20]
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002db6:	f04f 0b00 	mov.w	fp, #0
 8002dba:	4652      	mov	r2, sl
 8002dbc:	465b      	mov	r3, fp
 8002dbe:	f04f 0000 	mov.w	r0, #0
 8002dc2:	f04f 0100 	mov.w	r1, #0
 8002dc6:	0159      	lsls	r1, r3, #5
 8002dc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dcc:	0150      	lsls	r0, r2, #5
 8002dce:	4602      	mov	r2, r0
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	ebb2 080a 	subs.w	r8, r2, sl
 8002dd6:	eb63 090b 	sbc.w	r9, r3, fp
 8002dda:	f04f 0200 	mov.w	r2, #0
 8002dde:	f04f 0300 	mov.w	r3, #0
 8002de2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002de6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002dea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002dee:	ebb2 0408 	subs.w	r4, r2, r8
 8002df2:	eb63 0509 	sbc.w	r5, r3, r9
 8002df6:	f04f 0200 	mov.w	r2, #0
 8002dfa:	f04f 0300 	mov.w	r3, #0
 8002dfe:	00eb      	lsls	r3, r5, #3
 8002e00:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e04:	00e2      	lsls	r2, r4, #3
 8002e06:	4614      	mov	r4, r2
 8002e08:	461d      	mov	r5, r3
 8002e0a:	eb14 030a 	adds.w	r3, r4, sl
 8002e0e:	603b      	str	r3, [r7, #0]
 8002e10:	eb45 030b 	adc.w	r3, r5, fp
 8002e14:	607b      	str	r3, [r7, #4]
 8002e16:	f04f 0200 	mov.w	r2, #0
 8002e1a:	f04f 0300 	mov.w	r3, #0
 8002e1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e22:	4629      	mov	r1, r5
 8002e24:	028b      	lsls	r3, r1, #10
 8002e26:	4621      	mov	r1, r4
 8002e28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e2c:	4621      	mov	r1, r4
 8002e2e:	028a      	lsls	r2, r1, #10
 8002e30:	4610      	mov	r0, r2
 8002e32:	4619      	mov	r1, r3
 8002e34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e36:	2200      	movs	r2, #0
 8002e38:	60bb      	str	r3, [r7, #8]
 8002e3a:	60fa      	str	r2, [r7, #12]
 8002e3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e40:	f7fd f9d0 	bl	80001e4 <__aeabi_uldivmod>
 8002e44:	4602      	mov	r2, r0
 8002e46:	460b      	mov	r3, r1
 8002e48:	4613      	mov	r3, r2
 8002e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002e4c:	4b0b      	ldr	r3, [pc, #44]	@ (8002e7c <HAL_RCC_GetSysClockFreq+0x180>)
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	0c1b      	lsrs	r3, r3, #16
 8002e52:	f003 0303 	and.w	r3, r3, #3
 8002e56:	3301      	adds	r3, #1
 8002e58:	005b      	lsls	r3, r3, #1
 8002e5a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002e5c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e64:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002e66:	e002      	b.n	8002e6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e68:	4b05      	ldr	r3, [pc, #20]	@ (8002e80 <HAL_RCC_GetSysClockFreq+0x184>)
 8002e6a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002e6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3740      	adds	r7, #64	@ 0x40
 8002e74:	46bd      	mov	sp, r7
 8002e76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e7a:	bf00      	nop
 8002e7c:	40023800 	.word	0x40023800
 8002e80:	00f42400 	.word	0x00f42400
 8002e84:	017d7840 	.word	0x017d7840

08002e88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d101      	bne.n	8002e9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e041      	b.n	8002f1e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d106      	bne.n	8002eb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f7ff fa22 	bl	80022f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2202      	movs	r2, #2
 8002eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	3304      	adds	r3, #4
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	4610      	mov	r0, r2
 8002ec8:	f000 f8f4 	bl	80030b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b084      	sub	sp, #16
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
 8002f2e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f30:	2300      	movs	r3, #0
 8002f32:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d101      	bne.n	8002f42 <HAL_TIM_ConfigClockSource+0x1c>
 8002f3e:	2302      	movs	r3, #2
 8002f40:	e0b4      	b.n	80030ac <HAL_TIM_ConfigClockSource+0x186>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2201      	movs	r2, #1
 8002f46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2202      	movs	r2, #2
 8002f4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002f60:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002f68:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68ba      	ldr	r2, [r7, #8]
 8002f70:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f7a:	d03e      	beq.n	8002ffa <HAL_TIM_ConfigClockSource+0xd4>
 8002f7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f80:	f200 8087 	bhi.w	8003092 <HAL_TIM_ConfigClockSource+0x16c>
 8002f84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f88:	f000 8086 	beq.w	8003098 <HAL_TIM_ConfigClockSource+0x172>
 8002f8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f90:	d87f      	bhi.n	8003092 <HAL_TIM_ConfigClockSource+0x16c>
 8002f92:	2b70      	cmp	r3, #112	@ 0x70
 8002f94:	d01a      	beq.n	8002fcc <HAL_TIM_ConfigClockSource+0xa6>
 8002f96:	2b70      	cmp	r3, #112	@ 0x70
 8002f98:	d87b      	bhi.n	8003092 <HAL_TIM_ConfigClockSource+0x16c>
 8002f9a:	2b60      	cmp	r3, #96	@ 0x60
 8002f9c:	d050      	beq.n	8003040 <HAL_TIM_ConfigClockSource+0x11a>
 8002f9e:	2b60      	cmp	r3, #96	@ 0x60
 8002fa0:	d877      	bhi.n	8003092 <HAL_TIM_ConfigClockSource+0x16c>
 8002fa2:	2b50      	cmp	r3, #80	@ 0x50
 8002fa4:	d03c      	beq.n	8003020 <HAL_TIM_ConfigClockSource+0xfa>
 8002fa6:	2b50      	cmp	r3, #80	@ 0x50
 8002fa8:	d873      	bhi.n	8003092 <HAL_TIM_ConfigClockSource+0x16c>
 8002faa:	2b40      	cmp	r3, #64	@ 0x40
 8002fac:	d058      	beq.n	8003060 <HAL_TIM_ConfigClockSource+0x13a>
 8002fae:	2b40      	cmp	r3, #64	@ 0x40
 8002fb0:	d86f      	bhi.n	8003092 <HAL_TIM_ConfigClockSource+0x16c>
 8002fb2:	2b30      	cmp	r3, #48	@ 0x30
 8002fb4:	d064      	beq.n	8003080 <HAL_TIM_ConfigClockSource+0x15a>
 8002fb6:	2b30      	cmp	r3, #48	@ 0x30
 8002fb8:	d86b      	bhi.n	8003092 <HAL_TIM_ConfigClockSource+0x16c>
 8002fba:	2b20      	cmp	r3, #32
 8002fbc:	d060      	beq.n	8003080 <HAL_TIM_ConfigClockSource+0x15a>
 8002fbe:	2b20      	cmp	r3, #32
 8002fc0:	d867      	bhi.n	8003092 <HAL_TIM_ConfigClockSource+0x16c>
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d05c      	beq.n	8003080 <HAL_TIM_ConfigClockSource+0x15a>
 8002fc6:	2b10      	cmp	r3, #16
 8002fc8:	d05a      	beq.n	8003080 <HAL_TIM_ConfigClockSource+0x15a>
 8002fca:	e062      	b.n	8003092 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002fdc:	f000 f96a 	bl	80032b4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002fee:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	68ba      	ldr	r2, [r7, #8]
 8002ff6:	609a      	str	r2, [r3, #8]
      break;
 8002ff8:	e04f      	b.n	800309a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800300a:	f000 f953 	bl	80032b4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	689a      	ldr	r2, [r3, #8]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800301c:	609a      	str	r2, [r3, #8]
      break;
 800301e:	e03c      	b.n	800309a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800302c:	461a      	mov	r2, r3
 800302e:	f000 f8c7 	bl	80031c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2150      	movs	r1, #80	@ 0x50
 8003038:	4618      	mov	r0, r3
 800303a:	f000 f920 	bl	800327e <TIM_ITRx_SetConfig>
      break;
 800303e:	e02c      	b.n	800309a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800304c:	461a      	mov	r2, r3
 800304e:	f000 f8e6 	bl	800321e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2160      	movs	r1, #96	@ 0x60
 8003058:	4618      	mov	r0, r3
 800305a:	f000 f910 	bl	800327e <TIM_ITRx_SetConfig>
      break;
 800305e:	e01c      	b.n	800309a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800306c:	461a      	mov	r2, r3
 800306e:	f000 f8a7 	bl	80031c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2140      	movs	r1, #64	@ 0x40
 8003078:	4618      	mov	r0, r3
 800307a:	f000 f900 	bl	800327e <TIM_ITRx_SetConfig>
      break;
 800307e:	e00c      	b.n	800309a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4619      	mov	r1, r3
 800308a:	4610      	mov	r0, r2
 800308c:	f000 f8f7 	bl	800327e <TIM_ITRx_SetConfig>
      break;
 8003090:	e003      	b.n	800309a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	73fb      	strb	r3, [r7, #15]
      break;
 8003096:	e000      	b.n	800309a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003098:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2201      	movs	r2, #1
 800309e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80030aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3710      	adds	r7, #16
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	4a37      	ldr	r2, [pc, #220]	@ (80031a4 <TIM_Base_SetConfig+0xf0>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d00f      	beq.n	80030ec <TIM_Base_SetConfig+0x38>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030d2:	d00b      	beq.n	80030ec <TIM_Base_SetConfig+0x38>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4a34      	ldr	r2, [pc, #208]	@ (80031a8 <TIM_Base_SetConfig+0xf4>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d007      	beq.n	80030ec <TIM_Base_SetConfig+0x38>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4a33      	ldr	r2, [pc, #204]	@ (80031ac <TIM_Base_SetConfig+0xf8>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d003      	beq.n	80030ec <TIM_Base_SetConfig+0x38>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4a32      	ldr	r2, [pc, #200]	@ (80031b0 <TIM_Base_SetConfig+0xfc>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d108      	bne.n	80030fe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	68fa      	ldr	r2, [r7, #12]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a28      	ldr	r2, [pc, #160]	@ (80031a4 <TIM_Base_SetConfig+0xf0>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d01b      	beq.n	800313e <TIM_Base_SetConfig+0x8a>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800310c:	d017      	beq.n	800313e <TIM_Base_SetConfig+0x8a>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a25      	ldr	r2, [pc, #148]	@ (80031a8 <TIM_Base_SetConfig+0xf4>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d013      	beq.n	800313e <TIM_Base_SetConfig+0x8a>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a24      	ldr	r2, [pc, #144]	@ (80031ac <TIM_Base_SetConfig+0xf8>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d00f      	beq.n	800313e <TIM_Base_SetConfig+0x8a>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a23      	ldr	r2, [pc, #140]	@ (80031b0 <TIM_Base_SetConfig+0xfc>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d00b      	beq.n	800313e <TIM_Base_SetConfig+0x8a>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a22      	ldr	r2, [pc, #136]	@ (80031b4 <TIM_Base_SetConfig+0x100>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d007      	beq.n	800313e <TIM_Base_SetConfig+0x8a>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a21      	ldr	r2, [pc, #132]	@ (80031b8 <TIM_Base_SetConfig+0x104>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d003      	beq.n	800313e <TIM_Base_SetConfig+0x8a>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a20      	ldr	r2, [pc, #128]	@ (80031bc <TIM_Base_SetConfig+0x108>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d108      	bne.n	8003150 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003144:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	68fa      	ldr	r2, [r7, #12]
 800314c:	4313      	orrs	r3, r2
 800314e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	695b      	ldr	r3, [r3, #20]
 800315a:	4313      	orrs	r3, r2
 800315c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	689a      	ldr	r2, [r3, #8]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a0c      	ldr	r2, [pc, #48]	@ (80031a4 <TIM_Base_SetConfig+0xf0>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d103      	bne.n	800317e <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	691a      	ldr	r2, [r3, #16]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f043 0204 	orr.w	r2, r3, #4
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2201      	movs	r2, #1
 800318e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	68fa      	ldr	r2, [r7, #12]
 8003194:	601a      	str	r2, [r3, #0]
}
 8003196:	bf00      	nop
 8003198:	3714      	adds	r7, #20
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	40010000 	.word	0x40010000
 80031a8:	40000400 	.word	0x40000400
 80031ac:	40000800 	.word	0x40000800
 80031b0:	40000c00 	.word	0x40000c00
 80031b4:	40014000 	.word	0x40014000
 80031b8:	40014400 	.word	0x40014400
 80031bc:	40014800 	.word	0x40014800

080031c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b087      	sub	sp, #28
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6a1b      	ldr	r3, [r3, #32]
 80031d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6a1b      	ldr	r3, [r3, #32]
 80031d6:	f023 0201 	bic.w	r2, r3, #1
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	699b      	ldr	r3, [r3, #24]
 80031e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80031ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	011b      	lsls	r3, r3, #4
 80031f0:	693a      	ldr	r2, [r7, #16]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	f023 030a 	bic.w	r3, r3, #10
 80031fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80031fe:	697a      	ldr	r2, [r7, #20]
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	4313      	orrs	r3, r2
 8003204:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	693a      	ldr	r2, [r7, #16]
 800320a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	697a      	ldr	r2, [r7, #20]
 8003210:	621a      	str	r2, [r3, #32]
}
 8003212:	bf00      	nop
 8003214:	371c      	adds	r7, #28
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr

0800321e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800321e:	b480      	push	{r7}
 8003220:	b087      	sub	sp, #28
 8003222:	af00      	add	r7, sp, #0
 8003224:	60f8      	str	r0, [r7, #12]
 8003226:	60b9      	str	r1, [r7, #8]
 8003228:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6a1b      	ldr	r3, [r3, #32]
 800322e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6a1b      	ldr	r3, [r3, #32]
 8003234:	f023 0210 	bic.w	r2, r3, #16
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003248:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	031b      	lsls	r3, r3, #12
 800324e:	693a      	ldr	r2, [r7, #16]
 8003250:	4313      	orrs	r3, r2
 8003252:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800325a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	011b      	lsls	r3, r3, #4
 8003260:	697a      	ldr	r2, [r7, #20]
 8003262:	4313      	orrs	r3, r2
 8003264:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	693a      	ldr	r2, [r7, #16]
 800326a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	697a      	ldr	r2, [r7, #20]
 8003270:	621a      	str	r2, [r3, #32]
}
 8003272:	bf00      	nop
 8003274:	371c      	adds	r7, #28
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr

0800327e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800327e:	b480      	push	{r7}
 8003280:	b085      	sub	sp, #20
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
 8003286:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003294:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003296:	683a      	ldr	r2, [r7, #0]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	4313      	orrs	r3, r2
 800329c:	f043 0307 	orr.w	r3, r3, #7
 80032a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	68fa      	ldr	r2, [r7, #12]
 80032a6:	609a      	str	r2, [r3, #8]
}
 80032a8:	bf00      	nop
 80032aa:	3714      	adds	r7, #20
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b087      	sub	sp, #28
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	60b9      	str	r1, [r7, #8]
 80032be:	607a      	str	r2, [r7, #4]
 80032c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80032ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	021a      	lsls	r2, r3, #8
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	431a      	orrs	r2, r3
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	4313      	orrs	r3, r2
 80032dc:	697a      	ldr	r2, [r7, #20]
 80032de:	4313      	orrs	r3, r2
 80032e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	697a      	ldr	r2, [r7, #20]
 80032e6:	609a      	str	r2, [r3, #8]
}
 80032e8:	bf00      	nop
 80032ea:	371c      	adds	r7, #28
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr

080032f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b085      	sub	sp, #20
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003304:	2b01      	cmp	r3, #1
 8003306:	d101      	bne.n	800330c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003308:	2302      	movs	r3, #2
 800330a:	e050      	b.n	80033ae <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2202      	movs	r2, #2
 8003318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003332:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	4313      	orrs	r3, r2
 800333c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	68fa      	ldr	r2, [r7, #12]
 8003344:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a1c      	ldr	r2, [pc, #112]	@ (80033bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d018      	beq.n	8003382 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003358:	d013      	beq.n	8003382 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a18      	ldr	r2, [pc, #96]	@ (80033c0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d00e      	beq.n	8003382 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a16      	ldr	r2, [pc, #88]	@ (80033c4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d009      	beq.n	8003382 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a15      	ldr	r2, [pc, #84]	@ (80033c8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d004      	beq.n	8003382 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a13      	ldr	r2, [pc, #76]	@ (80033cc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d10c      	bne.n	800339c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003388:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	68ba      	ldr	r2, [r7, #8]
 8003390:	4313      	orrs	r3, r2
 8003392:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	68ba      	ldr	r2, [r7, #8]
 800339a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3714      	adds	r7, #20
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	40010000 	.word	0x40010000
 80033c0:	40000400 	.word	0x40000400
 80033c4:	40000800 	.word	0x40000800
 80033c8:	40000c00 	.word	0x40000c00
 80033cc:	40014000 	.word	0x40014000

080033d0 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 80033d0:	b10a      	cbz	r2, 80033d6 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 80033d2:	f000 ba4d 	b.w	8003870 <memcpy>
 80033d6:	4770      	bx	lr

080033d8 <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
 80033d8:	b10a      	cbz	r2, 80033de <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6>
 80033da:	f000 b9b1 	b.w	8003740 <memcmp>
 80033de:	4610      	mov	r0, r2
 80033e0:	4770      	bx	lr

080033e2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_S_allocateERS3_j>:
 80033e2:	1e08      	subs	r0, r1, #0
 80033e4:	b508      	push	{r3, lr}
 80033e6:	da01      	bge.n	80033ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_S_allocateERS3_j+0xa>
 80033e8:	f000 f8d3 	bl	8003592 <_ZSt17__throw_bad_allocv>
 80033ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80033f0:	f000 b8be 	b.w	8003570 <_Znwj>

080033f4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>:
 80033f4:	f850 3b08 	ldr.w	r3, [r0], #8
 80033f8:	1a1b      	subs	r3, r3, r0
 80033fa:	4258      	negs	r0, r3
 80033fc:	4158      	adcs	r0, r3
 80033fe:	4770      	bx	lr

08003400 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8003400:	680b      	ldr	r3, [r1, #0]
 8003402:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003406:	b510      	push	{r4, lr}
 8003408:	d302      	bcc.n	8003410 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 800340a:	480b      	ldr	r0, [pc, #44]	@ (8003438 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x38>)
 800340c:	f000 f8c7 	bl	800359e <_ZSt20__throw_length_errorPKc>
 8003410:	4293      	cmp	r3, r2
 8003412:	d90b      	bls.n	800342c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8003414:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8003418:	ea4f 0442 	mov.w	r4, r2, lsl #1
 800341c:	d206      	bcs.n	800342c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800341e:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8003422:	bf2a      	itet	cs
 8003424:	f06f 4340 	mvncs.w	r3, #3221225472	@ 0xc0000000
 8003428:	600c      	strcc	r4, [r1, #0]
 800342a:	600b      	strcs	r3, [r1, #0]
 800342c:	6809      	ldr	r1, [r1, #0]
 800342e:	3101      	adds	r1, #1
 8003430:	f7ff ffd7 	bl	80033e2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_S_allocateERS3_j>
 8003434:	bd10      	pop	{r4, pc}
 8003436:	bf00      	nop
 8003438:	080039c0 	.word	0x080039c0

0800343c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_destroyEj>:
 800343c:	6800      	ldr	r0, [r0, #0]
 800343e:	f000 b895 	b.w	800356c <_ZdlPv>

08003442 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8003442:	b510      	push	{r4, lr}
 8003444:	4604      	mov	r4, r0
 8003446:	f7ff ffd5 	bl	80033f4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 800344a:	b918      	cbnz	r0, 8003454 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x12>
 800344c:	68a1      	ldr	r1, [r4, #8]
 800344e:	4620      	mov	r0, r4
 8003450:	f7ff fff4 	bl	800343c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_destroyEj>
 8003454:	bd10      	pop	{r4, pc}

08003456 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8003456:	2a01      	cmp	r2, #1
 8003458:	b410      	push	{r4}
 800345a:	d104      	bne.n	8003466 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 800345c:	780a      	ldrb	r2, [r1, #0]
 800345e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003462:	7002      	strb	r2, [r0, #0]
 8003464:	4770      	bx	lr
 8003466:	f85d 4b04 	ldr.w	r4, [sp], #4
 800346a:	f7ff bfb1 	b.w	80033d0 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

0800346e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 800346e:	b508      	push	{r3, lr}
 8003470:	1a52      	subs	r2, r2, r1
 8003472:	f7ff fff0 	bl	8003456 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8003476:	bd08      	pop	{r3, pc}

08003478 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8003478:	b508      	push	{r3, lr}
 800347a:	1a52      	subs	r2, r2, r1
 800347c:	f7ff ffeb 	bl	8003456 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8003480:	bd08      	pop	{r3, pc}

08003482 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8003482:	b510      	push	{r4, lr}
 8003484:	4604      	mov	r4, r0
 8003486:	f7ff ffdc 	bl	8003442 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800348a:	4620      	mov	r0, r4
 800348c:	bd10      	pop	{r4, pc}

0800348e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>:
 800348e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003490:	6847      	ldr	r7, [r0, #4]
 8003492:	4605      	mov	r5, r0
 8003494:	4608      	mov	r0, r1
 8003496:	460e      	mov	r6, r1
 8003498:	f7fc fe9c 	bl	80001d4 <strlen>
 800349c:	4287      	cmp	r7, r0
 800349e:	4604      	mov	r4, r0
 80034a0:	463a      	mov	r2, r7
 80034a2:	4631      	mov	r1, r6
 80034a4:	bf28      	it	cs
 80034a6:	4602      	movcs	r2, r0
 80034a8:	6828      	ldr	r0, [r5, #0]
 80034aa:	f7ff ff95 	bl	80033d8 <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 80034ae:	b900      	cbnz	r0, 80034b2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc+0x24>
 80034b0:	1b38      	subs	r0, r7, r4
 80034b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080034b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 80034b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80034b6:	1a53      	subs	r3, r2, r1
 80034b8:	2b0f      	cmp	r3, #15
 80034ba:	4604      	mov	r4, r0
 80034bc:	460d      	mov	r5, r1
 80034be:	4616      	mov	r6, r2
 80034c0:	9301      	str	r3, [sp, #4]
 80034c2:	d906      	bls.n	80034d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x1e>
 80034c4:	2200      	movs	r2, #0
 80034c6:	a901      	add	r1, sp, #4
 80034c8:	f7ff ff9a 	bl	8003400 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80034cc:	9b01      	ldr	r3, [sp, #4]
 80034ce:	6020      	str	r0, [r4, #0]
 80034d0:	60a3      	str	r3, [r4, #8]
 80034d2:	4632      	mov	r2, r6
 80034d4:	4629      	mov	r1, r5
 80034d6:	6820      	ldr	r0, [r4, #0]
 80034d8:	f7ff ffc9 	bl	800346e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 80034dc:	9b01      	ldr	r3, [sp, #4]
 80034de:	6822      	ldr	r2, [r4, #0]
 80034e0:	6063      	str	r3, [r4, #4]
 80034e2:	2100      	movs	r1, #0
 80034e4:	54d1      	strb	r1, [r2, r3]
 80034e6:	b002      	add	sp, #8
 80034e8:	bd70      	pop	{r4, r5, r6, pc}

080034ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 80034ea:	f100 0208 	add.w	r2, r0, #8
 80034ee:	b510      	push	{r4, lr}
 80034f0:	6002      	str	r2, [r0, #0]
 80034f2:	e9d1 1200 	ldrd	r1, r2, [r1]
 80034f6:	4604      	mov	r4, r0
 80034f8:	f04f 0300 	mov.w	r3, #0
 80034fc:	440a      	add	r2, r1
 80034fe:	f7ff ffd9 	bl	80034b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 8003502:	4620      	mov	r0, r4
 8003504:	bd10      	pop	{r4, pc}

08003506 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8003506:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003508:	1a53      	subs	r3, r2, r1
 800350a:	2b0f      	cmp	r3, #15
 800350c:	4604      	mov	r4, r0
 800350e:	460d      	mov	r5, r1
 8003510:	4616      	mov	r6, r2
 8003512:	9301      	str	r3, [sp, #4]
 8003514:	d906      	bls.n	8003524 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x1e>
 8003516:	2200      	movs	r2, #0
 8003518:	a901      	add	r1, sp, #4
 800351a:	f7ff ff71 	bl	8003400 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800351e:	9b01      	ldr	r3, [sp, #4]
 8003520:	6020      	str	r0, [r4, #0]
 8003522:	60a3      	str	r3, [r4, #8]
 8003524:	4632      	mov	r2, r6
 8003526:	4629      	mov	r1, r5
 8003528:	6820      	ldr	r0, [r4, #0]
 800352a:	f7ff ffa5 	bl	8003478 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 800352e:	9b01      	ldr	r3, [sp, #4]
 8003530:	6822      	ldr	r2, [r4, #0]
 8003532:	6063      	str	r3, [r4, #4]
 8003534:	2100      	movs	r1, #0
 8003536:	54d1      	strb	r1, [r2, r3]
 8003538:	b002      	add	sp, #8
 800353a:	bd70      	pop	{r4, r5, r6, pc}

0800353c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 800353c:	b538      	push	{r3, r4, r5, lr}
 800353e:	f100 0308 	add.w	r3, r0, #8
 8003542:	4604      	mov	r4, r0
 8003544:	6003      	str	r3, [r0, #0]
 8003546:	460d      	mov	r5, r1
 8003548:	b911      	cbnz	r1, 8003550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x14>
 800354a:	4807      	ldr	r0, [pc, #28]	@ (8003568 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x2c>)
 800354c:	f000 f824 	bl	8003598 <_ZSt19__throw_logic_errorPKc>
 8003550:	4608      	mov	r0, r1
 8003552:	f7fc fe3f 	bl	80001d4 <strlen>
 8003556:	f04f 0300 	mov.w	r3, #0
 800355a:	182a      	adds	r2, r5, r0
 800355c:	4629      	mov	r1, r5
 800355e:	4620      	mov	r0, r4
 8003560:	f7ff ffd1 	bl	8003506 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8003564:	4620      	mov	r0, r4
 8003566:	bd38      	pop	{r3, r4, r5, pc}
 8003568:	080039d8 	.word	0x080039d8

0800356c <_ZdlPv>:
 800356c:	f000 b832 	b.w	80035d4 <free>

08003570 <_Znwj>:
 8003570:	2801      	cmp	r0, #1
 8003572:	bf38      	it	cc
 8003574:	2001      	movcc	r0, #1
 8003576:	b510      	push	{r4, lr}
 8003578:	4604      	mov	r4, r0
 800357a:	4620      	mov	r0, r4
 800357c:	f000 f822 	bl	80035c4 <malloc>
 8003580:	b100      	cbz	r0, 8003584 <_Znwj+0x14>
 8003582:	bd10      	pop	{r4, pc}
 8003584:	f000 f80e 	bl	80035a4 <_ZSt15get_new_handlerv>
 8003588:	b908      	cbnz	r0, 800358e <_Znwj+0x1e>
 800358a:	f000 f813 	bl	80035b4 <abort>
 800358e:	4780      	blx	r0
 8003590:	e7f3      	b.n	800357a <_Znwj+0xa>

08003592 <_ZSt17__throw_bad_allocv>:
 8003592:	b508      	push	{r3, lr}
 8003594:	f000 f80e 	bl	80035b4 <abort>

08003598 <_ZSt19__throw_logic_errorPKc>:
 8003598:	b508      	push	{r3, lr}
 800359a:	f000 f80b 	bl	80035b4 <abort>

0800359e <_ZSt20__throw_length_errorPKc>:
 800359e:	b508      	push	{r3, lr}
 80035a0:	f000 f808 	bl	80035b4 <abort>

080035a4 <_ZSt15get_new_handlerv>:
 80035a4:	4b02      	ldr	r3, [pc, #8]	@ (80035b0 <_ZSt15get_new_handlerv+0xc>)
 80035a6:	6818      	ldr	r0, [r3, #0]
 80035a8:	f3bf 8f5b 	dmb	ish
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	20000190 	.word	0x20000190

080035b4 <abort>:
 80035b4:	b508      	push	{r3, lr}
 80035b6:	2006      	movs	r0, #6
 80035b8:	f000 f902 	bl	80037c0 <raise>
 80035bc:	2001      	movs	r0, #1
 80035be:	f7fe fdf8 	bl	80021b2 <_exit>
	...

080035c4 <malloc>:
 80035c4:	4b02      	ldr	r3, [pc, #8]	@ (80035d0 <malloc+0xc>)
 80035c6:	4601      	mov	r1, r0
 80035c8:	6818      	ldr	r0, [r3, #0]
 80035ca:	f000 b82d 	b.w	8003628 <_malloc_r>
 80035ce:	bf00      	nop
 80035d0:	20000020 	.word	0x20000020

080035d4 <free>:
 80035d4:	4b02      	ldr	r3, [pc, #8]	@ (80035e0 <free+0xc>)
 80035d6:	4601      	mov	r1, r0
 80035d8:	6818      	ldr	r0, [r3, #0]
 80035da:	f000 b957 	b.w	800388c <_free_r>
 80035de:	bf00      	nop
 80035e0:	20000020 	.word	0x20000020

080035e4 <sbrk_aligned>:
 80035e4:	b570      	push	{r4, r5, r6, lr}
 80035e6:	4e0f      	ldr	r6, [pc, #60]	@ (8003624 <sbrk_aligned+0x40>)
 80035e8:	460c      	mov	r4, r1
 80035ea:	6831      	ldr	r1, [r6, #0]
 80035ec:	4605      	mov	r5, r0
 80035ee:	b911      	cbnz	r1, 80035f6 <sbrk_aligned+0x12>
 80035f0:	f000 f902 	bl	80037f8 <_sbrk_r>
 80035f4:	6030      	str	r0, [r6, #0]
 80035f6:	4621      	mov	r1, r4
 80035f8:	4628      	mov	r0, r5
 80035fa:	f000 f8fd 	bl	80037f8 <_sbrk_r>
 80035fe:	1c43      	adds	r3, r0, #1
 8003600:	d103      	bne.n	800360a <sbrk_aligned+0x26>
 8003602:	f04f 34ff 	mov.w	r4, #4294967295
 8003606:	4620      	mov	r0, r4
 8003608:	bd70      	pop	{r4, r5, r6, pc}
 800360a:	1cc4      	adds	r4, r0, #3
 800360c:	f024 0403 	bic.w	r4, r4, #3
 8003610:	42a0      	cmp	r0, r4
 8003612:	d0f8      	beq.n	8003606 <sbrk_aligned+0x22>
 8003614:	1a21      	subs	r1, r4, r0
 8003616:	4628      	mov	r0, r5
 8003618:	f000 f8ee 	bl	80037f8 <_sbrk_r>
 800361c:	3001      	adds	r0, #1
 800361e:	d1f2      	bne.n	8003606 <sbrk_aligned+0x22>
 8003620:	e7ef      	b.n	8003602 <sbrk_aligned+0x1e>
 8003622:	bf00      	nop
 8003624:	20000194 	.word	0x20000194

08003628 <_malloc_r>:
 8003628:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800362c:	1ccd      	adds	r5, r1, #3
 800362e:	f025 0503 	bic.w	r5, r5, #3
 8003632:	3508      	adds	r5, #8
 8003634:	2d0c      	cmp	r5, #12
 8003636:	bf38      	it	cc
 8003638:	250c      	movcc	r5, #12
 800363a:	2d00      	cmp	r5, #0
 800363c:	4606      	mov	r6, r0
 800363e:	db01      	blt.n	8003644 <_malloc_r+0x1c>
 8003640:	42a9      	cmp	r1, r5
 8003642:	d904      	bls.n	800364e <_malloc_r+0x26>
 8003644:	230c      	movs	r3, #12
 8003646:	6033      	str	r3, [r6, #0]
 8003648:	2000      	movs	r0, #0
 800364a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800364e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003724 <_malloc_r+0xfc>
 8003652:	f000 f869 	bl	8003728 <__malloc_lock>
 8003656:	f8d8 3000 	ldr.w	r3, [r8]
 800365a:	461c      	mov	r4, r3
 800365c:	bb44      	cbnz	r4, 80036b0 <_malloc_r+0x88>
 800365e:	4629      	mov	r1, r5
 8003660:	4630      	mov	r0, r6
 8003662:	f7ff ffbf 	bl	80035e4 <sbrk_aligned>
 8003666:	1c43      	adds	r3, r0, #1
 8003668:	4604      	mov	r4, r0
 800366a:	d158      	bne.n	800371e <_malloc_r+0xf6>
 800366c:	f8d8 4000 	ldr.w	r4, [r8]
 8003670:	4627      	mov	r7, r4
 8003672:	2f00      	cmp	r7, #0
 8003674:	d143      	bne.n	80036fe <_malloc_r+0xd6>
 8003676:	2c00      	cmp	r4, #0
 8003678:	d04b      	beq.n	8003712 <_malloc_r+0xea>
 800367a:	6823      	ldr	r3, [r4, #0]
 800367c:	4639      	mov	r1, r7
 800367e:	4630      	mov	r0, r6
 8003680:	eb04 0903 	add.w	r9, r4, r3
 8003684:	f000 f8b8 	bl	80037f8 <_sbrk_r>
 8003688:	4581      	cmp	r9, r0
 800368a:	d142      	bne.n	8003712 <_malloc_r+0xea>
 800368c:	6821      	ldr	r1, [r4, #0]
 800368e:	1a6d      	subs	r5, r5, r1
 8003690:	4629      	mov	r1, r5
 8003692:	4630      	mov	r0, r6
 8003694:	f7ff ffa6 	bl	80035e4 <sbrk_aligned>
 8003698:	3001      	adds	r0, #1
 800369a:	d03a      	beq.n	8003712 <_malloc_r+0xea>
 800369c:	6823      	ldr	r3, [r4, #0]
 800369e:	442b      	add	r3, r5
 80036a0:	6023      	str	r3, [r4, #0]
 80036a2:	f8d8 3000 	ldr.w	r3, [r8]
 80036a6:	685a      	ldr	r2, [r3, #4]
 80036a8:	bb62      	cbnz	r2, 8003704 <_malloc_r+0xdc>
 80036aa:	f8c8 7000 	str.w	r7, [r8]
 80036ae:	e00f      	b.n	80036d0 <_malloc_r+0xa8>
 80036b0:	6822      	ldr	r2, [r4, #0]
 80036b2:	1b52      	subs	r2, r2, r5
 80036b4:	d420      	bmi.n	80036f8 <_malloc_r+0xd0>
 80036b6:	2a0b      	cmp	r2, #11
 80036b8:	d917      	bls.n	80036ea <_malloc_r+0xc2>
 80036ba:	1961      	adds	r1, r4, r5
 80036bc:	42a3      	cmp	r3, r4
 80036be:	6025      	str	r5, [r4, #0]
 80036c0:	bf18      	it	ne
 80036c2:	6059      	strne	r1, [r3, #4]
 80036c4:	6863      	ldr	r3, [r4, #4]
 80036c6:	bf08      	it	eq
 80036c8:	f8c8 1000 	streq.w	r1, [r8]
 80036cc:	5162      	str	r2, [r4, r5]
 80036ce:	604b      	str	r3, [r1, #4]
 80036d0:	4630      	mov	r0, r6
 80036d2:	f000 f82f 	bl	8003734 <__malloc_unlock>
 80036d6:	f104 000b 	add.w	r0, r4, #11
 80036da:	1d23      	adds	r3, r4, #4
 80036dc:	f020 0007 	bic.w	r0, r0, #7
 80036e0:	1ac2      	subs	r2, r0, r3
 80036e2:	bf1c      	itt	ne
 80036e4:	1a1b      	subne	r3, r3, r0
 80036e6:	50a3      	strne	r3, [r4, r2]
 80036e8:	e7af      	b.n	800364a <_malloc_r+0x22>
 80036ea:	6862      	ldr	r2, [r4, #4]
 80036ec:	42a3      	cmp	r3, r4
 80036ee:	bf0c      	ite	eq
 80036f0:	f8c8 2000 	streq.w	r2, [r8]
 80036f4:	605a      	strne	r2, [r3, #4]
 80036f6:	e7eb      	b.n	80036d0 <_malloc_r+0xa8>
 80036f8:	4623      	mov	r3, r4
 80036fa:	6864      	ldr	r4, [r4, #4]
 80036fc:	e7ae      	b.n	800365c <_malloc_r+0x34>
 80036fe:	463c      	mov	r4, r7
 8003700:	687f      	ldr	r7, [r7, #4]
 8003702:	e7b6      	b.n	8003672 <_malloc_r+0x4a>
 8003704:	461a      	mov	r2, r3
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	42a3      	cmp	r3, r4
 800370a:	d1fb      	bne.n	8003704 <_malloc_r+0xdc>
 800370c:	2300      	movs	r3, #0
 800370e:	6053      	str	r3, [r2, #4]
 8003710:	e7de      	b.n	80036d0 <_malloc_r+0xa8>
 8003712:	230c      	movs	r3, #12
 8003714:	6033      	str	r3, [r6, #0]
 8003716:	4630      	mov	r0, r6
 8003718:	f000 f80c 	bl	8003734 <__malloc_unlock>
 800371c:	e794      	b.n	8003648 <_malloc_r+0x20>
 800371e:	6005      	str	r5, [r0, #0]
 8003720:	e7d6      	b.n	80036d0 <_malloc_r+0xa8>
 8003722:	bf00      	nop
 8003724:	20000198 	.word	0x20000198

08003728 <__malloc_lock>:
 8003728:	4801      	ldr	r0, [pc, #4]	@ (8003730 <__malloc_lock+0x8>)
 800372a:	f000 b89f 	b.w	800386c <__retarget_lock_acquire_recursive>
 800372e:	bf00      	nop
 8003730:	200002d8 	.word	0x200002d8

08003734 <__malloc_unlock>:
 8003734:	4801      	ldr	r0, [pc, #4]	@ (800373c <__malloc_unlock+0x8>)
 8003736:	f000 b89a 	b.w	800386e <__retarget_lock_release_recursive>
 800373a:	bf00      	nop
 800373c:	200002d8 	.word	0x200002d8

08003740 <memcmp>:
 8003740:	b510      	push	{r4, lr}
 8003742:	3901      	subs	r1, #1
 8003744:	4402      	add	r2, r0
 8003746:	4290      	cmp	r0, r2
 8003748:	d101      	bne.n	800374e <memcmp+0xe>
 800374a:	2000      	movs	r0, #0
 800374c:	e005      	b.n	800375a <memcmp+0x1a>
 800374e:	7803      	ldrb	r3, [r0, #0]
 8003750:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8003754:	42a3      	cmp	r3, r4
 8003756:	d001      	beq.n	800375c <memcmp+0x1c>
 8003758:	1b18      	subs	r0, r3, r4
 800375a:	bd10      	pop	{r4, pc}
 800375c:	3001      	adds	r0, #1
 800375e:	e7f2      	b.n	8003746 <memcmp+0x6>

08003760 <memset>:
 8003760:	4402      	add	r2, r0
 8003762:	4603      	mov	r3, r0
 8003764:	4293      	cmp	r3, r2
 8003766:	d100      	bne.n	800376a <memset+0xa>
 8003768:	4770      	bx	lr
 800376a:	f803 1b01 	strb.w	r1, [r3], #1
 800376e:	e7f9      	b.n	8003764 <memset+0x4>

08003770 <_raise_r>:
 8003770:	291f      	cmp	r1, #31
 8003772:	b538      	push	{r3, r4, r5, lr}
 8003774:	4605      	mov	r5, r0
 8003776:	460c      	mov	r4, r1
 8003778:	d904      	bls.n	8003784 <_raise_r+0x14>
 800377a:	2316      	movs	r3, #22
 800377c:	6003      	str	r3, [r0, #0]
 800377e:	f04f 30ff 	mov.w	r0, #4294967295
 8003782:	bd38      	pop	{r3, r4, r5, pc}
 8003784:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8003786:	b112      	cbz	r2, 800378e <_raise_r+0x1e>
 8003788:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800378c:	b94b      	cbnz	r3, 80037a2 <_raise_r+0x32>
 800378e:	4628      	mov	r0, r5
 8003790:	f000 f830 	bl	80037f4 <_getpid_r>
 8003794:	4622      	mov	r2, r4
 8003796:	4601      	mov	r1, r0
 8003798:	4628      	mov	r0, r5
 800379a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800379e:	f000 b817 	b.w	80037d0 <_kill_r>
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d00a      	beq.n	80037bc <_raise_r+0x4c>
 80037a6:	1c59      	adds	r1, r3, #1
 80037a8:	d103      	bne.n	80037b2 <_raise_r+0x42>
 80037aa:	2316      	movs	r3, #22
 80037ac:	6003      	str	r3, [r0, #0]
 80037ae:	2001      	movs	r0, #1
 80037b0:	e7e7      	b.n	8003782 <_raise_r+0x12>
 80037b2:	2100      	movs	r1, #0
 80037b4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80037b8:	4620      	mov	r0, r4
 80037ba:	4798      	blx	r3
 80037bc:	2000      	movs	r0, #0
 80037be:	e7e0      	b.n	8003782 <_raise_r+0x12>

080037c0 <raise>:
 80037c0:	4b02      	ldr	r3, [pc, #8]	@ (80037cc <raise+0xc>)
 80037c2:	4601      	mov	r1, r0
 80037c4:	6818      	ldr	r0, [r3, #0]
 80037c6:	f7ff bfd3 	b.w	8003770 <_raise_r>
 80037ca:	bf00      	nop
 80037cc:	20000020 	.word	0x20000020

080037d0 <_kill_r>:
 80037d0:	b538      	push	{r3, r4, r5, lr}
 80037d2:	4d07      	ldr	r5, [pc, #28]	@ (80037f0 <_kill_r+0x20>)
 80037d4:	2300      	movs	r3, #0
 80037d6:	4604      	mov	r4, r0
 80037d8:	4608      	mov	r0, r1
 80037da:	4611      	mov	r1, r2
 80037dc:	602b      	str	r3, [r5, #0]
 80037de:	f7fe fcd8 	bl	8002192 <_kill>
 80037e2:	1c43      	adds	r3, r0, #1
 80037e4:	d102      	bne.n	80037ec <_kill_r+0x1c>
 80037e6:	682b      	ldr	r3, [r5, #0]
 80037e8:	b103      	cbz	r3, 80037ec <_kill_r+0x1c>
 80037ea:	6023      	str	r3, [r4, #0]
 80037ec:	bd38      	pop	{r3, r4, r5, pc}
 80037ee:	bf00      	nop
 80037f0:	200002d4 	.word	0x200002d4

080037f4 <_getpid_r>:
 80037f4:	f7fe bcc5 	b.w	8002182 <_getpid>

080037f8 <_sbrk_r>:
 80037f8:	b538      	push	{r3, r4, r5, lr}
 80037fa:	4d06      	ldr	r5, [pc, #24]	@ (8003814 <_sbrk_r+0x1c>)
 80037fc:	2300      	movs	r3, #0
 80037fe:	4604      	mov	r4, r0
 8003800:	4608      	mov	r0, r1
 8003802:	602b      	str	r3, [r5, #0]
 8003804:	f7fe fce0 	bl	80021c8 <_sbrk>
 8003808:	1c43      	adds	r3, r0, #1
 800380a:	d102      	bne.n	8003812 <_sbrk_r+0x1a>
 800380c:	682b      	ldr	r3, [r5, #0]
 800380e:	b103      	cbz	r3, 8003812 <_sbrk_r+0x1a>
 8003810:	6023      	str	r3, [r4, #0]
 8003812:	bd38      	pop	{r3, r4, r5, pc}
 8003814:	200002d4 	.word	0x200002d4

08003818 <__errno>:
 8003818:	4b01      	ldr	r3, [pc, #4]	@ (8003820 <__errno+0x8>)
 800381a:	6818      	ldr	r0, [r3, #0]
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	20000020 	.word	0x20000020

08003824 <__libc_init_array>:
 8003824:	b570      	push	{r4, r5, r6, lr}
 8003826:	4d0d      	ldr	r5, [pc, #52]	@ (800385c <__libc_init_array+0x38>)
 8003828:	4c0d      	ldr	r4, [pc, #52]	@ (8003860 <__libc_init_array+0x3c>)
 800382a:	1b64      	subs	r4, r4, r5
 800382c:	10a4      	asrs	r4, r4, #2
 800382e:	2600      	movs	r6, #0
 8003830:	42a6      	cmp	r6, r4
 8003832:	d109      	bne.n	8003848 <__libc_init_array+0x24>
 8003834:	4d0b      	ldr	r5, [pc, #44]	@ (8003864 <__libc_init_array+0x40>)
 8003836:	4c0c      	ldr	r4, [pc, #48]	@ (8003868 <__libc_init_array+0x44>)
 8003838:	f000 f872 	bl	8003920 <_init>
 800383c:	1b64      	subs	r4, r4, r5
 800383e:	10a4      	asrs	r4, r4, #2
 8003840:	2600      	movs	r6, #0
 8003842:	42a6      	cmp	r6, r4
 8003844:	d105      	bne.n	8003852 <__libc_init_array+0x2e>
 8003846:	bd70      	pop	{r4, r5, r6, pc}
 8003848:	f855 3b04 	ldr.w	r3, [r5], #4
 800384c:	4798      	blx	r3
 800384e:	3601      	adds	r6, #1
 8003850:	e7ee      	b.n	8003830 <__libc_init_array+0xc>
 8003852:	f855 3b04 	ldr.w	r3, [r5], #4
 8003856:	4798      	blx	r3
 8003858:	3601      	adds	r6, #1
 800385a:	e7f2      	b.n	8003842 <__libc_init_array+0x1e>
 800385c:	08003a14 	.word	0x08003a14
 8003860:	08003a14 	.word	0x08003a14
 8003864:	08003a14 	.word	0x08003a14
 8003868:	08003a18 	.word	0x08003a18

0800386c <__retarget_lock_acquire_recursive>:
 800386c:	4770      	bx	lr

0800386e <__retarget_lock_release_recursive>:
 800386e:	4770      	bx	lr

08003870 <memcpy>:
 8003870:	440a      	add	r2, r1
 8003872:	4291      	cmp	r1, r2
 8003874:	f100 33ff 	add.w	r3, r0, #4294967295
 8003878:	d100      	bne.n	800387c <memcpy+0xc>
 800387a:	4770      	bx	lr
 800387c:	b510      	push	{r4, lr}
 800387e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003882:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003886:	4291      	cmp	r1, r2
 8003888:	d1f9      	bne.n	800387e <memcpy+0xe>
 800388a:	bd10      	pop	{r4, pc}

0800388c <_free_r>:
 800388c:	b538      	push	{r3, r4, r5, lr}
 800388e:	4605      	mov	r5, r0
 8003890:	2900      	cmp	r1, #0
 8003892:	d041      	beq.n	8003918 <_free_r+0x8c>
 8003894:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003898:	1f0c      	subs	r4, r1, #4
 800389a:	2b00      	cmp	r3, #0
 800389c:	bfb8      	it	lt
 800389e:	18e4      	addlt	r4, r4, r3
 80038a0:	f7ff ff42 	bl	8003728 <__malloc_lock>
 80038a4:	4a1d      	ldr	r2, [pc, #116]	@ (800391c <_free_r+0x90>)
 80038a6:	6813      	ldr	r3, [r2, #0]
 80038a8:	b933      	cbnz	r3, 80038b8 <_free_r+0x2c>
 80038aa:	6063      	str	r3, [r4, #4]
 80038ac:	6014      	str	r4, [r2, #0]
 80038ae:	4628      	mov	r0, r5
 80038b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80038b4:	f7ff bf3e 	b.w	8003734 <__malloc_unlock>
 80038b8:	42a3      	cmp	r3, r4
 80038ba:	d908      	bls.n	80038ce <_free_r+0x42>
 80038bc:	6820      	ldr	r0, [r4, #0]
 80038be:	1821      	adds	r1, r4, r0
 80038c0:	428b      	cmp	r3, r1
 80038c2:	bf01      	itttt	eq
 80038c4:	6819      	ldreq	r1, [r3, #0]
 80038c6:	685b      	ldreq	r3, [r3, #4]
 80038c8:	1809      	addeq	r1, r1, r0
 80038ca:	6021      	streq	r1, [r4, #0]
 80038cc:	e7ed      	b.n	80038aa <_free_r+0x1e>
 80038ce:	461a      	mov	r2, r3
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	b10b      	cbz	r3, 80038d8 <_free_r+0x4c>
 80038d4:	42a3      	cmp	r3, r4
 80038d6:	d9fa      	bls.n	80038ce <_free_r+0x42>
 80038d8:	6811      	ldr	r1, [r2, #0]
 80038da:	1850      	adds	r0, r2, r1
 80038dc:	42a0      	cmp	r0, r4
 80038de:	d10b      	bne.n	80038f8 <_free_r+0x6c>
 80038e0:	6820      	ldr	r0, [r4, #0]
 80038e2:	4401      	add	r1, r0
 80038e4:	1850      	adds	r0, r2, r1
 80038e6:	4283      	cmp	r3, r0
 80038e8:	6011      	str	r1, [r2, #0]
 80038ea:	d1e0      	bne.n	80038ae <_free_r+0x22>
 80038ec:	6818      	ldr	r0, [r3, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	6053      	str	r3, [r2, #4]
 80038f2:	4408      	add	r0, r1
 80038f4:	6010      	str	r0, [r2, #0]
 80038f6:	e7da      	b.n	80038ae <_free_r+0x22>
 80038f8:	d902      	bls.n	8003900 <_free_r+0x74>
 80038fa:	230c      	movs	r3, #12
 80038fc:	602b      	str	r3, [r5, #0]
 80038fe:	e7d6      	b.n	80038ae <_free_r+0x22>
 8003900:	6820      	ldr	r0, [r4, #0]
 8003902:	1821      	adds	r1, r4, r0
 8003904:	428b      	cmp	r3, r1
 8003906:	bf04      	itt	eq
 8003908:	6819      	ldreq	r1, [r3, #0]
 800390a:	685b      	ldreq	r3, [r3, #4]
 800390c:	6063      	str	r3, [r4, #4]
 800390e:	bf04      	itt	eq
 8003910:	1809      	addeq	r1, r1, r0
 8003912:	6021      	streq	r1, [r4, #0]
 8003914:	6054      	str	r4, [r2, #4]
 8003916:	e7ca      	b.n	80038ae <_free_r+0x22>
 8003918:	bd38      	pop	{r3, r4, r5, pc}
 800391a:	bf00      	nop
 800391c:	20000198 	.word	0x20000198

08003920 <_init>:
 8003920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003922:	bf00      	nop
 8003924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003926:	bc08      	pop	{r3}
 8003928:	469e      	mov	lr, r3
 800392a:	4770      	bx	lr

0800392c <_fini>:
 800392c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800392e:	bf00      	nop
 8003930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003932:	bc08      	pop	{r3}
 8003934:	469e      	mov	lr, r3
 8003936:	4770      	bx	lr
