
PRJ_001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002860  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  080029f4  080029f4  000039f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a84  08002a84  00004070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002a84  08002a84  00003a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002a8c  08002a8c  00004070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a8c  08002a8c  00003a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002a90  08002a90  00003a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08002a94  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000022c  20000070  08002b04  00004070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000029c  08002b04  0000429c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011243  00000000  00000000  000040a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002488  00000000  00000000  000152e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000630  00000000  00000000  00017770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000046b  00000000  00000000  00017da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b5e9  00000000  00000000  0001820b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a9e2  00000000  00000000  000337f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b474  00000000  00000000  0003e1d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d964a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003024  00000000  00000000  000d9690  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000dc6b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000070 	.word	0x20000070
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080029dc 	.word	0x080029dc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000074 	.word	0x20000074
 80001d0:	080029dc 	.word	0x080029dc

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_drsub>:
 80001e4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001e8:	e002      	b.n	80001f0 <__adddf3>
 80001ea:	bf00      	nop

080001ec <__aeabi_dsub>:
 80001ec:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001f0 <__adddf3>:
 80001f0:	b530      	push	{r4, r5, lr}
 80001f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fa:	ea94 0f05 	teq	r4, r5
 80001fe:	bf08      	it	eq
 8000200:	ea90 0f02 	teqeq	r0, r2
 8000204:	bf1f      	itttt	ne
 8000206:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000212:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000216:	f000 80e2 	beq.w	80003de <__adddf3+0x1ee>
 800021a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000222:	bfb8      	it	lt
 8000224:	426d      	neglt	r5, r5
 8000226:	dd0c      	ble.n	8000242 <__adddf3+0x52>
 8000228:	442c      	add	r4, r5
 800022a:	ea80 0202 	eor.w	r2, r0, r2
 800022e:	ea81 0303 	eor.w	r3, r1, r3
 8000232:	ea82 0000 	eor.w	r0, r2, r0
 8000236:	ea83 0101 	eor.w	r1, r3, r1
 800023a:	ea80 0202 	eor.w	r2, r0, r2
 800023e:	ea81 0303 	eor.w	r3, r1, r3
 8000242:	2d36      	cmp	r5, #54	@ 0x36
 8000244:	bf88      	it	hi
 8000246:	bd30      	pophi	{r4, r5, pc}
 8000248:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800024c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000250:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000254:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x70>
 800025a:	4240      	negs	r0, r0
 800025c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000260:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000264:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000268:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800026c:	d002      	beq.n	8000274 <__adddf3+0x84>
 800026e:	4252      	negs	r2, r2
 8000270:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000274:	ea94 0f05 	teq	r4, r5
 8000278:	f000 80a7 	beq.w	80003ca <__adddf3+0x1da>
 800027c:	f1a4 0401 	sub.w	r4, r4, #1
 8000280:	f1d5 0e20 	rsbs	lr, r5, #32
 8000284:	db0d      	blt.n	80002a2 <__adddf3+0xb2>
 8000286:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028a:	fa22 f205 	lsr.w	r2, r2, r5
 800028e:	1880      	adds	r0, r0, r2
 8000290:	f141 0100 	adc.w	r1, r1, #0
 8000294:	fa03 f20e 	lsl.w	r2, r3, lr
 8000298:	1880      	adds	r0, r0, r2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	4159      	adcs	r1, r3
 80002a0:	e00e      	b.n	80002c0 <__adddf3+0xd0>
 80002a2:	f1a5 0520 	sub.w	r5, r5, #32
 80002a6:	f10e 0e20 	add.w	lr, lr, #32
 80002aa:	2a01      	cmp	r2, #1
 80002ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b0:	bf28      	it	cs
 80002b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	18c0      	adds	r0, r0, r3
 80002bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002c4:	d507      	bpl.n	80002d6 <__adddf3+0xe6>
 80002c6:	f04f 0e00 	mov.w	lr, #0
 80002ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002da:	d31b      	bcc.n	8000314 <__adddf3+0x124>
 80002dc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002e0:	d30c      	bcc.n	80002fc <__adddf3+0x10c>
 80002e2:	0849      	lsrs	r1, r1, #1
 80002e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002ec:	f104 0401 	add.w	r4, r4, #1
 80002f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002f8:	f080 809a 	bcs.w	8000430 <__adddf3+0x240>
 80002fc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000300:	bf08      	it	eq
 8000302:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000306:	f150 0000 	adcs.w	r0, r0, #0
 800030a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030e:	ea41 0105 	orr.w	r1, r1, r5
 8000312:	bd30      	pop	{r4, r5, pc}
 8000314:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000318:	4140      	adcs	r0, r0
 800031a:	eb41 0101 	adc.w	r1, r1, r1
 800031e:	3c01      	subs	r4, #1
 8000320:	bf28      	it	cs
 8000322:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000326:	d2e9      	bcs.n	80002fc <__adddf3+0x10c>
 8000328:	f091 0f00 	teq	r1, #0
 800032c:	bf04      	itt	eq
 800032e:	4601      	moveq	r1, r0
 8000330:	2000      	moveq	r0, #0
 8000332:	fab1 f381 	clz	r3, r1
 8000336:	bf08      	it	eq
 8000338:	3320      	addeq	r3, #32
 800033a:	f1a3 030b 	sub.w	r3, r3, #11
 800033e:	f1b3 0220 	subs.w	r2, r3, #32
 8000342:	da0c      	bge.n	800035e <__adddf3+0x16e>
 8000344:	320c      	adds	r2, #12
 8000346:	dd08      	ble.n	800035a <__adddf3+0x16a>
 8000348:	f102 0c14 	add.w	ip, r2, #20
 800034c:	f1c2 020c 	rsb	r2, r2, #12
 8000350:	fa01 f00c 	lsl.w	r0, r1, ip
 8000354:	fa21 f102 	lsr.w	r1, r1, r2
 8000358:	e00c      	b.n	8000374 <__adddf3+0x184>
 800035a:	f102 0214 	add.w	r2, r2, #20
 800035e:	bfd8      	it	le
 8000360:	f1c2 0c20 	rsble	ip, r2, #32
 8000364:	fa01 f102 	lsl.w	r1, r1, r2
 8000368:	fa20 fc0c 	lsr.w	ip, r0, ip
 800036c:	bfdc      	itt	le
 800036e:	ea41 010c 	orrle.w	r1, r1, ip
 8000372:	4090      	lslle	r0, r2
 8000374:	1ae4      	subs	r4, r4, r3
 8000376:	bfa2      	ittt	ge
 8000378:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800037c:	4329      	orrge	r1, r5
 800037e:	bd30      	popge	{r4, r5, pc}
 8000380:	ea6f 0404 	mvn.w	r4, r4
 8000384:	3c1f      	subs	r4, #31
 8000386:	da1c      	bge.n	80003c2 <__adddf3+0x1d2>
 8000388:	340c      	adds	r4, #12
 800038a:	dc0e      	bgt.n	80003aa <__adddf3+0x1ba>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0220 	rsb	r2, r4, #32
 8000394:	fa20 f004 	lsr.w	r0, r0, r4
 8000398:	fa01 f302 	lsl.w	r3, r1, r2
 800039c:	ea40 0003 	orr.w	r0, r0, r3
 80003a0:	fa21 f304 	lsr.w	r3, r1, r4
 80003a4:	ea45 0103 	orr.w	r1, r5, r3
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	f1c4 040c 	rsb	r4, r4, #12
 80003ae:	f1c4 0220 	rsb	r2, r4, #32
 80003b2:	fa20 f002 	lsr.w	r0, r0, r2
 80003b6:	fa01 f304 	lsl.w	r3, r1, r4
 80003ba:	ea40 0003 	orr.w	r0, r0, r3
 80003be:	4629      	mov	r1, r5
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	fa21 f004 	lsr.w	r0, r1, r4
 80003c6:	4629      	mov	r1, r5
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	f094 0f00 	teq	r4, #0
 80003ce:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003d2:	bf06      	itte	eq
 80003d4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003d8:	3401      	addeq	r4, #1
 80003da:	3d01      	subne	r5, #1
 80003dc:	e74e      	b.n	800027c <__adddf3+0x8c>
 80003de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e2:	bf18      	it	ne
 80003e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e8:	d029      	beq.n	800043e <__adddf3+0x24e>
 80003ea:	ea94 0f05 	teq	r4, r5
 80003ee:	bf08      	it	eq
 80003f0:	ea90 0f02 	teqeq	r0, r2
 80003f4:	d005      	beq.n	8000402 <__adddf3+0x212>
 80003f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fa:	bf04      	itt	eq
 80003fc:	4619      	moveq	r1, r3
 80003fe:	4610      	moveq	r0, r2
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	ea91 0f03 	teq	r1, r3
 8000406:	bf1e      	ittt	ne
 8000408:	2100      	movne	r1, #0
 800040a:	2000      	movne	r0, #0
 800040c:	bd30      	popne	{r4, r5, pc}
 800040e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000412:	d105      	bne.n	8000420 <__adddf3+0x230>
 8000414:	0040      	lsls	r0, r0, #1
 8000416:	4149      	adcs	r1, r1
 8000418:	bf28      	it	cs
 800041a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000424:	bf3c      	itt	cc
 8000426:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800042a:	bd30      	popcc	{r4, r5, pc}
 800042c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000430:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000434:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000438:	f04f 0000 	mov.w	r0, #0
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000442:	bf1a      	itte	ne
 8000444:	4619      	movne	r1, r3
 8000446:	4610      	movne	r0, r2
 8000448:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800044c:	bf1c      	itt	ne
 800044e:	460b      	movne	r3, r1
 8000450:	4602      	movne	r2, r0
 8000452:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000456:	bf06      	itte	eq
 8000458:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800045c:	ea91 0f03 	teqeq	r1, r3
 8000460:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	bf00      	nop

08000468 <__aeabi_ui2d>:
 8000468:	f090 0f00 	teq	r0, #0
 800046c:	bf04      	itt	eq
 800046e:	2100      	moveq	r1, #0
 8000470:	4770      	bxeq	lr
 8000472:	b530      	push	{r4, r5, lr}
 8000474:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000478:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800047c:	f04f 0500 	mov.w	r5, #0
 8000480:	f04f 0100 	mov.w	r1, #0
 8000484:	e750      	b.n	8000328 <__adddf3+0x138>
 8000486:	bf00      	nop

08000488 <__aeabi_i2d>:
 8000488:	f090 0f00 	teq	r0, #0
 800048c:	bf04      	itt	eq
 800048e:	2100      	moveq	r1, #0
 8000490:	4770      	bxeq	lr
 8000492:	b530      	push	{r4, r5, lr}
 8000494:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000498:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004a0:	bf48      	it	mi
 80004a2:	4240      	negmi	r0, r0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e73e      	b.n	8000328 <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_f2d>:
 80004ac:	0042      	lsls	r2, r0, #1
 80004ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ba:	bf1f      	itttt	ne
 80004bc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004c0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004c4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004c8:	4770      	bxne	lr
 80004ca:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ce:	bf08      	it	eq
 80004d0:	4770      	bxeq	lr
 80004d2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004d6:	bf04      	itt	eq
 80004d8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004e8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004ec:	e71c      	b.n	8000328 <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_ul2d>:
 80004f0:	ea50 0201 	orrs.w	r2, r0, r1
 80004f4:	bf08      	it	eq
 80004f6:	4770      	bxeq	lr
 80004f8:	b530      	push	{r4, r5, lr}
 80004fa:	f04f 0500 	mov.w	r5, #0
 80004fe:	e00a      	b.n	8000516 <__aeabi_l2d+0x16>

08000500 <__aeabi_l2d>:
 8000500:	ea50 0201 	orrs.w	r2, r0, r1
 8000504:	bf08      	it	eq
 8000506:	4770      	bxeq	lr
 8000508:	b530      	push	{r4, r5, lr}
 800050a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800050e:	d502      	bpl.n	8000516 <__aeabi_l2d+0x16>
 8000510:	4240      	negs	r0, r0
 8000512:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000516:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800051a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800051e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000522:	f43f aed8 	beq.w	80002d6 <__adddf3+0xe6>
 8000526:	f04f 0203 	mov.w	r2, #3
 800052a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052e:	bf18      	it	ne
 8000530:	3203      	addne	r2, #3
 8000532:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000536:	bf18      	it	ne
 8000538:	3203      	addne	r2, #3
 800053a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053e:	f1c2 0320 	rsb	r3, r2, #32
 8000542:	fa00 fc03 	lsl.w	ip, r0, r3
 8000546:	fa20 f002 	lsr.w	r0, r0, r2
 800054a:	fa01 fe03 	lsl.w	lr, r1, r3
 800054e:	ea40 000e 	orr.w	r0, r0, lr
 8000552:	fa21 f102 	lsr.w	r1, r1, r2
 8000556:	4414      	add	r4, r2
 8000558:	e6bd      	b.n	80002d6 <__adddf3+0xe6>
 800055a:	bf00      	nop

0800055c <__aeabi_dmul>:
 800055c:	b570      	push	{r4, r5, r6, lr}
 800055e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000562:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000566:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056a:	bf1d      	ittte	ne
 800056c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000570:	ea94 0f0c 	teqne	r4, ip
 8000574:	ea95 0f0c 	teqne	r5, ip
 8000578:	f000 f8de 	bleq	8000738 <__aeabi_dmul+0x1dc>
 800057c:	442c      	add	r4, r5
 800057e:	ea81 0603 	eor.w	r6, r1, r3
 8000582:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000586:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058e:	bf18      	it	ne
 8000590:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000594:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000598:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800059c:	d038      	beq.n	8000610 <__aeabi_dmul+0xb4>
 800059e:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a2:	f04f 0500 	mov.w	r5, #0
 80005a6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005aa:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005ae:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b2:	f04f 0600 	mov.w	r6, #0
 80005b6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ba:	f09c 0f00 	teq	ip, #0
 80005be:	bf18      	it	ne
 80005c0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c4:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005c8:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005cc:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005d0:	d204      	bcs.n	80005dc <__aeabi_dmul+0x80>
 80005d2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d6:	416d      	adcs	r5, r5
 80005d8:	eb46 0606 	adc.w	r6, r6, r6
 80005dc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005ec:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f0:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005f4:	bf88      	it	hi
 80005f6:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005fa:	d81e      	bhi.n	800063a <__aeabi_dmul+0xde>
 80005fc:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	bd70      	pop	{r4, r5, r6, pc}
 8000610:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000614:	ea46 0101 	orr.w	r1, r6, r1
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	ea81 0103 	eor.w	r1, r1, r3
 8000620:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000624:	bfc2      	ittt	gt
 8000626:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062e:	bd70      	popgt	{r4, r5, r6, pc}
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f04f 0e00 	mov.w	lr, #0
 8000638:	3c01      	subs	r4, #1
 800063a:	f300 80ab 	bgt.w	8000794 <__aeabi_dmul+0x238>
 800063e:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000642:	bfde      	ittt	le
 8000644:	2000      	movle	r0, #0
 8000646:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800064a:	bd70      	pople	{r4, r5, r6, pc}
 800064c:	f1c4 0400 	rsb	r4, r4, #0
 8000650:	3c20      	subs	r4, #32
 8000652:	da35      	bge.n	80006c0 <__aeabi_dmul+0x164>
 8000654:	340c      	adds	r4, #12
 8000656:	dc1b      	bgt.n	8000690 <__aeabi_dmul+0x134>
 8000658:	f104 0414 	add.w	r4, r4, #20
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f305 	lsl.w	r3, r0, r5
 8000664:	fa20 f004 	lsr.w	r0, r0, r4
 8000668:	fa01 f205 	lsl.w	r2, r1, r5
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000674:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000678:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800067c:	fa21 f604 	lsr.w	r6, r1, r4
 8000680:	eb42 0106 	adc.w	r1, r2, r6
 8000684:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000688:	bf08      	it	eq
 800068a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068e:	bd70      	pop	{r4, r5, r6, pc}
 8000690:	f1c4 040c 	rsb	r4, r4, #12
 8000694:	f1c4 0520 	rsb	r5, r4, #32
 8000698:	fa00 f304 	lsl.w	r3, r0, r4
 800069c:	fa20 f005 	lsr.w	r0, r0, r5
 80006a0:	fa01 f204 	lsl.w	r2, r1, r4
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	f141 0100 	adc.w	r1, r1, #0
 80006b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b8:	bf08      	it	eq
 80006ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006be:	bd70      	pop	{r4, r5, r6, pc}
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f205 	lsl.w	r2, r0, r5
 80006c8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006cc:	fa20 f304 	lsr.w	r3, r0, r4
 80006d0:	fa01 f205 	lsl.w	r2, r1, r5
 80006d4:	ea43 0302 	orr.w	r3, r3, r2
 80006d8:	fa21 f004 	lsr.w	r0, r1, r4
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	fa21 f204 	lsr.w	r2, r1, r4
 80006e4:	ea20 0002 	bic.w	r0, r0, r2
 80006e8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f0:	bf08      	it	eq
 80006f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f6:	bd70      	pop	{r4, r5, r6, pc}
 80006f8:	f094 0f00 	teq	r4, #0
 80006fc:	d10f      	bne.n	800071e <__aeabi_dmul+0x1c2>
 80006fe:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000702:	0040      	lsls	r0, r0, #1
 8000704:	eb41 0101 	adc.w	r1, r1, r1
 8000708:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800070c:	bf08      	it	eq
 800070e:	3c01      	subeq	r4, #1
 8000710:	d0f7      	beq.n	8000702 <__aeabi_dmul+0x1a6>
 8000712:	ea41 0106 	orr.w	r1, r1, r6
 8000716:	f095 0f00 	teq	r5, #0
 800071a:	bf18      	it	ne
 800071c:	4770      	bxne	lr
 800071e:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000722:	0052      	lsls	r2, r2, #1
 8000724:	eb43 0303 	adc.w	r3, r3, r3
 8000728:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800072c:	bf08      	it	eq
 800072e:	3d01      	subeq	r5, #1
 8000730:	d0f7      	beq.n	8000722 <__aeabi_dmul+0x1c6>
 8000732:	ea43 0306 	orr.w	r3, r3, r6
 8000736:	4770      	bx	lr
 8000738:	ea94 0f0c 	teq	r4, ip
 800073c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000740:	bf18      	it	ne
 8000742:	ea95 0f0c 	teqne	r5, ip
 8000746:	d00c      	beq.n	8000762 <__aeabi_dmul+0x206>
 8000748:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074c:	bf18      	it	ne
 800074e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000752:	d1d1      	bne.n	80006f8 <__aeabi_dmul+0x19c>
 8000754:	ea81 0103 	eor.w	r1, r1, r3
 8000758:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800075c:	f04f 0000 	mov.w	r0, #0
 8000760:	bd70      	pop	{r4, r5, r6, pc}
 8000762:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000766:	bf06      	itte	eq
 8000768:	4610      	moveq	r0, r2
 800076a:	4619      	moveq	r1, r3
 800076c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000770:	d019      	beq.n	80007a6 <__aeabi_dmul+0x24a>
 8000772:	ea94 0f0c 	teq	r4, ip
 8000776:	d102      	bne.n	800077e <__aeabi_dmul+0x222>
 8000778:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800077c:	d113      	bne.n	80007a6 <__aeabi_dmul+0x24a>
 800077e:	ea95 0f0c 	teq	r5, ip
 8000782:	d105      	bne.n	8000790 <__aeabi_dmul+0x234>
 8000784:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000788:	bf1c      	itt	ne
 800078a:	4610      	movne	r0, r2
 800078c:	4619      	movne	r1, r3
 800078e:	d10a      	bne.n	80007a6 <__aeabi_dmul+0x24a>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007aa:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007ae:	bd70      	pop	{r4, r5, r6, pc}

080007b0 <__aeabi_ddiv>:
 80007b0:	b570      	push	{r4, r5, r6, lr}
 80007b2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007b6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007be:	bf1d      	ittte	ne
 80007c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c4:	ea94 0f0c 	teqne	r4, ip
 80007c8:	ea95 0f0c 	teqne	r5, ip
 80007cc:	f000 f8a7 	bleq	800091e <__aeabi_ddiv+0x16e>
 80007d0:	eba4 0405 	sub.w	r4, r4, r5
 80007d4:	ea81 0e03 	eor.w	lr, r1, r3
 80007d8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e0:	f000 8088 	beq.w	80008f4 <__aeabi_ddiv+0x144>
 80007e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e8:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007ec:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007fc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000800:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000804:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000808:	429d      	cmp	r5, r3
 800080a:	bf08      	it	eq
 800080c:	4296      	cmpeq	r6, r2
 800080e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000812:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000816:	d202      	bcs.n	800081e <__aeabi_ddiv+0x6e>
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	1ab6      	subs	r6, r6, r2
 8000820:	eb65 0503 	sbc.w	r5, r5, r3
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800082e:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000832:	ebb6 0e02 	subs.w	lr, r6, r2
 8000836:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083a:	bf22      	ittt	cs
 800083c:	1ab6      	subcs	r6, r6, r2
 800083e:	4675      	movcs	r5, lr
 8000840:	ea40 000c 	orrcs.w	r0, r0, ip
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	ebb6 0e02 	subs.w	lr, r6, r2
 800084e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000852:	bf22      	ittt	cs
 8000854:	1ab6      	subcs	r6, r6, r2
 8000856:	4675      	movcs	r5, lr
 8000858:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	ebb6 0e02 	subs.w	lr, r6, r2
 8000866:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086a:	bf22      	ittt	cs
 800086c:	1ab6      	subcs	r6, r6, r2
 800086e:	4675      	movcs	r5, lr
 8000870:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	ebb6 0e02 	subs.w	lr, r6, r2
 800087e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000882:	bf22      	ittt	cs
 8000884:	1ab6      	subcs	r6, r6, r2
 8000886:	4675      	movcs	r5, lr
 8000888:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800088c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000890:	d018      	beq.n	80008c4 <__aeabi_ddiv+0x114>
 8000892:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000896:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008aa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ae:	d1c0      	bne.n	8000832 <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b4:	d10b      	bne.n	80008ce <__aeabi_ddiv+0x11e>
 80008b6:	ea41 0100 	orr.w	r1, r1, r0
 80008ba:	f04f 0000 	mov.w	r0, #0
 80008be:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008c2:	e7b6      	b.n	8000832 <__aeabi_ddiv+0x82>
 80008c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008c8:	bf04      	itt	eq
 80008ca:	4301      	orreq	r1, r0
 80008cc:	2000      	moveq	r0, #0
 80008ce:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008d2:	bf88      	it	hi
 80008d4:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008d8:	f63f aeaf 	bhi.w	800063a <__aeabi_dmul+0xde>
 80008dc:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e0:	bf04      	itt	eq
 80008e2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ea:	f150 0000 	adcs.w	r0, r0, #0
 80008ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f2:	bd70      	pop	{r4, r5, r6, pc}
 80008f4:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008f8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008fc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000900:	bfc2      	ittt	gt
 8000902:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000906:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090a:	bd70      	popgt	{r4, r5, r6, pc}
 800090c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000910:	f04f 0e00 	mov.w	lr, #0
 8000914:	3c01      	subs	r4, #1
 8000916:	e690      	b.n	800063a <__aeabi_dmul+0xde>
 8000918:	ea45 0e06 	orr.w	lr, r5, r6
 800091c:	e68d      	b.n	800063a <__aeabi_dmul+0xde>
 800091e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000922:	ea94 0f0c 	teq	r4, ip
 8000926:	bf08      	it	eq
 8000928:	ea95 0f0c 	teqeq	r5, ip
 800092c:	f43f af3b 	beq.w	80007a6 <__aeabi_dmul+0x24a>
 8000930:	ea94 0f0c 	teq	r4, ip
 8000934:	d10a      	bne.n	800094c <__aeabi_ddiv+0x19c>
 8000936:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093a:	f47f af34 	bne.w	80007a6 <__aeabi_dmul+0x24a>
 800093e:	ea95 0f0c 	teq	r5, ip
 8000942:	f47f af25 	bne.w	8000790 <__aeabi_dmul+0x234>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e72c      	b.n	80007a6 <__aeabi_dmul+0x24a>
 800094c:	ea95 0f0c 	teq	r5, ip
 8000950:	d106      	bne.n	8000960 <__aeabi_ddiv+0x1b0>
 8000952:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000956:	f43f aefd 	beq.w	8000754 <__aeabi_dmul+0x1f8>
 800095a:	4610      	mov	r0, r2
 800095c:	4619      	mov	r1, r3
 800095e:	e722      	b.n	80007a6 <__aeabi_dmul+0x24a>
 8000960:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000964:	bf18      	it	ne
 8000966:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096a:	f47f aec5 	bne.w	80006f8 <__aeabi_dmul+0x19c>
 800096e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000972:	f47f af0d 	bne.w	8000790 <__aeabi_dmul+0x234>
 8000976:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097a:	f47f aeeb 	bne.w	8000754 <__aeabi_dmul+0x1f8>
 800097e:	e712      	b.n	80007a6 <__aeabi_dmul+0x24a>

08000980 <__aeabi_d2uiz>:
 8000980:	004a      	lsls	r2, r1, #1
 8000982:	d211      	bcs.n	80009a8 <__aeabi_d2uiz+0x28>
 8000984:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000988:	d211      	bcs.n	80009ae <__aeabi_d2uiz+0x2e>
 800098a:	d50d      	bpl.n	80009a8 <__aeabi_d2uiz+0x28>
 800098c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000990:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000994:	d40e      	bmi.n	80009b4 <__aeabi_d2uiz+0x34>
 8000996:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800099a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800099e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009a2:	fa23 f002 	lsr.w	r0, r3, r2
 80009a6:	4770      	bx	lr
 80009a8:	f04f 0000 	mov.w	r0, #0
 80009ac:	4770      	bx	lr
 80009ae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009b2:	d102      	bne.n	80009ba <__aeabi_d2uiz+0x3a>
 80009b4:	f04f 30ff 	mov.w	r0, #4294967295
 80009b8:	4770      	bx	lr
 80009ba:	f04f 0000 	mov.w	r0, #0
 80009be:	4770      	bx	lr

080009c0 <__aeabi_uldivmod>:
 80009c0:	b953      	cbnz	r3, 80009d8 <__aeabi_uldivmod+0x18>
 80009c2:	b94a      	cbnz	r2, 80009d8 <__aeabi_uldivmod+0x18>
 80009c4:	2900      	cmp	r1, #0
 80009c6:	bf08      	it	eq
 80009c8:	2800      	cmpeq	r0, #0
 80009ca:	bf1c      	itt	ne
 80009cc:	f04f 31ff 	movne.w	r1, #4294967295
 80009d0:	f04f 30ff 	movne.w	r0, #4294967295
 80009d4:	f000 b988 	b.w	8000ce8 <__aeabi_idiv0>
 80009d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80009dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009e0:	f000 f806 	bl	80009f0 <__udivmoddi4>
 80009e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009ec:	b004      	add	sp, #16
 80009ee:	4770      	bx	lr

080009f0 <__udivmoddi4>:
 80009f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009f4:	9d08      	ldr	r5, [sp, #32]
 80009f6:	468e      	mov	lr, r1
 80009f8:	4604      	mov	r4, r0
 80009fa:	4688      	mov	r8, r1
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d14a      	bne.n	8000a96 <__udivmoddi4+0xa6>
 8000a00:	428a      	cmp	r2, r1
 8000a02:	4617      	mov	r7, r2
 8000a04:	d962      	bls.n	8000acc <__udivmoddi4+0xdc>
 8000a06:	fab2 f682 	clz	r6, r2
 8000a0a:	b14e      	cbz	r6, 8000a20 <__udivmoddi4+0x30>
 8000a0c:	f1c6 0320 	rsb	r3, r6, #32
 8000a10:	fa01 f806 	lsl.w	r8, r1, r6
 8000a14:	fa20 f303 	lsr.w	r3, r0, r3
 8000a18:	40b7      	lsls	r7, r6
 8000a1a:	ea43 0808 	orr.w	r8, r3, r8
 8000a1e:	40b4      	lsls	r4, r6
 8000a20:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a24:	fa1f fc87 	uxth.w	ip, r7
 8000a28:	fbb8 f1fe 	udiv	r1, r8, lr
 8000a2c:	0c23      	lsrs	r3, r4, #16
 8000a2e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000a32:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a36:	fb01 f20c 	mul.w	r2, r1, ip
 8000a3a:	429a      	cmp	r2, r3
 8000a3c:	d909      	bls.n	8000a52 <__udivmoddi4+0x62>
 8000a3e:	18fb      	adds	r3, r7, r3
 8000a40:	f101 30ff 	add.w	r0, r1, #4294967295
 8000a44:	f080 80ea 	bcs.w	8000c1c <__udivmoddi4+0x22c>
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	f240 80e7 	bls.w	8000c1c <__udivmoddi4+0x22c>
 8000a4e:	3902      	subs	r1, #2
 8000a50:	443b      	add	r3, r7
 8000a52:	1a9a      	subs	r2, r3, r2
 8000a54:	b2a3      	uxth	r3, r4
 8000a56:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a5a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000a62:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a66:	459c      	cmp	ip, r3
 8000a68:	d909      	bls.n	8000a7e <__udivmoddi4+0x8e>
 8000a6a:	18fb      	adds	r3, r7, r3
 8000a6c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a70:	f080 80d6 	bcs.w	8000c20 <__udivmoddi4+0x230>
 8000a74:	459c      	cmp	ip, r3
 8000a76:	f240 80d3 	bls.w	8000c20 <__udivmoddi4+0x230>
 8000a7a:	443b      	add	r3, r7
 8000a7c:	3802      	subs	r0, #2
 8000a7e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a82:	eba3 030c 	sub.w	r3, r3, ip
 8000a86:	2100      	movs	r1, #0
 8000a88:	b11d      	cbz	r5, 8000a92 <__udivmoddi4+0xa2>
 8000a8a:	40f3      	lsrs	r3, r6
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	e9c5 3200 	strd	r3, r2, [r5]
 8000a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a96:	428b      	cmp	r3, r1
 8000a98:	d905      	bls.n	8000aa6 <__udivmoddi4+0xb6>
 8000a9a:	b10d      	cbz	r5, 8000aa0 <__udivmoddi4+0xb0>
 8000a9c:	e9c5 0100 	strd	r0, r1, [r5]
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	4608      	mov	r0, r1
 8000aa4:	e7f5      	b.n	8000a92 <__udivmoddi4+0xa2>
 8000aa6:	fab3 f183 	clz	r1, r3
 8000aaa:	2900      	cmp	r1, #0
 8000aac:	d146      	bne.n	8000b3c <__udivmoddi4+0x14c>
 8000aae:	4573      	cmp	r3, lr
 8000ab0:	d302      	bcc.n	8000ab8 <__udivmoddi4+0xc8>
 8000ab2:	4282      	cmp	r2, r0
 8000ab4:	f200 8105 	bhi.w	8000cc2 <__udivmoddi4+0x2d2>
 8000ab8:	1a84      	subs	r4, r0, r2
 8000aba:	eb6e 0203 	sbc.w	r2, lr, r3
 8000abe:	2001      	movs	r0, #1
 8000ac0:	4690      	mov	r8, r2
 8000ac2:	2d00      	cmp	r5, #0
 8000ac4:	d0e5      	beq.n	8000a92 <__udivmoddi4+0xa2>
 8000ac6:	e9c5 4800 	strd	r4, r8, [r5]
 8000aca:	e7e2      	b.n	8000a92 <__udivmoddi4+0xa2>
 8000acc:	2a00      	cmp	r2, #0
 8000ace:	f000 8090 	beq.w	8000bf2 <__udivmoddi4+0x202>
 8000ad2:	fab2 f682 	clz	r6, r2
 8000ad6:	2e00      	cmp	r6, #0
 8000ad8:	f040 80a4 	bne.w	8000c24 <__udivmoddi4+0x234>
 8000adc:	1a8a      	subs	r2, r1, r2
 8000ade:	0c03      	lsrs	r3, r0, #16
 8000ae0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ae4:	b280      	uxth	r0, r0
 8000ae6:	b2bc      	uxth	r4, r7
 8000ae8:	2101      	movs	r1, #1
 8000aea:	fbb2 fcfe 	udiv	ip, r2, lr
 8000aee:	fb0e 221c 	mls	r2, lr, ip, r2
 8000af2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000af6:	fb04 f20c 	mul.w	r2, r4, ip
 8000afa:	429a      	cmp	r2, r3
 8000afc:	d907      	bls.n	8000b0e <__udivmoddi4+0x11e>
 8000afe:	18fb      	adds	r3, r7, r3
 8000b00:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000b04:	d202      	bcs.n	8000b0c <__udivmoddi4+0x11c>
 8000b06:	429a      	cmp	r2, r3
 8000b08:	f200 80e0 	bhi.w	8000ccc <__udivmoddi4+0x2dc>
 8000b0c:	46c4      	mov	ip, r8
 8000b0e:	1a9b      	subs	r3, r3, r2
 8000b10:	fbb3 f2fe 	udiv	r2, r3, lr
 8000b14:	fb0e 3312 	mls	r3, lr, r2, r3
 8000b18:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000b1c:	fb02 f404 	mul.w	r4, r2, r4
 8000b20:	429c      	cmp	r4, r3
 8000b22:	d907      	bls.n	8000b34 <__udivmoddi4+0x144>
 8000b24:	18fb      	adds	r3, r7, r3
 8000b26:	f102 30ff 	add.w	r0, r2, #4294967295
 8000b2a:	d202      	bcs.n	8000b32 <__udivmoddi4+0x142>
 8000b2c:	429c      	cmp	r4, r3
 8000b2e:	f200 80ca 	bhi.w	8000cc6 <__udivmoddi4+0x2d6>
 8000b32:	4602      	mov	r2, r0
 8000b34:	1b1b      	subs	r3, r3, r4
 8000b36:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000b3a:	e7a5      	b.n	8000a88 <__udivmoddi4+0x98>
 8000b3c:	f1c1 0620 	rsb	r6, r1, #32
 8000b40:	408b      	lsls	r3, r1
 8000b42:	fa22 f706 	lsr.w	r7, r2, r6
 8000b46:	431f      	orrs	r7, r3
 8000b48:	fa0e f401 	lsl.w	r4, lr, r1
 8000b4c:	fa20 f306 	lsr.w	r3, r0, r6
 8000b50:	fa2e fe06 	lsr.w	lr, lr, r6
 8000b54:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000b58:	4323      	orrs	r3, r4
 8000b5a:	fa00 f801 	lsl.w	r8, r0, r1
 8000b5e:	fa1f fc87 	uxth.w	ip, r7
 8000b62:	fbbe f0f9 	udiv	r0, lr, r9
 8000b66:	0c1c      	lsrs	r4, r3, #16
 8000b68:	fb09 ee10 	mls	lr, r9, r0, lr
 8000b6c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000b70:	fb00 fe0c 	mul.w	lr, r0, ip
 8000b74:	45a6      	cmp	lr, r4
 8000b76:	fa02 f201 	lsl.w	r2, r2, r1
 8000b7a:	d909      	bls.n	8000b90 <__udivmoddi4+0x1a0>
 8000b7c:	193c      	adds	r4, r7, r4
 8000b7e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000b82:	f080 809c 	bcs.w	8000cbe <__udivmoddi4+0x2ce>
 8000b86:	45a6      	cmp	lr, r4
 8000b88:	f240 8099 	bls.w	8000cbe <__udivmoddi4+0x2ce>
 8000b8c:	3802      	subs	r0, #2
 8000b8e:	443c      	add	r4, r7
 8000b90:	eba4 040e 	sub.w	r4, r4, lr
 8000b94:	fa1f fe83 	uxth.w	lr, r3
 8000b98:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b9c:	fb09 4413 	mls	r4, r9, r3, r4
 8000ba0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ba4:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ba8:	45a4      	cmp	ip, r4
 8000baa:	d908      	bls.n	8000bbe <__udivmoddi4+0x1ce>
 8000bac:	193c      	adds	r4, r7, r4
 8000bae:	f103 3eff 	add.w	lr, r3, #4294967295
 8000bb2:	f080 8082 	bcs.w	8000cba <__udivmoddi4+0x2ca>
 8000bb6:	45a4      	cmp	ip, r4
 8000bb8:	d97f      	bls.n	8000cba <__udivmoddi4+0x2ca>
 8000bba:	3b02      	subs	r3, #2
 8000bbc:	443c      	add	r4, r7
 8000bbe:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000bc2:	eba4 040c 	sub.w	r4, r4, ip
 8000bc6:	fba0 ec02 	umull	lr, ip, r0, r2
 8000bca:	4564      	cmp	r4, ip
 8000bcc:	4673      	mov	r3, lr
 8000bce:	46e1      	mov	r9, ip
 8000bd0:	d362      	bcc.n	8000c98 <__udivmoddi4+0x2a8>
 8000bd2:	d05f      	beq.n	8000c94 <__udivmoddi4+0x2a4>
 8000bd4:	b15d      	cbz	r5, 8000bee <__udivmoddi4+0x1fe>
 8000bd6:	ebb8 0203 	subs.w	r2, r8, r3
 8000bda:	eb64 0409 	sbc.w	r4, r4, r9
 8000bde:	fa04 f606 	lsl.w	r6, r4, r6
 8000be2:	fa22 f301 	lsr.w	r3, r2, r1
 8000be6:	431e      	orrs	r6, r3
 8000be8:	40cc      	lsrs	r4, r1
 8000bea:	e9c5 6400 	strd	r6, r4, [r5]
 8000bee:	2100      	movs	r1, #0
 8000bf0:	e74f      	b.n	8000a92 <__udivmoddi4+0xa2>
 8000bf2:	fbb1 fcf2 	udiv	ip, r1, r2
 8000bf6:	0c01      	lsrs	r1, r0, #16
 8000bf8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000bfc:	b280      	uxth	r0, r0
 8000bfe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000c02:	463b      	mov	r3, r7
 8000c04:	4638      	mov	r0, r7
 8000c06:	463c      	mov	r4, r7
 8000c08:	46b8      	mov	r8, r7
 8000c0a:	46be      	mov	lr, r7
 8000c0c:	2620      	movs	r6, #32
 8000c0e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000c12:	eba2 0208 	sub.w	r2, r2, r8
 8000c16:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000c1a:	e766      	b.n	8000aea <__udivmoddi4+0xfa>
 8000c1c:	4601      	mov	r1, r0
 8000c1e:	e718      	b.n	8000a52 <__udivmoddi4+0x62>
 8000c20:	4610      	mov	r0, r2
 8000c22:	e72c      	b.n	8000a7e <__udivmoddi4+0x8e>
 8000c24:	f1c6 0220 	rsb	r2, r6, #32
 8000c28:	fa2e f302 	lsr.w	r3, lr, r2
 8000c2c:	40b7      	lsls	r7, r6
 8000c2e:	40b1      	lsls	r1, r6
 8000c30:	fa20 f202 	lsr.w	r2, r0, r2
 8000c34:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c38:	430a      	orrs	r2, r1
 8000c3a:	fbb3 f8fe 	udiv	r8, r3, lr
 8000c3e:	b2bc      	uxth	r4, r7
 8000c40:	fb0e 3318 	mls	r3, lr, r8, r3
 8000c44:	0c11      	lsrs	r1, r2, #16
 8000c46:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c4a:	fb08 f904 	mul.w	r9, r8, r4
 8000c4e:	40b0      	lsls	r0, r6
 8000c50:	4589      	cmp	r9, r1
 8000c52:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000c56:	b280      	uxth	r0, r0
 8000c58:	d93e      	bls.n	8000cd8 <__udivmoddi4+0x2e8>
 8000c5a:	1879      	adds	r1, r7, r1
 8000c5c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000c60:	d201      	bcs.n	8000c66 <__udivmoddi4+0x276>
 8000c62:	4589      	cmp	r9, r1
 8000c64:	d81f      	bhi.n	8000ca6 <__udivmoddi4+0x2b6>
 8000c66:	eba1 0109 	sub.w	r1, r1, r9
 8000c6a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c6e:	fb09 f804 	mul.w	r8, r9, r4
 8000c72:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c76:	b292      	uxth	r2, r2
 8000c78:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c7c:	4542      	cmp	r2, r8
 8000c7e:	d229      	bcs.n	8000cd4 <__udivmoddi4+0x2e4>
 8000c80:	18ba      	adds	r2, r7, r2
 8000c82:	f109 31ff 	add.w	r1, r9, #4294967295
 8000c86:	d2c4      	bcs.n	8000c12 <__udivmoddi4+0x222>
 8000c88:	4542      	cmp	r2, r8
 8000c8a:	d2c2      	bcs.n	8000c12 <__udivmoddi4+0x222>
 8000c8c:	f1a9 0102 	sub.w	r1, r9, #2
 8000c90:	443a      	add	r2, r7
 8000c92:	e7be      	b.n	8000c12 <__udivmoddi4+0x222>
 8000c94:	45f0      	cmp	r8, lr
 8000c96:	d29d      	bcs.n	8000bd4 <__udivmoddi4+0x1e4>
 8000c98:	ebbe 0302 	subs.w	r3, lr, r2
 8000c9c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ca0:	3801      	subs	r0, #1
 8000ca2:	46e1      	mov	r9, ip
 8000ca4:	e796      	b.n	8000bd4 <__udivmoddi4+0x1e4>
 8000ca6:	eba7 0909 	sub.w	r9, r7, r9
 8000caa:	4449      	add	r1, r9
 8000cac:	f1a8 0c02 	sub.w	ip, r8, #2
 8000cb0:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cb4:	fb09 f804 	mul.w	r8, r9, r4
 8000cb8:	e7db      	b.n	8000c72 <__udivmoddi4+0x282>
 8000cba:	4673      	mov	r3, lr
 8000cbc:	e77f      	b.n	8000bbe <__udivmoddi4+0x1ce>
 8000cbe:	4650      	mov	r0, sl
 8000cc0:	e766      	b.n	8000b90 <__udivmoddi4+0x1a0>
 8000cc2:	4608      	mov	r0, r1
 8000cc4:	e6fd      	b.n	8000ac2 <__udivmoddi4+0xd2>
 8000cc6:	443b      	add	r3, r7
 8000cc8:	3a02      	subs	r2, #2
 8000cca:	e733      	b.n	8000b34 <__udivmoddi4+0x144>
 8000ccc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cd0:	443b      	add	r3, r7
 8000cd2:	e71c      	b.n	8000b0e <__udivmoddi4+0x11e>
 8000cd4:	4649      	mov	r1, r9
 8000cd6:	e79c      	b.n	8000c12 <__udivmoddi4+0x222>
 8000cd8:	eba1 0109 	sub.w	r1, r1, r9
 8000cdc:	46c4      	mov	ip, r8
 8000cde:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ce2:	fb09 f804 	mul.w	r8, r9, r4
 8000ce6:	e7c4      	b.n	8000c72 <__udivmoddi4+0x282>

08000ce8 <__aeabi_idiv0>:
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop

08000cec <Set_74HC595>:
	delay_ms(5);
	GPIO_WriteToOutPutPin(Pin_74H595_t->ST_CP.pGPIOx, Pin_74H595_t->ST_CP.GPIO_Pin_Config.GPIO_PinNumber, Low);
	delay_ms(5);
}

Pin_74H595 Set_74HC595(Pin_74H595 *Pin_74H595_t, uint8_t DS_GPIO_PIN_NUM, uint8_t ST_CP_GPIO_PIN_NUM){
 8000cec:	b5b0      	push	{r4, r5, r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	60f8      	str	r0, [r7, #12]
 8000cf4:	60b9      	str	r1, [r7, #8]
 8000cf6:	4611      	mov	r1, r2
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	71fb      	strb	r3, [r7, #7]
 8000cfe:	4613      	mov	r3, r2
 8000d00:	71bb      	strb	r3, [r7, #6]
	GPIOE_PCLK_EN;
 8000d02:	4b30      	ldr	r3, [pc, #192]	@ (8000dc4 <Set_74HC595+0xd8>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d06:	4a2f      	ldr	r2, [pc, #188]	@ (8000dc4 <Set_74HC595+0xd8>)
 8000d08:	f043 0310 	orr.w	r3, r3, #16
 8000d0c:	6313      	str	r3, [r2, #48]	@ 0x30
	Pin_74H595_t->SH_CP.pGPIOx = GPIOE;
 8000d0e:	68bb      	ldr	r3, [r7, #8]
 8000d10:	4a2d      	ldr	r2, [pc, #180]	@ (8000dc8 <Set_74HC595+0xdc>)
 8000d12:	605a      	str	r2, [r3, #4]
	Pin_74H595_t->SH_CP.GPIO_Pin_Config.GPIO_PinNumber = GPIO_PIN_NUM_0;
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	2200      	movs	r2, #0
 8000d18:	721a      	strb	r2, [r3, #8]
	Pin_74H595_t->SH_CP.GPIO_Pin_Config.GPIO_PinMode = GPIO_MODER_OUTPUT;
 8000d1a:	68bb      	ldr	r3, [r7, #8]
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	725a      	strb	r2, [r3, #9]
	Pin_74H595_t->SH_CP.GPIO_Pin_Config.GPIO_PinOPType = GPIO_OTYPER_PP;
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	2200      	movs	r2, #0
 8000d24:	731a      	strb	r2, [r3, #12]
	Pin_74H595_t->SH_CP.GPIO_Pin_Config.GPIO_PinSpeed = GPIO_OSPEEDR_HIGH;
 8000d26:	68bb      	ldr	r3, [r7, #8]
 8000d28:	2202      	movs	r2, #2
 8000d2a:	729a      	strb	r2, [r3, #10]
	Pin_74H595_t->SH_CP.GPIO_Pin_Config.GPIO_PinPuPdControl = GPIO_PUPDR_PU;
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	2201      	movs	r2, #1
 8000d30:	72da      	strb	r2, [r3, #11]
	GPIO_Init(&(Pin_74H595_t->SH_CP));
 8000d32:	68bb      	ldr	r3, [r7, #8]
 8000d34:	3304      	adds	r3, #4
 8000d36:	4618      	mov	r0, r3
 8000d38:	f000 f914 	bl	8000f64 <GPIO_Init>

	Pin_74H595_t->DS.pGPIOx = GPIOE;
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	4a22      	ldr	r2, [pc, #136]	@ (8000dc8 <Set_74HC595+0xdc>)
 8000d40:	611a      	str	r2, [r3, #16]
	Pin_74H595_t->DS.GPIO_Pin_Config.GPIO_PinNumber = DS_GPIO_PIN_NUM;
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	79fa      	ldrb	r2, [r7, #7]
 8000d46:	751a      	strb	r2, [r3, #20]
	Pin_74H595_t->DS.GPIO_Pin_Config.GPIO_PinMode = GPIO_MODER_OUTPUT;
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	755a      	strb	r2, [r3, #21]
	Pin_74H595_t->DS.GPIO_Pin_Config.GPIO_PinOPType = GPIO_OTYPER_PP;
 8000d4e:	68bb      	ldr	r3, [r7, #8]
 8000d50:	2200      	movs	r2, #0
 8000d52:	761a      	strb	r2, [r3, #24]
	Pin_74H595_t->DS.GPIO_Pin_Config.GPIO_PinSpeed = GPIO_OSPEEDR_HIGH;
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	2202      	movs	r2, #2
 8000d58:	759a      	strb	r2, [r3, #22]
	Pin_74H595_t->DS.GPIO_Pin_Config.GPIO_PinPuPdControl = GPIO_PUPDR_PU;
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	75da      	strb	r2, [r3, #23]
	GPIO_Init(&(Pin_74H595_t->DS));
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	3310      	adds	r3, #16
 8000d64:	4618      	mov	r0, r3
 8000d66:	f000 f8fd 	bl	8000f64 <GPIO_Init>

	Pin_74H595_t->ST_CP.pGPIOx = GPIOE;
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	4a16      	ldr	r2, [pc, #88]	@ (8000dc8 <Set_74HC595+0xdc>)
 8000d6e:	61da      	str	r2, [r3, #28]
	Pin_74H595_t->ST_CP.GPIO_Pin_Config.GPIO_PinNumber = ST_CP_GPIO_PIN_NUM;
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	79ba      	ldrb	r2, [r7, #6]
 8000d74:	f883 2020 	strb.w	r2, [r3, #32]
	Pin_74H595_t->ST_CP.GPIO_Pin_Config.GPIO_PinMode = GPIO_MODER_OUTPUT;
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	Pin_74H595_t->ST_CP.GPIO_Pin_Config.GPIO_PinOPType = GPIO_OTYPER_PP;
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	2200      	movs	r2, #0
 8000d84:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	Pin_74H595_t->ST_CP.GPIO_Pin_Config.GPIO_PinSpeed = GPIO_OSPEEDR_HIGH;
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	2202      	movs	r2, #2
 8000d8c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	Pin_74H595_t->ST_CP.GPIO_Pin_Config.GPIO_PinPuPdControl = GPIO_PUPDR_PU;
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	2201      	movs	r2, #1
 8000d94:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	GPIO_Init(&(Pin_74H595_t->ST_CP));
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	331c      	adds	r3, #28
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f000 f8e1 	bl	8000f64 <GPIO_Init>

	return *Pin_74H595_t;
 8000da2:	68fa      	ldr	r2, [r7, #12]
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	4614      	mov	r4, r2
 8000da8:	461d      	mov	r5, r3
 8000daa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000db0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000db2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000db6:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8000dba:	68f8      	ldr	r0, [r7, #12]
 8000dbc:	3710      	adds	r7, #16
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bdb0      	pop	{r4, r5, r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40023800 	.word	0x40023800
 8000dc8:	40021000 	.word	0x40021000

08000dcc <init_74HC595>:

void init_74HC595(uint8_t DS_GPIO_PIN_NUM){
 8000dcc:	b5b0      	push	{r4, r5, r7, lr}
 8000dce:	b08c      	sub	sp, #48	@ 0x30
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (DS_GPIO_PIN_NUM == DS0){
 8000dd8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d112      	bne.n	8000e06 <init_74HC595+0x3a>
		Pin_74H595_0 = Set_74HC595(&Pin_74H595_0, DS_GPIO_PIN_NUM, ST_CP0);
 8000de0:	4c2d      	ldr	r4, [pc, #180]	@ (8000e98 <init_74HC595+0xcc>)
 8000de2:	4638      	mov	r0, r7
 8000de4:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000de8:	2302      	movs	r3, #2
 8000dea:	492b      	ldr	r1, [pc, #172]	@ (8000e98 <init_74HC595+0xcc>)
 8000dec:	f7ff ff7e 	bl	8000cec <Set_74HC595>
 8000df0:	4625      	mov	r5, r4
 8000df2:	463c      	mov	r4, r7
 8000df4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000df6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000df8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dfa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dfc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000e00:	e885 0003 	stmia.w	r5, {r0, r1}
		Pin_74H595_2 = Set_74HC595(&Pin_74H595_2, DS_GPIO_PIN_NUM, ST_CP2);
	}
	else if (DS_GPIO_PIN_NUM == DS3){
		Pin_74H595_2 = Set_74HC595(&Pin_74H595_3, DS_GPIO_PIN_NUM, ST_CP3);
	}
}
 8000e04:	e043      	b.n	8000e8e <init_74HC595+0xc2>
	else if (DS_GPIO_PIN_NUM == DS1){
 8000e06:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e0a:	2b03      	cmp	r3, #3
 8000e0c:	d112      	bne.n	8000e34 <init_74HC595+0x68>
		Pin_74H595_1 = Set_74HC595(&Pin_74H595_1, DS_GPIO_PIN_NUM, ST_CP1);
 8000e0e:	4c23      	ldr	r4, [pc, #140]	@ (8000e9c <init_74HC595+0xd0>)
 8000e10:	4638      	mov	r0, r7
 8000e12:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000e16:	2304      	movs	r3, #4
 8000e18:	4920      	ldr	r1, [pc, #128]	@ (8000e9c <init_74HC595+0xd0>)
 8000e1a:	f7ff ff67 	bl	8000cec <Set_74HC595>
 8000e1e:	4625      	mov	r5, r4
 8000e20:	463c      	mov	r4, r7
 8000e22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e2a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000e2e:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000e32:	e02c      	b.n	8000e8e <init_74HC595+0xc2>
	else if (DS_GPIO_PIN_NUM == DS2){
 8000e34:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e38:	2b05      	cmp	r3, #5
 8000e3a:	d112      	bne.n	8000e62 <init_74HC595+0x96>
		Pin_74H595_2 = Set_74HC595(&Pin_74H595_2, DS_GPIO_PIN_NUM, ST_CP2);
 8000e3c:	4c18      	ldr	r4, [pc, #96]	@ (8000ea0 <init_74HC595+0xd4>)
 8000e3e:	4638      	mov	r0, r7
 8000e40:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000e44:	2306      	movs	r3, #6
 8000e46:	4916      	ldr	r1, [pc, #88]	@ (8000ea0 <init_74HC595+0xd4>)
 8000e48:	f7ff ff50 	bl	8000cec <Set_74HC595>
 8000e4c:	4625      	mov	r5, r4
 8000e4e:	463c      	mov	r4, r7
 8000e50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e58:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000e5c:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000e60:	e015      	b.n	8000e8e <init_74HC595+0xc2>
	else if (DS_GPIO_PIN_NUM == DS3){
 8000e62:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e66:	2b07      	cmp	r3, #7
 8000e68:	d111      	bne.n	8000e8e <init_74HC595+0xc2>
		Pin_74H595_2 = Set_74HC595(&Pin_74H595_3, DS_GPIO_PIN_NUM, ST_CP3);
 8000e6a:	4c0d      	ldr	r4, [pc, #52]	@ (8000ea0 <init_74HC595+0xd4>)
 8000e6c:	4638      	mov	r0, r7
 8000e6e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000e72:	2308      	movs	r3, #8
 8000e74:	490b      	ldr	r1, [pc, #44]	@ (8000ea4 <init_74HC595+0xd8>)
 8000e76:	f7ff ff39 	bl	8000cec <Set_74HC595>
 8000e7a:	4625      	mov	r5, r4
 8000e7c:	463c      	mov	r4, r7
 8000e7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e86:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000e8a:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000e8e:	bf00      	nop
 8000e90:	3730      	adds	r7, #48	@ 0x30
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bdb0      	pop	{r4, r5, r7, pc}
 8000e96:	bf00      	nop
 8000e98:	2000008c 	.word	0x2000008c
 8000e9c:	200000b4 	.word	0x200000b4
 8000ea0:	200000dc 	.word	0x200000dc
 8000ea4:	20000104 	.word	0x20000104

08000ea8 <_ZN6DeviceC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

#include "Device.h"



Device::Device(std::string name){
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	6039      	str	r1, [r7, #0]
	if (name.compare("Living Room") == 0){
 8000eb2:	4929      	ldr	r1, [pc, #164]	@ (8000f58 <_ZN6DeviceC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xb0>)
 8000eb4:	6838      	ldr	r0, [r7, #0]
 8000eb6:	f001 fb48 	bl	800254a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	bf0c      	ite	eq
 8000ec0:	2301      	moveq	r3, #1
 8000ec2:	2300      	movne	r3, #0
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d009      	beq.n	8000ede <_ZN6DeviceC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x36>
		id = em_LV_R;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2202      	movs	r2, #2
 8000ece:	701a      	strb	r2, [r3, #0]
		id_74HC[0] = DS0;	// For led
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	705a      	strb	r2, [r3, #1]
		id_74HC[1] = DS3;	// For LCD
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2207      	movs	r2, #7
 8000eda:	709a      	strb	r2, [r3, #2]
 8000edc:	e024      	b.n	8000f28 <_ZN6DeviceC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x80>
	}
	else if (name.compare("Kitchen Room") == 0){
 8000ede:	491f      	ldr	r1, [pc, #124]	@ (8000f5c <_ZN6DeviceC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xb4>)
 8000ee0:	6838      	ldr	r0, [r7, #0]
 8000ee2:	f001 fb32 	bl	800254a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	bf0c      	ite	eq
 8000eec:	2301      	moveq	r3, #1
 8000eee:	2300      	movne	r3, #0
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d006      	beq.n	8000f04 <_ZN6DeviceC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x5c>
		id = em_KC_R;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2203      	movs	r2, #3
 8000efa:	701a      	strb	r2, [r3, #0]
		id_74HC[0] = DS1;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2203      	movs	r2, #3
 8000f00:	705a      	strb	r2, [r3, #1]
 8000f02:	e011      	b.n	8000f28 <_ZN6DeviceC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x80>
	}

	else if (name.compare("Bed Room") == 0){
 8000f04:	4916      	ldr	r1, [pc, #88]	@ (8000f60 <_ZN6DeviceC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xb8>)
 8000f06:	6838      	ldr	r0, [r7, #0]
 8000f08:	f001 fb1f 	bl	800254a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	bf0c      	ite	eq
 8000f12:	2301      	moveq	r3, #1
 8000f14:	2300      	movne	r3, #0
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d005      	beq.n	8000f28 <_ZN6DeviceC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x80>
		id = em_B_R;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2204      	movs	r2, #4
 8000f20:	701a      	strb	r2, [r3, #0]
		id_74HC[0] = DS2;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2205      	movs	r2, #5
 8000f26:	705a      	strb	r2, [r3, #1]
	}

	// For shift IC
	for (uint8_t i = 0; i < sizeof(id_74HC); i++){
 8000f28:	2300      	movs	r3, #0
 8000f2a:	73fb      	strb	r3, [r7, #15]
 8000f2c:	e009      	b.n	8000f42 <_ZN6DeviceC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x9a>
		init_74HC595(id_74HC[i]);
 8000f2e:	7bfb      	ldrb	r3, [r7, #15]
 8000f30:	687a      	ldr	r2, [r7, #4]
 8000f32:	4413      	add	r3, r2
 8000f34:	785b      	ldrb	r3, [r3, #1]
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff ff48 	bl	8000dcc <init_74HC595>
	for (uint8_t i = 0; i < sizeof(id_74HC); i++){
 8000f3c:	7bfb      	ldrb	r3, [r7, #15]
 8000f3e:	3301      	adds	r3, #1
 8000f40:	73fb      	strb	r3, [r7, #15]
 8000f42:	7bfb      	ldrb	r3, [r7, #15]
 8000f44:	2b04      	cmp	r3, #4
 8000f46:	d9f2      	bls.n	8000f2e <_ZN6DeviceC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x86>
	// For LCD
	if (id_74HC[1] == DS3){
//		lcd_init();
//		i2c_lcd_init();
	}
	start_dht();
 8000f48:	f000 fa32 	bl	80013b0 <start_dht>
}
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3710      	adds	r7, #16
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	080029f4 	.word	0x080029f4
 8000f5c:	08002a00 	.word	0x08002a00
 8000f60:	08002a10 	.word	0x08002a10

08000f64 <GPIO_Init>:
        else if(pGPIOx == GPIOD) GPIOD_PCLK_DIS;
    }
}

//Init and Denit
void GPIO_Init(GPIO_Handle_t *pGPIOHandel){
 8000f64:	b480      	push	{r7}
 8000f66:	b085      	sub	sp, #20
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
    // 1.Configgure mode GPIO pin
    uint32_t temp = 0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	60fb      	str	r3, [r7, #12]
    if(pGPIOHandel->GPIO_Pin_Config.GPIO_PinMode <= GPIO_MODER_ANALOG){
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	795b      	ldrb	r3, [r3, #5]
 8000f74:	2b03      	cmp	r3, #3
 8000f76:	d81f      	bhi.n	8000fb8 <GPIO_Init+0x54>
        temp = pGPIOHandel->GPIO_Pin_Config.GPIO_PinMode << (2* pGPIOHandel->GPIO_Pin_Config.GPIO_PinNumber);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	795b      	ldrb	r3, [r3, #5]
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	791b      	ldrb	r3, [r3, #4]
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	60fb      	str	r3, [r7, #12]
        pGPIOHandel->pGPIOx->MODER &= ~(3 << (2* pGPIOHandel->GPIO_Pin_Config.GPIO_PinNumber));
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	791b      	ldrb	r3, [r3, #4]
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	2103      	movs	r1, #3
 8000f98:	fa01 f303 	lsl.w	r3, r1, r3
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	400a      	ands	r2, r1
 8000fa6:	601a      	str	r2, [r3, #0]
        pGPIOHandel->pGPIOx->MODER |= temp;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	6819      	ldr	r1, [r3, #0]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	68fa      	ldr	r2, [r7, #12]
 8000fb4:	430a      	orrs	r2, r1
 8000fb6:	601a      	str	r2, [r3, #0]
    }
    else{
        // Interrupt
    }
    temp = 0;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	60fb      	str	r3, [r7, #12]
    // 2.Configure speed
    if(pGPIOHandel->GPIO_Pin_Config.GPIO_PinSpeed <= GPIO_OSPEEDR_VERYHIGH){
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	799b      	ldrb	r3, [r3, #6]
 8000fc0:	2b03      	cmp	r3, #3
 8000fc2:	d81f      	bhi.n	8001004 <GPIO_Init+0xa0>
        temp = pGPIOHandel->GPIO_Pin_Config.GPIO_PinSpeed << (2* pGPIOHandel->GPIO_Pin_Config.GPIO_PinNumber);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	799b      	ldrb	r3, [r3, #6]
 8000fc8:	461a      	mov	r2, r3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	791b      	ldrb	r3, [r3, #4]
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	60fb      	str	r3, [r7, #12]
        pGPIOHandel->pGPIOx->OSPEEDR &= ~(3 << (2* pGPIOHandel->GPIO_Pin_Config.GPIO_PinNumber));
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	689a      	ldr	r2, [r3, #8]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	791b      	ldrb	r3, [r3, #4]
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	2103      	movs	r1, #3
 8000fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	4619      	mov	r1, r3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	400a      	ands	r2, r1
 8000ff2:	609a      	str	r2, [r3, #8]
        pGPIOHandel->pGPIOx->OSPEEDR |= temp;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	6899      	ldr	r1, [r3, #8]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	68fa      	ldr	r2, [r7, #12]
 8001000:	430a      	orrs	r2, r1
 8001002:	609a      	str	r2, [r3, #8]
    }
    else{
       // Interrupt
    }
    temp = 0;
 8001004:	2300      	movs	r3, #0
 8001006:	60fb      	str	r3, [r7, #12]

    // 3.Configure pupd setting
    if(pGPIOHandel->GPIO_Pin_Config.GPIO_PinPuPdControl <= GPIO_PUPDR_RESERVED){
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	79db      	ldrb	r3, [r3, #7]
 800100c:	2b03      	cmp	r3, #3
 800100e:	d81f      	bhi.n	8001050 <GPIO_Init+0xec>
        temp = pGPIOHandel->GPIO_Pin_Config.GPIO_PinPuPdControl << (2* pGPIOHandel->GPIO_Pin_Config.GPIO_PinNumber);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	79db      	ldrb	r3, [r3, #7]
 8001014:	461a      	mov	r2, r3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	791b      	ldrb	r3, [r3, #4]
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	60fb      	str	r3, [r7, #12]
        pGPIOHandel->pGPIOx->PUPDR &= ~(3 << (2* pGPIOHandel->GPIO_Pin_Config.GPIO_PinNumber));
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	68da      	ldr	r2, [r3, #12]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	791b      	ldrb	r3, [r3, #4]
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	2103      	movs	r1, #3
 8001030:	fa01 f303 	lsl.w	r3, r1, r3
 8001034:	43db      	mvns	r3, r3
 8001036:	4619      	mov	r1, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	400a      	ands	r2, r1
 800103e:	60da      	str	r2, [r3, #12]
        pGPIOHandel->pGPIOx->PUPDR |= temp;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	68d9      	ldr	r1, [r3, #12]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	68fa      	ldr	r2, [r7, #12]
 800104c:	430a      	orrs	r2, r1
 800104e:	60da      	str	r2, [r3, #12]
    }
    else{
        // Interrupt
    }
    temp = 0;
 8001050:	2300      	movs	r3, #0
 8001052:	60fb      	str	r3, [r7, #12]
    // 4.Configure otype
    if(pGPIOHandel->GPIO_Pin_Config.GPIO_PinOPType <= GPIO_OTYPER_OD){
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	7a1b      	ldrb	r3, [r3, #8]
 8001058:	2b01      	cmp	r3, #1
 800105a:	d81d      	bhi.n	8001098 <GPIO_Init+0x134>
        temp = pGPIOHandel->GPIO_Pin_Config.GPIO_PinOPType << pGPIOHandel->GPIO_Pin_Config.GPIO_PinNumber;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	7a1b      	ldrb	r3, [r3, #8]
 8001060:	461a      	mov	r2, r3
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	791b      	ldrb	r3, [r3, #4]
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	60fb      	str	r3, [r7, #12]
        pGPIOHandel->pGPIOx->OTYPER &= ~(1 << pGPIOHandel->GPIO_Pin_Config.GPIO_PinNumber);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	685a      	ldr	r2, [r3, #4]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	791b      	ldrb	r3, [r3, #4]
 8001076:	4619      	mov	r1, r3
 8001078:	2301      	movs	r3, #1
 800107a:	408b      	lsls	r3, r1
 800107c:	43db      	mvns	r3, r3
 800107e:	4619      	mov	r1, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	400a      	ands	r2, r1
 8001086:	605a      	str	r2, [r3, #4]
        pGPIOHandel->pGPIOx->OTYPER |= temp;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	6859      	ldr	r1, [r3, #4]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	68fa      	ldr	r2, [r7, #12]
 8001094:	430a      	orrs	r2, r1
 8001096:	605a      	str	r2, [r3, #4]
    }
    else{
        // Interrupt
    }
    temp = 0;
 8001098:	2300      	movs	r3, #0
 800109a:	60fb      	str	r3, [r7, #12]
    // 5.Configure alt func mode
	if (pGPIOHandel->GPIO_Pin_Config.GPIO_PinAltFunMode_High <= GPIO_AFRH_AF15){
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	7a5b      	ldrb	r3, [r3, #9]
 80010a0:	2b0f      	cmp	r3, #15
 80010a2:	d821      	bhi.n	80010e8 <GPIO_Init+0x184>
		temp = pGPIOHandel->GPIO_Pin_Config.GPIO_PinAltFunMode_High << (4 * (pGPIOHandel->GPIO_Pin_Config.GPIO_PinNumber - 8));
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	7a5b      	ldrb	r3, [r3, #9]
 80010a8:	461a      	mov	r2, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	791b      	ldrb	r3, [r3, #4]
 80010ae:	3b08      	subs	r3, #8
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
 80010b6:	60fb      	str	r3, [r7, #12]
		pGPIOHandel->pGPIOx->AFRH &= ~(4 << (4 * (pGPIOHandel->GPIO_Pin_Config.GPIO_PinNumber - 8)));
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	791b      	ldrb	r3, [r3, #4]
 80010c2:	3b08      	subs	r3, #8
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	2104      	movs	r1, #4
 80010c8:	fa01 f303 	lsl.w	r3, r1, r3
 80010cc:	43db      	mvns	r3, r3
 80010ce:	4619      	mov	r1, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	400a      	ands	r2, r1
 80010d6:	625a      	str	r2, [r3, #36]	@ 0x24
		pGPIOHandel->pGPIOx->AFRH |= temp;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	68fa      	ldr	r2, [r7, #12]
 80010e4:	430a      	orrs	r2, r1
 80010e6:	625a      	str	r2, [r3, #36]	@ 0x24
	}

	temp = 0;
 80010e8:	2300      	movs	r3, #0
 80010ea:	60fb      	str	r3, [r7, #12]
	if (pGPIOHandel->GPIO_Pin_Config.GPIO_PinAltFunMode_Low <= GPIO_AFRL_AF15){
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	7a9b      	ldrb	r3, [r3, #10]
 80010f0:	2b0f      	cmp	r3, #15
 80010f2:	d81f      	bhi.n	8001134 <GPIO_Init+0x1d0>
		temp = pGPIOHandel->GPIO_Pin_Config.GPIO_PinAltFunMode_Low << (4 * (pGPIOHandel->GPIO_Pin_Config.GPIO_PinNumber));
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	7a9b      	ldrb	r3, [r3, #10]
 80010f8:	461a      	mov	r2, r3
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	791b      	ldrb	r3, [r3, #4]
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	60fb      	str	r3, [r7, #12]
		pGPIOHandel->pGPIOx->AFRL &= ~(4 << (4 * (pGPIOHandel->GPIO_Pin_Config.GPIO_PinNumber)));
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	6a1a      	ldr	r2, [r3, #32]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	791b      	ldrb	r3, [r3, #4]
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	2104      	movs	r1, #4
 8001114:	fa01 f303 	lsl.w	r3, r1, r3
 8001118:	43db      	mvns	r3, r3
 800111a:	4619      	mov	r1, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	400a      	ands	r2, r1
 8001122:	621a      	str	r2, [r3, #32]
		pGPIOHandel->pGPIOx->AFRL |= temp;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	6a19      	ldr	r1, [r3, #32]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	68fa      	ldr	r2, [r7, #12]
 8001130:	430a      	orrs	r2, r1
 8001132:	621a      	str	r2, [r3, #32]
	}
	temp = 0;
 8001134:	2300      	movs	r3, #0
 8001136:	60fb      	str	r3, [r7, #12]
}
 8001138:	bf00      	nop
 800113a:	3714      	adds	r7, #20
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <GPIO_ReadFromInputPin>:
    else if(pGPIOx == GPIOC) GPIOC_REG_RST();
    else if(pGPIOx == GPIOD) GPIOC_REG_RST();
}

// Data read and write
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIO, uint8_t GPIO_PinNumber){
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	460b      	mov	r3, r1
 800114e:	70fb      	strb	r3, [r7, #3]
    uint8_t value;
    value = (uint8_t)((pGPIO->IDR >> GPIO_PinNumber) & 0x00000001);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	691a      	ldr	r2, [r3, #16]
 8001154:	78fb      	ldrb	r3, [r7, #3]
 8001156:	fa22 f303 	lsr.w	r3, r2, r3
 800115a:	b2db      	uxtb	r3, r3
 800115c:	f003 0301 	and.w	r3, r3, #1
 8001160:	73fb      	strb	r3, [r7, #15]
    return value;
 8001162:	7bfb      	ldrb	r3, [r7, #15]
}
 8001164:	4618      	mov	r0, r3
 8001166:	3714      	adds	r7, #20
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <GPIO_WriteToOutPutPin>:
    uint16_t value;
    value = (uint16_t)(pGPIOx->IDR);
    return value;
}

void GPIO_WriteToOutPutPin(GPIO_RegDef_t *pGPIOx, uint8_t GPIO_PinNumber, uint8_t Status){
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	460b      	mov	r3, r1
 800117a:	70fb      	strb	r3, [r7, #3]
 800117c:	4613      	mov	r3, r2
 800117e:	70bb      	strb	r3, [r7, #2]
    if(Status == GPIO_PIN_SET){
 8001180:	78bb      	ldrb	r3, [r7, #2]
 8001182:	2b01      	cmp	r3, #1
 8001184:	d109      	bne.n	800119a <GPIO_WriteToOutPutPin+0x2a>
        pGPIOx->ODR |= (1 << GPIO_PinNumber);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	695b      	ldr	r3, [r3, #20]
 800118a:	78fa      	ldrb	r2, [r7, #3]
 800118c:	2101      	movs	r1, #1
 800118e:	fa01 f202 	lsl.w	r2, r1, r2
 8001192:	431a      	orrs	r2, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	615a      	str	r2, [r3, #20]
    }
    else{
        pGPIOx->ODR &= ~(1 << GPIO_PinNumber);
    }
}
 8001198:	e009      	b.n	80011ae <GPIO_WriteToOutPutPin+0x3e>
        pGPIOx->ODR &= ~(1 << GPIO_PinNumber);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	695b      	ldr	r3, [r3, #20]
 800119e:	78fa      	ldrb	r2, [r7, #3]
 80011a0:	2101      	movs	r1, #1
 80011a2:	fa01 f202 	lsl.w	r2, r1, r2
 80011a6:	43d2      	mvns	r2, r2
 80011a8:	401a      	ands	r2, r3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	615a      	str	r2, [r3, #20]
}
 80011ae:	bf00      	nop
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
	...

080011bc <Config_GPIO_USART>:
#include"USART.h"

static void Config_GPIO_USART();
static uint8_t USART_GetFlagStatus(USART_RegDef_t *pUARTx,uint32_t FlagName);
// Enable GPIO for I2C
static void Config_GPIO_USART(){
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0
	GPIOA_PCLK_EN;
 80011c2:	4b17      	ldr	r3, [pc, #92]	@ (8001220 <Config_GPIO_USART+0x64>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c6:	4a16      	ldr	r2, [pc, #88]	@ (8001220 <Config_GPIO_USART+0x64>)
 80011c8:	f043 0301 	orr.w	r3, r3, #1
 80011cc:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIO_Handle_t PA2;	// TX
	PA2.pGPIOx = GPIOA;
 80011ce:	4b15      	ldr	r3, [pc, #84]	@ (8001224 <Config_GPIO_USART+0x68>)
 80011d0:	60fb      	str	r3, [r7, #12]
	PA2.GPIO_Pin_Config.GPIO_PinNumber = GPIO_PIN_NUM_2;
 80011d2:	2302      	movs	r3, #2
 80011d4:	743b      	strb	r3, [r7, #16]
	PA2.GPIO_Pin_Config.GPIO_PinMode = GPIO_MODER_ALTFM;
 80011d6:	2302      	movs	r3, #2
 80011d8:	747b      	strb	r3, [r7, #17]
	PA2.GPIO_Pin_Config.GPIO_PinOPType = GPIO_OTYPER_PP;
 80011da:	2300      	movs	r3, #0
 80011dc:	753b      	strb	r3, [r7, #20]
	PA2.GPIO_Pin_Config.GPIO_PinSpeed = GPIO_OSPEEDR_HIGH;
 80011de:	2302      	movs	r3, #2
 80011e0:	74bb      	strb	r3, [r7, #18]
	PA2.GPIO_Pin_Config.GPIO_PinPuPdControl = GPIO_PUPDR_NOPUPD;
 80011e2:	2300      	movs	r3, #0
 80011e4:	74fb      	strb	r3, [r7, #19]
	PA2.GPIO_Pin_Config.GPIO_PinAltFunMode_Low = GPIO_AFRL_AF7;
 80011e6:	2307      	movs	r3, #7
 80011e8:	75bb      	strb	r3, [r7, #22]
	GPIO_Init(&PA2);
 80011ea:	f107 030c 	add.w	r3, r7, #12
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff feb8 	bl	8000f64 <GPIO_Init>

	GPIO_Handle_t PA3;	// RX
	PA3.pGPIOx = GPIOA;
 80011f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001224 <Config_GPIO_USART+0x68>)
 80011f6:	603b      	str	r3, [r7, #0]
	PA3.GPIO_Pin_Config.GPIO_PinNumber = GPIO_PIN_NUM_3;
 80011f8:	2303      	movs	r3, #3
 80011fa:	713b      	strb	r3, [r7, #4]
	PA3.GPIO_Pin_Config.GPIO_PinMode = GPIO_MODER_ALTFM;
 80011fc:	2302      	movs	r3, #2
 80011fe:	717b      	strb	r3, [r7, #5]
	PA3.GPIO_Pin_Config.GPIO_PinOPType = GPIO_OTYPER_PP;
 8001200:	2300      	movs	r3, #0
 8001202:	723b      	strb	r3, [r7, #8]
	PA3.GPIO_Pin_Config.GPIO_PinSpeed = GPIO_OSPEEDR_HIGH;
 8001204:	2302      	movs	r3, #2
 8001206:	71bb      	strb	r3, [r7, #6]
	PA3.GPIO_Pin_Config.GPIO_PinPuPdControl = GPIO_PUPDR_NOPUPD;
 8001208:	2300      	movs	r3, #0
 800120a:	71fb      	strb	r3, [r7, #7]
	PA3.GPIO_Pin_Config.GPIO_PinAltFunMode_Low = GPIO_AFRL_AF7;
 800120c:	2307      	movs	r3, #7
 800120e:	72bb      	strb	r3, [r7, #10]
	GPIO_Init(&PA3);
 8001210:	463b      	mov	r3, r7
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff fea6 	bl	8000f64 <GPIO_Init>
}
 8001218:	bf00      	nop
 800121a:	3718      	adds	r7, #24
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40023800 	.word	0x40023800
 8001224:	40020000 	.word	0x40020000

08001228 <USART_Init>:

void USART_Init(USART_Handle_t *pUSARTHandle)
{
 8001228:	b5b0      	push	{r4, r5, r7, lr}
 800122a:	b088      	sub	sp, #32
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
	//Config GPIO
	Config_GPIO_USART();
 8001230:	f7ff ffc4 	bl	80011bc <Config_GPIO_USART>
	// Enable USART
	USART2_PLCK_EN;
 8001234:	4b42      	ldr	r3, [pc, #264]	@ (8001340 <USART_Init+0x118>)
 8001236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001238:	4a41      	ldr	r2, [pc, #260]	@ (8001340 <USART_Init+0x118>)
 800123a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800123e:	6413      	str	r3, [r2, #64]	@ 0x40

	// Enable USART (TE, RE, UE)
	pUSARTHandle->pUSARTx->CR1 = 0x00;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2200      	movs	r2, #0
 8001246:	60da      	str	r2, [r3, #12]
	pUSARTHandle->pUSARTx->CR1 |= (1<<13);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	68da      	ldr	r2, [r3, #12]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001256:	60da      	str	r2, [r3, #12]

	pUSARTHandle->pUSARTx->CR1 |= (1<<2);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	68da      	ldr	r2, [r3, #12]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f042 0204 	orr.w	r2, r2, #4
 8001266:	60da      	str	r2, [r3, #12]
	pUSARTHandle->pUSARTx->CR1 |= (1<<3);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	68da      	ldr	r2, [r3, #12]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f042 0208 	orr.w	r2, r2, #8
 8001276:	60da      	str	r2, [r3, #12]

	//pUSARTHandle->pUSARTx->CR1 |= (M<<12);  // M =0; 8 bit word length

	// Set Baud rate
	uint32_t pclk1 = RCC_GetPCLK1Value();
 8001278:	f000 fa12 	bl	80016a0 <RCC_GetPCLK1Value>
 800127c:	61f8      	str	r0, [r7, #28]

	if (pUSARTHandle->USART_Config.USART_Baud > 0){
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d057      	beq.n	8001336 <USART_Init+0x10e>
	    uint8_t over8 = (pUSARTHandle->pUSARTx->CR1 >> 15) & 0x1;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	0bdb      	lsrs	r3, r3, #15
 800128e:	b2db      	uxtb	r3, r3
 8001290:	f003 0301 	and.w	r3, r3, #1
 8001294:	76fb      	strb	r3, [r7, #27]
	    uint8_t div = over8 ? 8 : 16;
 8001296:	7efb      	ldrb	r3, [r7, #27]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <USART_Init+0x78>
 800129c:	2308      	movs	r3, #8
 800129e:	e000      	b.n	80012a2 <USART_Init+0x7a>
 80012a0:	2310      	movs	r3, #16
 80012a2:	76bb      	strb	r3, [r7, #26]

	    double usartdiv = (double)pclk1 / (div * pUSARTHandle->USART_Config.USART_Baud);
 80012a4:	69f8      	ldr	r0, [r7, #28]
 80012a6:	f7ff f8df 	bl	8000468 <__aeabi_ui2d>
 80012aa:	4604      	mov	r4, r0
 80012ac:	460d      	mov	r5, r1
 80012ae:	7ebb      	ldrb	r3, [r7, #26]
 80012b0:	687a      	ldr	r2, [r7, #4]
 80012b2:	6892      	ldr	r2, [r2, #8]
 80012b4:	fb02 f303 	mul.w	r3, r2, r3
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff f8d5 	bl	8000468 <__aeabi_ui2d>
 80012be:	4602      	mov	r2, r0
 80012c0:	460b      	mov	r3, r1
 80012c2:	4620      	mov	r0, r4
 80012c4:	4629      	mov	r1, r5
 80012c6:	f7ff fa73 	bl	80007b0 <__aeabi_ddiv>
 80012ca:	4602      	mov	r2, r0
 80012cc:	460b      	mov	r3, r1
 80012ce:	e9c7 2304 	strd	r2, r3, [r7, #16]
	    uint32_t mantissa = (uint32_t)usartdiv;
 80012d2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80012d6:	f7ff fb53 	bl	8000980 <__aeabi_d2uiz>
 80012da:	4603      	mov	r3, r0
 80012dc:	60fb      	str	r3, [r7, #12]
	    uint32_t fraction = (uint32_t)((usartdiv - mantissa) * ((over8) ? 8 : 16));
 80012de:	68f8      	ldr	r0, [r7, #12]
 80012e0:	f7ff f8c2 	bl	8000468 <__aeabi_ui2d>
 80012e4:	4602      	mov	r2, r0
 80012e6:	460b      	mov	r3, r1
 80012e8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80012ec:	f7fe ff7e 	bl	80001ec <__aeabi_dsub>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	4614      	mov	r4, r2
 80012f6:	461d      	mov	r5, r3
 80012f8:	7efb      	ldrb	r3, [r7, #27]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d003      	beq.n	8001306 <USART_Init+0xde>
 80012fe:	f04f 0000 	mov.w	r0, #0
 8001302:	4910      	ldr	r1, [pc, #64]	@ (8001344 <USART_Init+0x11c>)
 8001304:	e002      	b.n	800130c <USART_Init+0xe4>
 8001306:	f04f 0000 	mov.w	r0, #0
 800130a:	490f      	ldr	r1, [pc, #60]	@ (8001348 <USART_Init+0x120>)
 800130c:	4622      	mov	r2, r4
 800130e:	462b      	mov	r3, r5
 8001310:	f7ff f924 	bl	800055c <__aeabi_dmul>
 8001314:	4602      	mov	r2, r0
 8001316:	460b      	mov	r3, r1
 8001318:	4610      	mov	r0, r2
 800131a:	4619      	mov	r1, r3
 800131c:	f7ff fb30 	bl	8000980 <__aeabi_d2uiz>
 8001320:	4603      	mov	r3, r0
 8001322:	60bb      	str	r3, [r7, #8]

	    pUSARTHandle->pUSARTx->BRR = (mantissa << 4) | (fraction & 0xF);
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	0119      	lsls	r1, r3, #4
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	f003 020f 	and.w	r2, r3, #15
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	430a      	orrs	r2, r1
 8001334:	609a      	str	r2, [r3, #8]
	}
}
 8001336:	bf00      	nop
 8001338:	3720      	adds	r7, #32
 800133a:	46bd      	mov	sp, r7
 800133c:	bdb0      	pop	{r4, r5, r7, pc}
 800133e:	bf00      	nop
 8001340:	40023800 	.word	0x40023800
 8001344:	40200000 	.word	0x40200000
 8001348:	40300000 	.word	0x40300000

0800134c <IO_Write>:
#include "dht11.h"

GPIO_Handle_t DHT11_Pin;

static void IO_Write(uint8_t RoW);
static void IO_Write(uint8_t RoW){
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	71fb      	strb	r3, [r7, #7]
	GPIOE_PCLK_EN;
 8001356:	4b13      	ldr	r3, [pc, #76]	@ (80013a4 <IO_Write+0x58>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135a:	4a12      	ldr	r2, [pc, #72]	@ (80013a4 <IO_Write+0x58>)
 800135c:	f043 0310 	orr.w	r3, r3, #16
 8001360:	6313      	str	r3, [r2, #48]	@ 0x30
	DHT11_Pin.pGPIOx = GPIOE;
 8001362:	4b11      	ldr	r3, [pc, #68]	@ (80013a8 <IO_Write+0x5c>)
 8001364:	4a11      	ldr	r2, [pc, #68]	@ (80013ac <IO_Write+0x60>)
 8001366:	601a      	str	r2, [r3, #0]
	DHT11_Pin.GPIO_Pin_Config.GPIO_PinNumber = GPIO_PIN_NUM_9;
 8001368:	4b0f      	ldr	r3, [pc, #60]	@ (80013a8 <IO_Write+0x5c>)
 800136a:	2209      	movs	r2, #9
 800136c:	711a      	strb	r2, [r3, #4]
	DHT11_Pin.GPIO_Pin_Config.GPIO_PinSpeed = GPIO_OSPEEDR_LOW;
 800136e:	4b0e      	ldr	r3, [pc, #56]	@ (80013a8 <IO_Write+0x5c>)
 8001370:	2200      	movs	r2, #0
 8001372:	719a      	strb	r2, [r3, #6]
	DHT11_Pin.GPIO_Pin_Config.GPIO_PinOPType = GPIO_OTYPER_PP;
 8001374:	4b0c      	ldr	r3, [pc, #48]	@ (80013a8 <IO_Write+0x5c>)
 8001376:	2200      	movs	r2, #0
 8001378:	721a      	strb	r2, [r3, #8]
	DHT11_Pin.GPIO_Pin_Config.GPIO_PinPuPdControl = GPIO_PUPDR_PU;
 800137a:	4b0b      	ldr	r3, [pc, #44]	@ (80013a8 <IO_Write+0x5c>)
 800137c:	2201      	movs	r2, #1
 800137e:	71da      	strb	r2, [r3, #7]

	if (RoW == Read){
 8001380:	79fb      	ldrb	r3, [r7, #7]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d103      	bne.n	800138e <IO_Write+0x42>
		DHT11_Pin.GPIO_Pin_Config.GPIO_PinMode = GPIO_MODER_INPUT;
 8001386:	4b08      	ldr	r3, [pc, #32]	@ (80013a8 <IO_Write+0x5c>)
 8001388:	2200      	movs	r2, #0
 800138a:	715a      	strb	r2, [r3, #5]
 800138c:	e002      	b.n	8001394 <IO_Write+0x48>
	}else{
		DHT11_Pin.GPIO_Pin_Config.GPIO_PinMode = GPIO_MODER_OUTPUT;
 800138e:	4b06      	ldr	r3, [pc, #24]	@ (80013a8 <IO_Write+0x5c>)
 8001390:	2201      	movs	r2, #1
 8001392:	715a      	strb	r2, [r3, #5]
	}
	GPIO_Init(&DHT11_Pin);
 8001394:	4804      	ldr	r0, [pc, #16]	@ (80013a8 <IO_Write+0x5c>)
 8001396:	f7ff fde5 	bl	8000f64 <GPIO_Init>
}
 800139a:	bf00      	nop
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40023800 	.word	0x40023800
 80013a8:	2000012c 	.word	0x2000012c
 80013ac:	40021000 	.word	0x40021000

080013b0 <start_dht>:

uint8_t start_dht(void){
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
	IO_Write(Write);
 80013b6:	2000      	movs	r0, #0
 80013b8:	f7ff ffc8 	bl	800134c <IO_Write>

	// MCU Sends out Start Signal to DHT
	GPIO_WriteToOutPutPin(DHT11_Pin.pGPIOx, 9, Low);
 80013bc:	4b1b      	ldr	r3, [pc, #108]	@ (800142c <start_dht+0x7c>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2200      	movs	r2, #0
 80013c2:	2109      	movs	r1, #9
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff fed3 	bl	8001170 <GPIO_WriteToOutPutPin>
	delay_ms(20);
 80013ca:	2300      	movs	r3, #0
 80013cc:	60fb      	str	r3, [r7, #12]
 80013ce:	e018      	b.n	8001402 <start_dht+0x52>
 80013d0:	4b17      	ldr	r3, [pc, #92]	@ (8001430 <start_dht+0x80>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	60bb      	str	r3, [r7, #8]
 80013d6:	f000 f9b5 	bl	8001744 <RCC_GetSystemClock>
 80013da:	4603      	mov	r3, r0
 80013dc:	4a15      	ldr	r2, [pc, #84]	@ (8001434 <start_dht+0x84>)
 80013de:	fba2 2303 	umull	r2, r3, r2, r3
 80013e2:	0c9b      	lsrs	r3, r3, #18
 80013e4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80013e8:	fb02 f303 	mul.w	r3, r2, r3
 80013ec:	607b      	str	r3, [r7, #4]
 80013ee:	4b10      	ldr	r3, [pc, #64]	@ (8001430 <start_dht+0x80>)
 80013f0:	685a      	ldr	r2, [r3, #4]
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d8f8      	bhi.n	80013ee <start_dht+0x3e>
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	3301      	adds	r3, #1
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	2b13      	cmp	r3, #19
 8001406:	d9e3      	bls.n	80013d0 <start_dht+0x20>
	GPIO_WriteToOutPutPin(DHT11_Pin.pGPIOx, 9, High);
 8001408:	4b08      	ldr	r3, [pc, #32]	@ (800142c <start_dht+0x7c>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2201      	movs	r2, #1
 800140e:	2109      	movs	r1, #9
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff fead 	bl	8001170 <GPIO_WriteToOutPutPin>

	IO_Write(Read);
 8001416:	2001      	movs	r0, #1
 8001418:	f7ff ff98 	bl	800134c <IO_Write>

	return CheckResponse();
 800141c:	f000 f80c 	bl	8001438 <CheckResponse>
 8001420:	4603      	mov	r3, r0
}
 8001422:	4618      	mov	r0, r3
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	2000012c 	.word	0x2000012c
 8001430:	e0001000 	.word	0xe0001000
 8001434:	431bde83 	.word	0x431bde83

08001438 <CheckResponse>:

uint8_t CheckResponse(){
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
	//Check response
	delay_us(40);
 800143e:	4b29      	ldr	r3, [pc, #164]	@ (80014e4 <CheckResponse+0xac>)
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	f000 f97e 	bl	8001744 <RCC_GetSystemClock>
 8001448:	4603      	mov	r3, r0
 800144a:	4a27      	ldr	r2, [pc, #156]	@ (80014e8 <CheckResponse+0xb0>)
 800144c:	fba2 2303 	umull	r2, r3, r2, r3
 8001450:	0c9a      	lsrs	r2, r3, #18
 8001452:	4613      	mov	r3, r2
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	4413      	add	r3, r2
 8001458:	00db      	lsls	r3, r3, #3
 800145a:	60bb      	str	r3, [r7, #8]
 800145c:	4b21      	ldr	r3, [pc, #132]	@ (80014e4 <CheckResponse+0xac>)
 800145e:	685a      	ldr	r2, [r3, #4]
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	68ba      	ldr	r2, [r7, #8]
 8001466:	429a      	cmp	r2, r3
 8001468:	d8f8      	bhi.n	800145c <CheckResponse+0x24>

	if (!(GPIO_ReadFromInputPin(DHT11_Pin.pGPIOx, 9))){	// Check DHT pin low
 800146a:	4b20      	ldr	r3, [pc, #128]	@ (80014ec <CheckResponse+0xb4>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2109      	movs	r1, #9
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff fe67 	bl	8001144 <GPIO_ReadFromInputPin>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d12b      	bne.n	80014d4 <CheckResponse+0x9c>
		delay_us(80);
 800147c:	4b19      	ldr	r3, [pc, #100]	@ (80014e4 <CheckResponse+0xac>)
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	607b      	str	r3, [r7, #4]
 8001482:	f000 f95f 	bl	8001744 <RCC_GetSystemClock>
 8001486:	4603      	mov	r3, r0
 8001488:	4a17      	ldr	r2, [pc, #92]	@ (80014e8 <CheckResponse+0xb0>)
 800148a:	fba2 2303 	umull	r2, r3, r2, r3
 800148e:	0c9a      	lsrs	r2, r3, #18
 8001490:	4613      	mov	r3, r2
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	4413      	add	r3, r2
 8001496:	011b      	lsls	r3, r3, #4
 8001498:	603b      	str	r3, [r7, #0]
 800149a:	4b12      	ldr	r3, [pc, #72]	@ (80014e4 <CheckResponse+0xac>)
 800149c:	685a      	ldr	r2, [r3, #4]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	683a      	ldr	r2, [r7, #0]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d8f8      	bhi.n	800149a <CheckResponse+0x62>
		if (!GPIO_ReadFromInputPin(DHT11_Pin.pGPIOx, 9)){	// Check DHT pin high
 80014a8:	4b10      	ldr	r3, [pc, #64]	@ (80014ec <CheckResponse+0xb4>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2109      	movs	r1, #9
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff fe48 	bl	8001144 <GPIO_ReadFromInputPin>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d101      	bne.n	80014be <CheckResponse+0x86>
			return -1;
 80014ba:	23ff      	movs	r3, #255	@ 0xff
 80014bc:	e00d      	b.n	80014da <CheckResponse+0xa2>
		}
		while (GPIO_ReadFromInputPin(DHT11_Pin.pGPIOx, 9));	// Wait DHT pin low
 80014be:	bf00      	nop
 80014c0:	4b0a      	ldr	r3, [pc, #40]	@ (80014ec <CheckResponse+0xb4>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2109      	movs	r1, #9
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff fe3c 	bl	8001144 <GPIO_ReadFromInputPin>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d1f6      	bne.n	80014c0 <CheckResponse+0x88>
 80014d2:	e001      	b.n	80014d8 <CheckResponse+0xa0>
	}
	else{
		return -1;
 80014d4:	23ff      	movs	r3, #255	@ 0xff
 80014d6:	e000      	b.n	80014da <CheckResponse+0xa2>
	}
	return 1;
 80014d8:	2301      	movs	r3, #1
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3710      	adds	r7, #16
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	e0001000 	.word	0xe0001000
 80014e8:	431bde83 	.word	0x431bde83
 80014ec:	2000012c 	.word	0x2000012c

080014f0 <_ZN4RoomC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
#include "Device.h"

class Room : public Device {
private:
public:
    Room(std::string name) : Device(name) {}
 80014f0:	b590      	push	{r4, r7, lr}
 80014f2:	b089      	sub	sp, #36	@ 0x24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	6039      	str	r1, [r7, #0]
 80014fa:	687c      	ldr	r4, [r7, #4]
 80014fc:	f107 0308 	add.w	r3, r7, #8
 8001500:	6839      	ldr	r1, [r7, #0]
 8001502:	4618      	mov	r0, r3
 8001504:	f001 f84f 	bl	80025a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8001508:	f107 0308 	add.w	r3, r7, #8
 800150c:	4619      	mov	r1, r3
 800150e:	4620      	mov	r0, r4
 8001510:	f7ff fcca 	bl	8000ea8 <_ZN6DeviceC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001514:	f107 0308 	add.w	r3, r7, #8
 8001518:	4618      	mov	r0, r3
 800151a:	f001 f810 	bl	800253e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4618      	mov	r0, r3
 8001522:	3724      	adds	r7, #36	@ 0x24
 8001524:	46bd      	mov	sp, r7
 8001526:	bd90      	pop	{r4, r7, pc}

08001528 <main>:
  * @brief  The application entry point.
  * @retval int
  */
USART_Handle_t usart;
int main(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b08a      	sub	sp, #40	@ 0x28
 800152c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800152e:	f000 fa31 	bl	8001994 <HAL_Init>
  /* USER CODE BEGIN Init */
  DWT_Init();
 8001532:	f000 f929 	bl	8001788 <DWT_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001536:	f000 f82f 	bl	8001598 <_Z18SystemClock_Configv>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */

	usart.pUSARTx = USART2;
 800153a:	4b14      	ldr	r3, [pc, #80]	@ (800158c <main+0x64>)
 800153c:	4a14      	ldr	r2, [pc, #80]	@ (8001590 <main+0x68>)
 800153e:	601a      	str	r2, [r3, #0]
	usart.USART_Config.USART_Baud = USART_STD_BAUD_9600;
 8001540:	4b12      	ldr	r3, [pc, #72]	@ (800158c <main+0x64>)
 8001542:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001546:	609a      	str	r2, [r3, #8]
	USART_Init(&usart);
 8001548:	4810      	ldr	r0, [pc, #64]	@ (800158c <main+0x64>)
 800154a:	f7ff fe6d 	bl	8001228 <USART_Init>
 800154e:	f107 0320 	add.w	r3, r7, #32
 8001552:	627b      	str	r3, [r7, #36]	@ 0x24
  /* USER CODE BEGIN 2 */
	Room LVR("Living Room");
 8001554:	f107 0220 	add.w	r2, r7, #32
 8001558:	f107 0308 	add.w	r3, r7, #8
 800155c:	490d      	ldr	r1, [pc, #52]	@ (8001594 <main+0x6c>)
 800155e:	4618      	mov	r0, r3
 8001560:	f001 f84a 	bl	80025f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001564:	f107 0208 	add.w	r2, r7, #8
 8001568:	463b      	mov	r3, r7
 800156a:	4611      	mov	r1, r2
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff ffbf 	bl	80014f0 <_ZN4RoomC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001572:	f107 0308 	add.w	r3, r7, #8
 8001576:	4618      	mov	r0, r3
 8001578:	f000 ffe1 	bl	800253e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

      __attribute__((__always_inline__))
#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 800157c:	f107 0320 	add.w	r3, r7, #32
 8001580:	4618      	mov	r0, r3
 8001582:	f000 f879 	bl	8001678 <_ZNSt15__new_allocatorIcED1Ev>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001586:	bf00      	nop
 8001588:	e7fd      	b.n	8001586 <main+0x5e>
 800158a:	bf00      	nop
 800158c:	20000138 	.word	0x20000138
 8001590:	40004400 	.word	0x40004400
 8001594:	08002a1c 	.word	0x08002a1c

08001598 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b094      	sub	sp, #80	@ 0x50
 800159c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800159e:	f107 0320 	add.w	r3, r7, #32
 80015a2:	2230      	movs	r2, #48	@ 0x30
 80015a4:	2100      	movs	r1, #0
 80015a6:	4618      	mov	r0, r3
 80015a8:	f001 f938 	bl	800281c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015ac:	f107 030c 	add.w	r3, r7, #12
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	605a      	str	r2, [r3, #4]
 80015b6:	609a      	str	r2, [r3, #8]
 80015b8:	60da      	str	r2, [r3, #12]
 80015ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015bc:	2300      	movs	r3, #0
 80015be:	60bb      	str	r3, [r7, #8]
 80015c0:	4b28      	ldr	r3, [pc, #160]	@ (8001664 <_Z18SystemClock_Configv+0xcc>)
 80015c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c4:	4a27      	ldr	r2, [pc, #156]	@ (8001664 <_Z18SystemClock_Configv+0xcc>)
 80015c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80015cc:	4b25      	ldr	r3, [pc, #148]	@ (8001664 <_Z18SystemClock_Configv+0xcc>)
 80015ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015d4:	60bb      	str	r3, [r7, #8]
 80015d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80015d8:	2300      	movs	r3, #0
 80015da:	607b      	str	r3, [r7, #4]
 80015dc:	4b22      	ldr	r3, [pc, #136]	@ (8001668 <_Z18SystemClock_Configv+0xd0>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80015e4:	4a20      	ldr	r2, [pc, #128]	@ (8001668 <_Z18SystemClock_Configv+0xd0>)
 80015e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80015ea:	6013      	str	r3, [r2, #0]
 80015ec:	4b1e      	ldr	r3, [pc, #120]	@ (8001668 <_Z18SystemClock_Configv+0xd0>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80015f4:	607b      	str	r3, [r7, #4]
 80015f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015f8:	2302      	movs	r3, #2
 80015fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015fc:	2301      	movs	r3, #1
 80015fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001600:	2310      	movs	r3, #16
 8001602:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001604:	2300      	movs	r3, #0
 8001606:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001608:	f107 0320 	add.w	r3, r7, #32
 800160c:	4618      	mov	r0, r3
 800160e:	f000 fb19 	bl	8001c44 <HAL_RCC_OscConfig>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	bf14      	ite	ne
 8001618:	2301      	movne	r3, #1
 800161a:	2300      	moveq	r3, #0
 800161c:	b2db      	uxtb	r3, r3
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <_Z18SystemClock_Configv+0x8e>
  {
    Error_Handler();
 8001622:	f000 f823 	bl	800166c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001626:	230f      	movs	r3, #15
 8001628:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800162a:	2300      	movs	r3, #0
 800162c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800162e:	2300      	movs	r3, #0
 8001630:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001632:	2300      	movs	r3, #0
 8001634:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001636:	2300      	movs	r3, #0
 8001638:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800163a:	f107 030c 	add.w	r3, r7, #12
 800163e:	2100      	movs	r1, #0
 8001640:	4618      	mov	r0, r3
 8001642:	f000 fd77 	bl	8002134 <HAL_RCC_ClockConfig>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	bf14      	ite	ne
 800164c:	2301      	movne	r3, #1
 800164e:	2300      	moveq	r3, #0
 8001650:	b2db      	uxtb	r3, r3
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <_Z18SystemClock_Configv+0xc2>
  {
    Error_Handler();
 8001656:	f000 f809 	bl	800166c <Error_Handler>
  }
}
 800165a:	bf00      	nop
 800165c:	3750      	adds	r7, #80	@ 0x50
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	40023800 	.word	0x40023800
 8001668:	40007000 	.word	0x40007000

0800166c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001670:	b672      	cpsid	i
}
 8001672:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001674:	bf00      	nop
 8001676:	e7fd      	b.n	8001674 <Error_Handler+0x8>

08001678 <_ZNSt15__new_allocatorIcED1Ev>:
#if __cplusplus >= 201103L
      __new_allocator& operator=(const __new_allocator&) = default;
#endif

#if __cplusplus <= 201703L
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	4618      	mov	r0, r3
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr

0800168e <Get_Output_CLK>:

uint16_t AHB_Prescaler[8] = {2,4,8,16,64,128,256,512};
uint8_t APB1_Prescaler[4] = {2,4,8,16};
uint8_t APB2_Prescaler[4] = {2,4,8,16};

uint32_t Get_Output_CLK(){
 800168e:	b480      	push	{r7}
 8001690:	af00      	add	r7, sp, #0
    return 0;
 8001692:	2300      	movs	r3, #0
}
 8001694:	4618      	mov	r0, r3
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
	...

080016a0 <RCC_GetPCLK1Value>:
uint32_t RCC_GetPCLK1Value(void){
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
    uint32_t pclk1, SystemClk;
    uint8_t clksrc, temp, ahbp, apb1;
    clksrc = (RCC->CFGR >> 2) & 0x3;
 80016a6:	4b22      	ldr	r3, [pc, #136]	@ (8001730 <RCC_GetPCLK1Value+0x90>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	089b      	lsrs	r3, r3, #2
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	f003 0303 	and.w	r3, r3, #3
 80016b2:	727b      	strb	r3, [r7, #9]
    if(clksrc == 0){
 80016b4:	7a7b      	ldrb	r3, [r7, #9]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d102      	bne.n	80016c0 <RCC_GetPCLK1Value+0x20>
        SystemClk = 16000000; // HSI = 16MHz
 80016ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001734 <RCC_GetPCLK1Value+0x94>)
 80016bc:	60fb      	str	r3, [r7, #12]
 80016be:	e00b      	b.n	80016d8 <RCC_GetPCLK1Value+0x38>
    }
    else if(clksrc == 1){
 80016c0:	7a7b      	ldrb	r3, [r7, #9]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d102      	bne.n	80016cc <RCC_GetPCLK1Value+0x2c>
        SystemClk = 8000000; // HSE optional
 80016c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001738 <RCC_GetPCLK1Value+0x98>)
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	e005      	b.n	80016d8 <RCC_GetPCLK1Value+0x38>
    }
    else if(clksrc == 2){
 80016cc:	7a7b      	ldrb	r3, [r7, #9]
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d102      	bne.n	80016d8 <RCC_GetPCLK1Value+0x38>
        SystemClk = Get_Output_CLK();
 80016d2:	f7ff ffdc 	bl	800168e <Get_Output_CLK>
 80016d6:	60f8      	str	r0, [r7, #12]
    }

    // AHB
    temp = (RCC->CFGR >> 4) & 0xFF;
 80016d8:	4b15      	ldr	r3, [pc, #84]	@ (8001730 <RCC_GetPCLK1Value+0x90>)
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	091b      	lsrs	r3, r3, #4
 80016de:	723b      	strb	r3, [r7, #8]
    if(temp < 8){
 80016e0:	7a3b      	ldrb	r3, [r7, #8]
 80016e2:	2b07      	cmp	r3, #7
 80016e4:	d802      	bhi.n	80016ec <RCC_GetPCLK1Value+0x4c>
        ahbp = 1;
 80016e6:	2301      	movs	r3, #1
 80016e8:	72fb      	strb	r3, [r7, #11]
 80016ea:	e005      	b.n	80016f8 <RCC_GetPCLK1Value+0x58>
    }
    else {
        ahbp = AHB_Prescaler[temp - 8];
 80016ec:	7a3b      	ldrb	r3, [r7, #8]
 80016ee:	3b08      	subs	r3, #8
 80016f0:	4a12      	ldr	r2, [pc, #72]	@ (800173c <RCC_GetPCLK1Value+0x9c>)
 80016f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016f6:	72fb      	strb	r3, [r7, #11]
    }

    // APB1
    temp = (RCC->CFGR >> 10) & 0xFF;
 80016f8:	4b0d      	ldr	r3, [pc, #52]	@ (8001730 <RCC_GetPCLK1Value+0x90>)
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	0a9b      	lsrs	r3, r3, #10
 80016fe:	723b      	strb	r3, [r7, #8]
    if(temp < 4){
 8001700:	7a3b      	ldrb	r3, [r7, #8]
 8001702:	2b03      	cmp	r3, #3
 8001704:	d802      	bhi.n	800170c <RCC_GetPCLK1Value+0x6c>
        apb1 = 1;
 8001706:	2301      	movs	r3, #1
 8001708:	72bb      	strb	r3, [r7, #10]
 800170a:	e004      	b.n	8001716 <RCC_GetPCLK1Value+0x76>
    }
    else {
    	apb1 = APB1_Prescaler[temp - 4];
 800170c:	7a3b      	ldrb	r3, [r7, #8]
 800170e:	3b04      	subs	r3, #4
 8001710:	4a0b      	ldr	r2, [pc, #44]	@ (8001740 <RCC_GetPCLK1Value+0xa0>)
 8001712:	5cd3      	ldrb	r3, [r2, r3]
 8001714:	72bb      	strb	r3, [r7, #10]
    }

    pclk1 = (SystemClk/ahbp) / apb1;
 8001716:	7afb      	ldrb	r3, [r7, #11]
 8001718:	68fa      	ldr	r2, [r7, #12]
 800171a:	fbb2 f2f3 	udiv	r2, r2, r3
 800171e:	7abb      	ldrb	r3, [r7, #10]
 8001720:	fbb2 f3f3 	udiv	r3, r2, r3
 8001724:	607b      	str	r3, [r7, #4]
    return pclk1;
 8001726:	687b      	ldr	r3, [r7, #4]
}
 8001728:	4618      	mov	r0, r3
 800172a:	3710      	adds	r7, #16
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	40023800 	.word	0x40023800
 8001734:	00f42400 	.word	0x00f42400
 8001738:	007a1200 	.word	0x007a1200
 800173c:	20000000 	.word	0x20000000
 8001740:	20000010 	.word	0x20000010

08001744 <RCC_GetSystemClock>:
    pclk2 = (SystemClk/ahbp) / apb2;
    return pclk2;
}

// Delay Function
uint32_t RCC_GetSystemClock(void) {
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
    uint8_t clksrc = (RCC->CFGR >> 2) & 0x3;
 800174a:	4b0c      	ldr	r3, [pc, #48]	@ (800177c <RCC_GetSystemClock+0x38>)
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	089b      	lsrs	r3, r3, #2
 8001750:	b2db      	uxtb	r3, r3
 8001752:	f003 0303 	and.w	r3, r3, #3
 8001756:	71fb      	strb	r3, [r7, #7]
    if (clksrc == 0) return 16000000U;     // HSI
 8001758:	79fb      	ldrb	r3, [r7, #7]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d101      	bne.n	8001762 <RCC_GetSystemClock+0x1e>
 800175e:	4b08      	ldr	r3, [pc, #32]	@ (8001780 <RCC_GetSystemClock+0x3c>)
 8001760:	e007      	b.n	8001772 <RCC_GetSystemClock+0x2e>
    if (clksrc == 1) return 8000000U;      // HSE
 8001762:	79fb      	ldrb	r3, [r7, #7]
 8001764:	2b01      	cmp	r3, #1
 8001766:	d101      	bne.n	800176c <RCC_GetSystemClock+0x28>
 8001768:	4b06      	ldr	r3, [pc, #24]	@ (8001784 <RCC_GetSystemClock+0x40>)
 800176a:	e002      	b.n	8001772 <RCC_GetSystemClock+0x2e>
    return Get_Output_CLK();              // PLL
 800176c:	f7ff ff8f 	bl	800168e <Get_Output_CLK>
 8001770:	4603      	mov	r3, r0
}
 8001772:	4618      	mov	r0, r3
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	40023800 	.word	0x40023800
 8001780:	00f42400 	.word	0x00f42400
 8001784:	007a1200 	.word	0x007a1200

08001788 <DWT_Init>:

void DWT_Init(void) {
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
    // Enable TRC (Trace and Debug)
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800178c:	4b09      	ldr	r3, [pc, #36]	@ (80017b4 <DWT_Init+0x2c>)
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	4a08      	ldr	r2, [pc, #32]	@ (80017b4 <DWT_Init+0x2c>)
 8001792:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001796:	60d3      	str	r3, [r2, #12]

    // Reset Cycle Counter
    DWT->CYCCNT = 0;
 8001798:	4b07      	ldr	r3, [pc, #28]	@ (80017b8 <DWT_Init+0x30>)
 800179a:	2200      	movs	r2, #0
 800179c:	605a      	str	r2, [r3, #4]

    // Enable Cycle Counter
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800179e:	4b06      	ldr	r3, [pc, #24]	@ (80017b8 <DWT_Init+0x30>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a05      	ldr	r2, [pc, #20]	@ (80017b8 <DWT_Init+0x30>)
 80017a4:	f043 0301 	orr.w	r3, r3, #1
 80017a8:	6013      	str	r3, [r2, #0]
}
 80017aa:	bf00      	nop
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	e000edf0 	.word	0xe000edf0
 80017b8:	e0001000 	.word	0xe0001000

080017bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	607b      	str	r3, [r7, #4]
 80017c6:	4b10      	ldr	r3, [pc, #64]	@ (8001808 <HAL_MspInit+0x4c>)
 80017c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ca:	4a0f      	ldr	r2, [pc, #60]	@ (8001808 <HAL_MspInit+0x4c>)
 80017cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80017d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001808 <HAL_MspInit+0x4c>)
 80017d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017da:	607b      	str	r3, [r7, #4]
 80017dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017de:	2300      	movs	r3, #0
 80017e0:	603b      	str	r3, [r7, #0]
 80017e2:	4b09      	ldr	r3, [pc, #36]	@ (8001808 <HAL_MspInit+0x4c>)
 80017e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e6:	4a08      	ldr	r2, [pc, #32]	@ (8001808 <HAL_MspInit+0x4c>)
 80017e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80017ee:	4b06      	ldr	r3, [pc, #24]	@ (8001808 <HAL_MspInit+0x4c>)
 80017f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017f6:	603b      	str	r3, [r7, #0]
 80017f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017fa:	bf00      	nop
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	40023800 	.word	0x40023800

0800180c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001810:	bf00      	nop
 8001812:	e7fd      	b.n	8001810 <NMI_Handler+0x4>

08001814 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001818:	bf00      	nop
 800181a:	e7fd      	b.n	8001818 <HardFault_Handler+0x4>

0800181c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001820:	bf00      	nop
 8001822:	e7fd      	b.n	8001820 <MemManage_Handler+0x4>

08001824 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001828:	bf00      	nop
 800182a:	e7fd      	b.n	8001828 <BusFault_Handler+0x4>

0800182c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001830:	bf00      	nop
 8001832:	e7fd      	b.n	8001830 <UsageFault_Handler+0x4>

08001834 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001838:	bf00      	nop
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr

08001842 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001842:	b480      	push	{r7}
 8001844:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001854:	bf00      	nop
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr

0800185e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800185e:	b580      	push	{r7, lr}
 8001860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001862:	f000 f8e9 	bl	8001a38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001866:	bf00      	nop
 8001868:	bd80      	pop	{r7, pc}

0800186a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800186a:	b480      	push	{r7}
 800186c:	af00      	add	r7, sp, #0
  return 1;
 800186e:	2301      	movs	r3, #1
}
 8001870:	4618      	mov	r0, r3
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <_kill>:

int _kill(int pid, int sig)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b082      	sub	sp, #8
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
 8001882:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001884:	f001 f826 	bl	80028d4 <__errno>
 8001888:	4603      	mov	r3, r0
 800188a:	2216      	movs	r2, #22
 800188c:	601a      	str	r2, [r3, #0]
  return -1;
 800188e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001892:	4618      	mov	r0, r3
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <_exit>:

void _exit (int status)
{
 800189a:	b580      	push	{r7, lr}
 800189c:	b082      	sub	sp, #8
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018a2:	f04f 31ff 	mov.w	r1, #4294967295
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f7ff ffe7 	bl	800187a <_kill>
  while (1) {}    /* Make sure we hang here */
 80018ac:	bf00      	nop
 80018ae:	e7fd      	b.n	80018ac <_exit+0x12>

080018b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018b8:	4a14      	ldr	r2, [pc, #80]	@ (800190c <_sbrk+0x5c>)
 80018ba:	4b15      	ldr	r3, [pc, #84]	@ (8001910 <_sbrk+0x60>)
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018c4:	4b13      	ldr	r3, [pc, #76]	@ (8001914 <_sbrk+0x64>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d102      	bne.n	80018d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018cc:	4b11      	ldr	r3, [pc, #68]	@ (8001914 <_sbrk+0x64>)
 80018ce:	4a12      	ldr	r2, [pc, #72]	@ (8001918 <_sbrk+0x68>)
 80018d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018d2:	4b10      	ldr	r3, [pc, #64]	@ (8001914 <_sbrk+0x64>)
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4413      	add	r3, r2
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d207      	bcs.n	80018f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018e0:	f000 fff8 	bl	80028d4 <__errno>
 80018e4:	4603      	mov	r3, r0
 80018e6:	220c      	movs	r2, #12
 80018e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018ea:	f04f 33ff 	mov.w	r3, #4294967295
 80018ee:	e009      	b.n	8001904 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018f0:	4b08      	ldr	r3, [pc, #32]	@ (8001914 <_sbrk+0x64>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018f6:	4b07      	ldr	r3, [pc, #28]	@ (8001914 <_sbrk+0x64>)
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4413      	add	r3, r2
 80018fe:	4a05      	ldr	r2, [pc, #20]	@ (8001914 <_sbrk+0x64>)
 8001900:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001902:	68fb      	ldr	r3, [r7, #12]
}
 8001904:	4618      	mov	r0, r3
 8001906:	3718      	adds	r7, #24
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	20018000 	.word	0x20018000
 8001910:	00000400 	.word	0x00000400
 8001914:	20000148 	.word	0x20000148
 8001918:	200002a0 	.word	0x200002a0

0800191c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001920:	4b06      	ldr	r3, [pc, #24]	@ (800193c <SystemInit+0x20>)
 8001922:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001926:	4a05      	ldr	r2, [pc, #20]	@ (800193c <SystemInit+0x20>)
 8001928:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800192c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001930:	bf00      	nop
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	e000ed00 	.word	0xe000ed00

08001940 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001940:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001978 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001944:	f7ff ffea 	bl	800191c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001948:	480c      	ldr	r0, [pc, #48]	@ (800197c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800194a:	490d      	ldr	r1, [pc, #52]	@ (8001980 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800194c:	4a0d      	ldr	r2, [pc, #52]	@ (8001984 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800194e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001950:	e002      	b.n	8001958 <LoopCopyDataInit>

08001952 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001952:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001954:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001956:	3304      	adds	r3, #4

08001958 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001958:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800195a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800195c:	d3f9      	bcc.n	8001952 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800195e:	4a0a      	ldr	r2, [pc, #40]	@ (8001988 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001960:	4c0a      	ldr	r4, [pc, #40]	@ (800198c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001962:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001964:	e001      	b.n	800196a <LoopFillZerobss>

08001966 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001966:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001968:	3204      	adds	r2, #4

0800196a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800196a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800196c:	d3fb      	bcc.n	8001966 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800196e:	f000 ffb7 	bl	80028e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001972:	f7ff fdd9 	bl	8001528 <main>
  bx  lr    
 8001976:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001978:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800197c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001980:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001984:	08002a94 	.word	0x08002a94
  ldr r2, =_sbss
 8001988:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800198c:	2000029c 	.word	0x2000029c

08001990 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001990:	e7fe      	b.n	8001990 <ADC_IRQHandler>
	...

08001994 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001998:	4b0e      	ldr	r3, [pc, #56]	@ (80019d4 <HAL_Init+0x40>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a0d      	ldr	r2, [pc, #52]	@ (80019d4 <HAL_Init+0x40>)
 800199e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019a4:	4b0b      	ldr	r3, [pc, #44]	@ (80019d4 <HAL_Init+0x40>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a0a      	ldr	r2, [pc, #40]	@ (80019d4 <HAL_Init+0x40>)
 80019aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019b0:	4b08      	ldr	r3, [pc, #32]	@ (80019d4 <HAL_Init+0x40>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a07      	ldr	r2, [pc, #28]	@ (80019d4 <HAL_Init+0x40>)
 80019b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019bc:	2003      	movs	r0, #3
 80019be:	f000 f90d 	bl	8001bdc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019c2:	200f      	movs	r0, #15
 80019c4:	f000 f808 	bl	80019d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019c8:	f7ff fef8 	bl	80017bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	40023c00 	.word	0x40023c00

080019d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019e0:	4b12      	ldr	r3, [pc, #72]	@ (8001a2c <HAL_InitTick+0x54>)
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	4b12      	ldr	r3, [pc, #72]	@ (8001a30 <HAL_InitTick+0x58>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	4619      	mov	r1, r3
 80019ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80019f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019f6:	4618      	mov	r0, r3
 80019f8:	f000 f917 	bl	8001c2a <HAL_SYSTICK_Config>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e00e      	b.n	8001a24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2b0f      	cmp	r3, #15
 8001a0a:	d80a      	bhi.n	8001a22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	6879      	ldr	r1, [r7, #4]
 8001a10:	f04f 30ff 	mov.w	r0, #4294967295
 8001a14:	f000 f8ed 	bl	8001bf2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a18:	4a06      	ldr	r2, [pc, #24]	@ (8001a34 <HAL_InitTick+0x5c>)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	e000      	b.n	8001a24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3708      	adds	r7, #8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	20000014 	.word	0x20000014
 8001a30:	2000001c 	.word	0x2000001c
 8001a34:	20000018 	.word	0x20000018

08001a38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a3c:	4b06      	ldr	r3, [pc, #24]	@ (8001a58 <HAL_IncTick+0x20>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	461a      	mov	r2, r3
 8001a42:	4b06      	ldr	r3, [pc, #24]	@ (8001a5c <HAL_IncTick+0x24>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4413      	add	r3, r2
 8001a48:	4a04      	ldr	r2, [pc, #16]	@ (8001a5c <HAL_IncTick+0x24>)
 8001a4a:	6013      	str	r3, [r2, #0]
}
 8001a4c:	bf00      	nop
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	2000001c 	.word	0x2000001c
 8001a5c:	2000014c 	.word	0x2000014c

08001a60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  return uwTick;
 8001a64:	4b03      	ldr	r3, [pc, #12]	@ (8001a74 <HAL_GetTick+0x14>)
 8001a66:	681b      	ldr	r3, [r3, #0]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	2000014c 	.word	0x2000014c

08001a78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b085      	sub	sp, #20
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f003 0307 	and.w	r3, r3, #7
 8001a86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a88:	4b0c      	ldr	r3, [pc, #48]	@ (8001abc <__NVIC_SetPriorityGrouping+0x44>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a8e:	68ba      	ldr	r2, [r7, #8]
 8001a90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a94:	4013      	ands	r3, r2
 8001a96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001aa0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001aa4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001aa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aaa:	4a04      	ldr	r2, [pc, #16]	@ (8001abc <__NVIC_SetPriorityGrouping+0x44>)
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	60d3      	str	r3, [r2, #12]
}
 8001ab0:	bf00      	nop
 8001ab2:	3714      	adds	r7, #20
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	e000ed00 	.word	0xe000ed00

08001ac0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ac4:	4b04      	ldr	r3, [pc, #16]	@ (8001ad8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	0a1b      	lsrs	r3, r3, #8
 8001aca:	f003 0307 	and.w	r3, r3, #7
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	e000ed00 	.word	0xe000ed00

08001adc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	6039      	str	r1, [r7, #0]
 8001ae6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	db0a      	blt.n	8001b06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	b2da      	uxtb	r2, r3
 8001af4:	490c      	ldr	r1, [pc, #48]	@ (8001b28 <__NVIC_SetPriority+0x4c>)
 8001af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afa:	0112      	lsls	r2, r2, #4
 8001afc:	b2d2      	uxtb	r2, r2
 8001afe:	440b      	add	r3, r1
 8001b00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b04:	e00a      	b.n	8001b1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	b2da      	uxtb	r2, r3
 8001b0a:	4908      	ldr	r1, [pc, #32]	@ (8001b2c <__NVIC_SetPriority+0x50>)
 8001b0c:	79fb      	ldrb	r3, [r7, #7]
 8001b0e:	f003 030f 	and.w	r3, r3, #15
 8001b12:	3b04      	subs	r3, #4
 8001b14:	0112      	lsls	r2, r2, #4
 8001b16:	b2d2      	uxtb	r2, r2
 8001b18:	440b      	add	r3, r1
 8001b1a:	761a      	strb	r2, [r3, #24]
}
 8001b1c:	bf00      	nop
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	e000e100 	.word	0xe000e100
 8001b2c:	e000ed00 	.word	0xe000ed00

08001b30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b089      	sub	sp, #36	@ 0x24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f003 0307 	and.w	r3, r3, #7
 8001b42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	f1c3 0307 	rsb	r3, r3, #7
 8001b4a:	2b04      	cmp	r3, #4
 8001b4c:	bf28      	it	cs
 8001b4e:	2304      	movcs	r3, #4
 8001b50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	3304      	adds	r3, #4
 8001b56:	2b06      	cmp	r3, #6
 8001b58:	d902      	bls.n	8001b60 <NVIC_EncodePriority+0x30>
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	3b03      	subs	r3, #3
 8001b5e:	e000      	b.n	8001b62 <NVIC_EncodePriority+0x32>
 8001b60:	2300      	movs	r3, #0
 8001b62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b64:	f04f 32ff 	mov.w	r2, #4294967295
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6e:	43da      	mvns	r2, r3
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	401a      	ands	r2, r3
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b78:	f04f 31ff 	mov.w	r1, #4294967295
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b82:	43d9      	mvns	r1, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b88:	4313      	orrs	r3, r2
         );
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3724      	adds	r7, #36	@ 0x24
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
	...

08001b98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ba8:	d301      	bcc.n	8001bae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001baa:	2301      	movs	r3, #1
 8001bac:	e00f      	b.n	8001bce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bae:	4a0a      	ldr	r2, [pc, #40]	@ (8001bd8 <SysTick_Config+0x40>)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bb6:	210f      	movs	r1, #15
 8001bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bbc:	f7ff ff8e 	bl	8001adc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bc0:	4b05      	ldr	r3, [pc, #20]	@ (8001bd8 <SysTick_Config+0x40>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bc6:	4b04      	ldr	r3, [pc, #16]	@ (8001bd8 <SysTick_Config+0x40>)
 8001bc8:	2207      	movs	r2, #7
 8001bca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	e000e010 	.word	0xe000e010

08001bdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f7ff ff47 	bl	8001a78 <__NVIC_SetPriorityGrouping>
}
 8001bea:	bf00      	nop
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b086      	sub	sp, #24
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	60b9      	str	r1, [r7, #8]
 8001bfc:	607a      	str	r2, [r7, #4]
 8001bfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c00:	2300      	movs	r3, #0
 8001c02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c04:	f7ff ff5c 	bl	8001ac0 <__NVIC_GetPriorityGrouping>
 8001c08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	68b9      	ldr	r1, [r7, #8]
 8001c0e:	6978      	ldr	r0, [r7, #20]
 8001c10:	f7ff ff8e 	bl	8001b30 <NVIC_EncodePriority>
 8001c14:	4602      	mov	r2, r0
 8001c16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c1a:	4611      	mov	r1, r2
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7ff ff5d 	bl	8001adc <__NVIC_SetPriority>
}
 8001c22:	bf00      	nop
 8001c24:	3718      	adds	r7, #24
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	b082      	sub	sp, #8
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f7ff ffb0 	bl	8001b98 <SysTick_Config>
 8001c38:	4603      	mov	r3, r0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
	...

08001c44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b086      	sub	sp, #24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d101      	bne.n	8001c56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e267      	b.n	8002126 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d075      	beq.n	8001d4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001c62:	4b88      	ldr	r3, [pc, #544]	@ (8001e84 <HAL_RCC_OscConfig+0x240>)
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	f003 030c 	and.w	r3, r3, #12
 8001c6a:	2b04      	cmp	r3, #4
 8001c6c:	d00c      	beq.n	8001c88 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c6e:	4b85      	ldr	r3, [pc, #532]	@ (8001e84 <HAL_RCC_OscConfig+0x240>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001c76:	2b08      	cmp	r3, #8
 8001c78:	d112      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c7a:	4b82      	ldr	r3, [pc, #520]	@ (8001e84 <HAL_RCC_OscConfig+0x240>)
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c82:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001c86:	d10b      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c88:	4b7e      	ldr	r3, [pc, #504]	@ (8001e84 <HAL_RCC_OscConfig+0x240>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d05b      	beq.n	8001d4c <HAL_RCC_OscConfig+0x108>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d157      	bne.n	8001d4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e242      	b.n	8002126 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ca8:	d106      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x74>
 8001caa:	4b76      	ldr	r3, [pc, #472]	@ (8001e84 <HAL_RCC_OscConfig+0x240>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a75      	ldr	r2, [pc, #468]	@ (8001e84 <HAL_RCC_OscConfig+0x240>)
 8001cb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cb4:	6013      	str	r3, [r2, #0]
 8001cb6:	e01d      	b.n	8001cf4 <HAL_RCC_OscConfig+0xb0>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001cc0:	d10c      	bne.n	8001cdc <HAL_RCC_OscConfig+0x98>
 8001cc2:	4b70      	ldr	r3, [pc, #448]	@ (8001e84 <HAL_RCC_OscConfig+0x240>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a6f      	ldr	r2, [pc, #444]	@ (8001e84 <HAL_RCC_OscConfig+0x240>)
 8001cc8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ccc:	6013      	str	r3, [r2, #0]
 8001cce:	4b6d      	ldr	r3, [pc, #436]	@ (8001e84 <HAL_RCC_OscConfig+0x240>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a6c      	ldr	r2, [pc, #432]	@ (8001e84 <HAL_RCC_OscConfig+0x240>)
 8001cd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cd8:	6013      	str	r3, [r2, #0]
 8001cda:	e00b      	b.n	8001cf4 <HAL_RCC_OscConfig+0xb0>
 8001cdc:	4b69      	ldr	r3, [pc, #420]	@ (8001e84 <HAL_RCC_OscConfig+0x240>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a68      	ldr	r2, [pc, #416]	@ (8001e84 <HAL_RCC_OscConfig+0x240>)
 8001ce2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ce6:	6013      	str	r3, [r2, #0]
 8001ce8:	4b66      	ldr	r3, [pc, #408]	@ (8001e84 <HAL_RCC_OscConfig+0x240>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a65      	ldr	r2, [pc, #404]	@ (8001e84 <HAL_RCC_OscConfig+0x240>)
 8001cee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cf2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d013      	beq.n	8001d24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cfc:	f7ff feb0 	bl	8001a60 <HAL_GetTick>
 8001d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d02:	e008      	b.n	8001d16 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d04:	f7ff feac 	bl	8001a60 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b64      	cmp	r3, #100	@ 0x64
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e207      	b.n	8002126 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d16:	4b5b      	ldr	r3, [pc, #364]	@ (8001e84 <HAL_RCC_OscConfig+0x240>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d0f0      	beq.n	8001d04 <HAL_RCC_OscConfig+0xc0>
 8001d22:	e014      	b.n	8001d4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d24:	f7ff fe9c 	bl	8001a60 <HAL_GetTick>
 8001d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d2a:	e008      	b.n	8001d3e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d2c:	f7ff fe98 	bl	8001a60 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b64      	cmp	r3, #100	@ 0x64
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e1f3      	b.n	8002126 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d3e:	4b51      	ldr	r3, [pc, #324]	@ (8001e84 <HAL_RCC_OscConfig+0x240>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d1f0      	bne.n	8001d2c <HAL_RCC_OscConfig+0xe8>
 8001d4a:	e000      	b.n	8001d4e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d063      	beq.n	8001e22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001d5a:	4b4a      	ldr	r3, [pc, #296]	@ (8001e84 <HAL_RCC_OscConfig+0x240>)
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	f003 030c 	and.w	r3, r3, #12
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d00b      	beq.n	8001d7e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d66:	4b47      	ldr	r3, [pc, #284]	@ (8001e84 <HAL_RCC_OscConfig+0x240>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001d6e:	2b08      	cmp	r3, #8
 8001d70:	d11c      	bne.n	8001dac <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d72:	4b44      	ldr	r3, [pc, #272]	@ (8001e84 <HAL_RCC_OscConfig+0x240>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d116      	bne.n	8001dac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d7e:	4b41      	ldr	r3, [pc, #260]	@ (8001e84 <HAL_RCC_OscConfig+0x240>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d005      	beq.n	8001d96 <HAL_RCC_OscConfig+0x152>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d001      	beq.n	8001d96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e1c7      	b.n	8002126 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d96:	4b3b      	ldr	r3, [pc, #236]	@ (8001e84 <HAL_RCC_OscConfig+0x240>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	00db      	lsls	r3, r3, #3
 8001da4:	4937      	ldr	r1, [pc, #220]	@ (8001e84 <HAL_RCC_OscConfig+0x240>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001daa:	e03a      	b.n	8001e22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d020      	beq.n	8001df6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001db4:	4b34      	ldr	r3, [pc, #208]	@ (8001e88 <HAL_RCC_OscConfig+0x244>)
 8001db6:	2201      	movs	r2, #1
 8001db8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dba:	f7ff fe51 	bl	8001a60 <HAL_GetTick>
 8001dbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dc0:	e008      	b.n	8001dd4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dc2:	f7ff fe4d 	bl	8001a60 <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d901      	bls.n	8001dd4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e1a8      	b.n	8002126 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd4:	4b2b      	ldr	r3, [pc, #172]	@ (8001e84 <HAL_RCC_OscConfig+0x240>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0302 	and.w	r3, r3, #2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d0f0      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001de0:	4b28      	ldr	r3, [pc, #160]	@ (8001e84 <HAL_RCC_OscConfig+0x240>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	691b      	ldr	r3, [r3, #16]
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	4925      	ldr	r1, [pc, #148]	@ (8001e84 <HAL_RCC_OscConfig+0x240>)
 8001df0:	4313      	orrs	r3, r2
 8001df2:	600b      	str	r3, [r1, #0]
 8001df4:	e015      	b.n	8001e22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001df6:	4b24      	ldr	r3, [pc, #144]	@ (8001e88 <HAL_RCC_OscConfig+0x244>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dfc:	f7ff fe30 	bl	8001a60 <HAL_GetTick>
 8001e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e02:	e008      	b.n	8001e16 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e04:	f7ff fe2c 	bl	8001a60 <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e187      	b.n	8002126 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e16:	4b1b      	ldr	r3, [pc, #108]	@ (8001e84 <HAL_RCC_OscConfig+0x240>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d1f0      	bne.n	8001e04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0308 	and.w	r3, r3, #8
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d036      	beq.n	8001e9c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	695b      	ldr	r3, [r3, #20]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d016      	beq.n	8001e64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e36:	4b15      	ldr	r3, [pc, #84]	@ (8001e8c <HAL_RCC_OscConfig+0x248>)
 8001e38:	2201      	movs	r2, #1
 8001e3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e3c:	f7ff fe10 	bl	8001a60 <HAL_GetTick>
 8001e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e44:	f7ff fe0c 	bl	8001a60 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e167      	b.n	8002126 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e56:	4b0b      	ldr	r3, [pc, #44]	@ (8001e84 <HAL_RCC_OscConfig+0x240>)
 8001e58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d0f0      	beq.n	8001e44 <HAL_RCC_OscConfig+0x200>
 8001e62:	e01b      	b.n	8001e9c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e64:	4b09      	ldr	r3, [pc, #36]	@ (8001e8c <HAL_RCC_OscConfig+0x248>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e6a:	f7ff fdf9 	bl	8001a60 <HAL_GetTick>
 8001e6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e70:	e00e      	b.n	8001e90 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e72:	f7ff fdf5 	bl	8001a60 <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d907      	bls.n	8001e90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e150      	b.n	8002126 <HAL_RCC_OscConfig+0x4e2>
 8001e84:	40023800 	.word	0x40023800
 8001e88:	42470000 	.word	0x42470000
 8001e8c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e90:	4b88      	ldr	r3, [pc, #544]	@ (80020b4 <HAL_RCC_OscConfig+0x470>)
 8001e92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e94:	f003 0302 	and.w	r3, r3, #2
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d1ea      	bne.n	8001e72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0304 	and.w	r3, r3, #4
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	f000 8097 	beq.w	8001fd8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eae:	4b81      	ldr	r3, [pc, #516]	@ (80020b4 <HAL_RCC_OscConfig+0x470>)
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d10f      	bne.n	8001eda <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eba:	2300      	movs	r3, #0
 8001ebc:	60bb      	str	r3, [r7, #8]
 8001ebe:	4b7d      	ldr	r3, [pc, #500]	@ (80020b4 <HAL_RCC_OscConfig+0x470>)
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec2:	4a7c      	ldr	r2, [pc, #496]	@ (80020b4 <HAL_RCC_OscConfig+0x470>)
 8001ec4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ec8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eca:	4b7a      	ldr	r3, [pc, #488]	@ (80020b4 <HAL_RCC_OscConfig+0x470>)
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ece:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ed2:	60bb      	str	r3, [r7, #8]
 8001ed4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eda:	4b77      	ldr	r3, [pc, #476]	@ (80020b8 <HAL_RCC_OscConfig+0x474>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d118      	bne.n	8001f18 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ee6:	4b74      	ldr	r3, [pc, #464]	@ (80020b8 <HAL_RCC_OscConfig+0x474>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a73      	ldr	r2, [pc, #460]	@ (80020b8 <HAL_RCC_OscConfig+0x474>)
 8001eec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ef0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ef2:	f7ff fdb5 	bl	8001a60 <HAL_GetTick>
 8001ef6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef8:	e008      	b.n	8001f0c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001efa:	f7ff fdb1 	bl	8001a60 <HAL_GetTick>
 8001efe:	4602      	mov	r2, r0
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d901      	bls.n	8001f0c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e10c      	b.n	8002126 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f0c:	4b6a      	ldr	r3, [pc, #424]	@ (80020b8 <HAL_RCC_OscConfig+0x474>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d0f0      	beq.n	8001efa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d106      	bne.n	8001f2e <HAL_RCC_OscConfig+0x2ea>
 8001f20:	4b64      	ldr	r3, [pc, #400]	@ (80020b4 <HAL_RCC_OscConfig+0x470>)
 8001f22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f24:	4a63      	ldr	r2, [pc, #396]	@ (80020b4 <HAL_RCC_OscConfig+0x470>)
 8001f26:	f043 0301 	orr.w	r3, r3, #1
 8001f2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f2c:	e01c      	b.n	8001f68 <HAL_RCC_OscConfig+0x324>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	2b05      	cmp	r3, #5
 8001f34:	d10c      	bne.n	8001f50 <HAL_RCC_OscConfig+0x30c>
 8001f36:	4b5f      	ldr	r3, [pc, #380]	@ (80020b4 <HAL_RCC_OscConfig+0x470>)
 8001f38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f3a:	4a5e      	ldr	r2, [pc, #376]	@ (80020b4 <HAL_RCC_OscConfig+0x470>)
 8001f3c:	f043 0304 	orr.w	r3, r3, #4
 8001f40:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f42:	4b5c      	ldr	r3, [pc, #368]	@ (80020b4 <HAL_RCC_OscConfig+0x470>)
 8001f44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f46:	4a5b      	ldr	r2, [pc, #364]	@ (80020b4 <HAL_RCC_OscConfig+0x470>)
 8001f48:	f043 0301 	orr.w	r3, r3, #1
 8001f4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f4e:	e00b      	b.n	8001f68 <HAL_RCC_OscConfig+0x324>
 8001f50:	4b58      	ldr	r3, [pc, #352]	@ (80020b4 <HAL_RCC_OscConfig+0x470>)
 8001f52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f54:	4a57      	ldr	r2, [pc, #348]	@ (80020b4 <HAL_RCC_OscConfig+0x470>)
 8001f56:	f023 0301 	bic.w	r3, r3, #1
 8001f5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f5c:	4b55      	ldr	r3, [pc, #340]	@ (80020b4 <HAL_RCC_OscConfig+0x470>)
 8001f5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f60:	4a54      	ldr	r2, [pc, #336]	@ (80020b4 <HAL_RCC_OscConfig+0x470>)
 8001f62:	f023 0304 	bic.w	r3, r3, #4
 8001f66:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d015      	beq.n	8001f9c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f70:	f7ff fd76 	bl	8001a60 <HAL_GetTick>
 8001f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f76:	e00a      	b.n	8001f8e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f78:	f7ff fd72 	bl	8001a60 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e0cb      	b.n	8002126 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f8e:	4b49      	ldr	r3, [pc, #292]	@ (80020b4 <HAL_RCC_OscConfig+0x470>)
 8001f90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f92:	f003 0302 	and.w	r3, r3, #2
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d0ee      	beq.n	8001f78 <HAL_RCC_OscConfig+0x334>
 8001f9a:	e014      	b.n	8001fc6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f9c:	f7ff fd60 	bl	8001a60 <HAL_GetTick>
 8001fa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fa2:	e00a      	b.n	8001fba <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fa4:	f7ff fd5c 	bl	8001a60 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e0b5      	b.n	8002126 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fba:	4b3e      	ldr	r3, [pc, #248]	@ (80020b4 <HAL_RCC_OscConfig+0x470>)
 8001fbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d1ee      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001fc6:	7dfb      	ldrb	r3, [r7, #23]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d105      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fcc:	4b39      	ldr	r3, [pc, #228]	@ (80020b4 <HAL_RCC_OscConfig+0x470>)
 8001fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd0:	4a38      	ldr	r2, [pc, #224]	@ (80020b4 <HAL_RCC_OscConfig+0x470>)
 8001fd2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001fd6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	699b      	ldr	r3, [r3, #24]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	f000 80a1 	beq.w	8002124 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fe2:	4b34      	ldr	r3, [pc, #208]	@ (80020b4 <HAL_RCC_OscConfig+0x470>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f003 030c 	and.w	r3, r3, #12
 8001fea:	2b08      	cmp	r3, #8
 8001fec:	d05c      	beq.n	80020a8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	699b      	ldr	r3, [r3, #24]
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d141      	bne.n	800207a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ff6:	4b31      	ldr	r3, [pc, #196]	@ (80020bc <HAL_RCC_OscConfig+0x478>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ffc:	f7ff fd30 	bl	8001a60 <HAL_GetTick>
 8002000:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002002:	e008      	b.n	8002016 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002004:	f7ff fd2c 	bl	8001a60 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b02      	cmp	r3, #2
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e087      	b.n	8002126 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002016:	4b27      	ldr	r3, [pc, #156]	@ (80020b4 <HAL_RCC_OscConfig+0x470>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d1f0      	bne.n	8002004 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	69da      	ldr	r2, [r3, #28]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a1b      	ldr	r3, [r3, #32]
 800202a:	431a      	orrs	r2, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002030:	019b      	lsls	r3, r3, #6
 8002032:	431a      	orrs	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002038:	085b      	lsrs	r3, r3, #1
 800203a:	3b01      	subs	r3, #1
 800203c:	041b      	lsls	r3, r3, #16
 800203e:	431a      	orrs	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002044:	061b      	lsls	r3, r3, #24
 8002046:	491b      	ldr	r1, [pc, #108]	@ (80020b4 <HAL_RCC_OscConfig+0x470>)
 8002048:	4313      	orrs	r3, r2
 800204a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800204c:	4b1b      	ldr	r3, [pc, #108]	@ (80020bc <HAL_RCC_OscConfig+0x478>)
 800204e:	2201      	movs	r2, #1
 8002050:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002052:	f7ff fd05 	bl	8001a60 <HAL_GetTick>
 8002056:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002058:	e008      	b.n	800206c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800205a:	f7ff fd01 	bl	8001a60 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	2b02      	cmp	r3, #2
 8002066:	d901      	bls.n	800206c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e05c      	b.n	8002126 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800206c:	4b11      	ldr	r3, [pc, #68]	@ (80020b4 <HAL_RCC_OscConfig+0x470>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d0f0      	beq.n	800205a <HAL_RCC_OscConfig+0x416>
 8002078:	e054      	b.n	8002124 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800207a:	4b10      	ldr	r3, [pc, #64]	@ (80020bc <HAL_RCC_OscConfig+0x478>)
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002080:	f7ff fcee 	bl	8001a60 <HAL_GetTick>
 8002084:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002086:	e008      	b.n	800209a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002088:	f7ff fcea 	bl	8001a60 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b02      	cmp	r3, #2
 8002094:	d901      	bls.n	800209a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e045      	b.n	8002126 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800209a:	4b06      	ldr	r3, [pc, #24]	@ (80020b4 <HAL_RCC_OscConfig+0x470>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d1f0      	bne.n	8002088 <HAL_RCC_OscConfig+0x444>
 80020a6:	e03d      	b.n	8002124 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d107      	bne.n	80020c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e038      	b.n	8002126 <HAL_RCC_OscConfig+0x4e2>
 80020b4:	40023800 	.word	0x40023800
 80020b8:	40007000 	.word	0x40007000
 80020bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80020c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002130 <HAL_RCC_OscConfig+0x4ec>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	699b      	ldr	r3, [r3, #24]
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d028      	beq.n	8002120 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020d8:	429a      	cmp	r2, r3
 80020da:	d121      	bne.n	8002120 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d11a      	bne.n	8002120 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020ea:	68fa      	ldr	r2, [r7, #12]
 80020ec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80020f0:	4013      	ands	r3, r2
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80020f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d111      	bne.n	8002120 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002106:	085b      	lsrs	r3, r3, #1
 8002108:	3b01      	subs	r3, #1
 800210a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800210c:	429a      	cmp	r2, r3
 800210e:	d107      	bne.n	8002120 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800211a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800211c:	429a      	cmp	r2, r3
 800211e:	d001      	beq.n	8002124 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e000      	b.n	8002126 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3718      	adds	r7, #24
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	40023800 	.word	0x40023800

08002134 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d101      	bne.n	8002148 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e0cc      	b.n	80022e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002148:	4b68      	ldr	r3, [pc, #416]	@ (80022ec <HAL_RCC_ClockConfig+0x1b8>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0307 	and.w	r3, r3, #7
 8002150:	683a      	ldr	r2, [r7, #0]
 8002152:	429a      	cmp	r2, r3
 8002154:	d90c      	bls.n	8002170 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002156:	4b65      	ldr	r3, [pc, #404]	@ (80022ec <HAL_RCC_ClockConfig+0x1b8>)
 8002158:	683a      	ldr	r2, [r7, #0]
 800215a:	b2d2      	uxtb	r2, r2
 800215c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800215e:	4b63      	ldr	r3, [pc, #396]	@ (80022ec <HAL_RCC_ClockConfig+0x1b8>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0307 	and.w	r3, r3, #7
 8002166:	683a      	ldr	r2, [r7, #0]
 8002168:	429a      	cmp	r2, r3
 800216a:	d001      	beq.n	8002170 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e0b8      	b.n	80022e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0302 	and.w	r3, r3, #2
 8002178:	2b00      	cmp	r3, #0
 800217a:	d020      	beq.n	80021be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0304 	and.w	r3, r3, #4
 8002184:	2b00      	cmp	r3, #0
 8002186:	d005      	beq.n	8002194 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002188:	4b59      	ldr	r3, [pc, #356]	@ (80022f0 <HAL_RCC_ClockConfig+0x1bc>)
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	4a58      	ldr	r2, [pc, #352]	@ (80022f0 <HAL_RCC_ClockConfig+0x1bc>)
 800218e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002192:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0308 	and.w	r3, r3, #8
 800219c:	2b00      	cmp	r3, #0
 800219e:	d005      	beq.n	80021ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021a0:	4b53      	ldr	r3, [pc, #332]	@ (80022f0 <HAL_RCC_ClockConfig+0x1bc>)
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	4a52      	ldr	r2, [pc, #328]	@ (80022f0 <HAL_RCC_ClockConfig+0x1bc>)
 80021a6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80021aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021ac:	4b50      	ldr	r3, [pc, #320]	@ (80022f0 <HAL_RCC_ClockConfig+0x1bc>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	494d      	ldr	r1, [pc, #308]	@ (80022f0 <HAL_RCC_ClockConfig+0x1bc>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d044      	beq.n	8002254 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d107      	bne.n	80021e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021d2:	4b47      	ldr	r3, [pc, #284]	@ (80022f0 <HAL_RCC_ClockConfig+0x1bc>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d119      	bne.n	8002212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e07f      	b.n	80022e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d003      	beq.n	80021f2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021ee:	2b03      	cmp	r3, #3
 80021f0:	d107      	bne.n	8002202 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021f2:	4b3f      	ldr	r3, [pc, #252]	@ (80022f0 <HAL_RCC_ClockConfig+0x1bc>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d109      	bne.n	8002212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e06f      	b.n	80022e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002202:	4b3b      	ldr	r3, [pc, #236]	@ (80022f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d101      	bne.n	8002212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e067      	b.n	80022e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002212:	4b37      	ldr	r3, [pc, #220]	@ (80022f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f023 0203 	bic.w	r2, r3, #3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	4934      	ldr	r1, [pc, #208]	@ (80022f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002220:	4313      	orrs	r3, r2
 8002222:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002224:	f7ff fc1c 	bl	8001a60 <HAL_GetTick>
 8002228:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800222a:	e00a      	b.n	8002242 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800222c:	f7ff fc18 	bl	8001a60 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	f241 3288 	movw	r2, #5000	@ 0x1388
 800223a:	4293      	cmp	r3, r2
 800223c:	d901      	bls.n	8002242 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e04f      	b.n	80022e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002242:	4b2b      	ldr	r3, [pc, #172]	@ (80022f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f003 020c 	and.w	r2, r3, #12
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	429a      	cmp	r2, r3
 8002252:	d1eb      	bne.n	800222c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002254:	4b25      	ldr	r3, [pc, #148]	@ (80022ec <HAL_RCC_ClockConfig+0x1b8>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0307 	and.w	r3, r3, #7
 800225c:	683a      	ldr	r2, [r7, #0]
 800225e:	429a      	cmp	r2, r3
 8002260:	d20c      	bcs.n	800227c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002262:	4b22      	ldr	r3, [pc, #136]	@ (80022ec <HAL_RCC_ClockConfig+0x1b8>)
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	b2d2      	uxtb	r2, r2
 8002268:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800226a:	4b20      	ldr	r3, [pc, #128]	@ (80022ec <HAL_RCC_ClockConfig+0x1b8>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0307 	and.w	r3, r3, #7
 8002272:	683a      	ldr	r2, [r7, #0]
 8002274:	429a      	cmp	r2, r3
 8002276:	d001      	beq.n	800227c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e032      	b.n	80022e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0304 	and.w	r3, r3, #4
 8002284:	2b00      	cmp	r3, #0
 8002286:	d008      	beq.n	800229a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002288:	4b19      	ldr	r3, [pc, #100]	@ (80022f0 <HAL_RCC_ClockConfig+0x1bc>)
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	4916      	ldr	r1, [pc, #88]	@ (80022f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002296:	4313      	orrs	r3, r2
 8002298:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0308 	and.w	r3, r3, #8
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d009      	beq.n	80022ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022a6:	4b12      	ldr	r3, [pc, #72]	@ (80022f0 <HAL_RCC_ClockConfig+0x1bc>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	691b      	ldr	r3, [r3, #16]
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	490e      	ldr	r1, [pc, #56]	@ (80022f0 <HAL_RCC_ClockConfig+0x1bc>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022ba:	f000 f821 	bl	8002300 <HAL_RCC_GetSysClockFreq>
 80022be:	4602      	mov	r2, r0
 80022c0:	4b0b      	ldr	r3, [pc, #44]	@ (80022f0 <HAL_RCC_ClockConfig+0x1bc>)
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	091b      	lsrs	r3, r3, #4
 80022c6:	f003 030f 	and.w	r3, r3, #15
 80022ca:	490a      	ldr	r1, [pc, #40]	@ (80022f4 <HAL_RCC_ClockConfig+0x1c0>)
 80022cc:	5ccb      	ldrb	r3, [r1, r3]
 80022ce:	fa22 f303 	lsr.w	r3, r2, r3
 80022d2:	4a09      	ldr	r2, [pc, #36]	@ (80022f8 <HAL_RCC_ClockConfig+0x1c4>)
 80022d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80022d6:	4b09      	ldr	r3, [pc, #36]	@ (80022fc <HAL_RCC_ClockConfig+0x1c8>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4618      	mov	r0, r3
 80022dc:	f7ff fb7c 	bl	80019d8 <HAL_InitTick>

  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3710      	adds	r7, #16
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	40023c00 	.word	0x40023c00
 80022f0:	40023800 	.word	0x40023800
 80022f4:	08002a28 	.word	0x08002a28
 80022f8:	20000014 	.word	0x20000014
 80022fc:	20000018 	.word	0x20000018

08002300 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002300:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002304:	b090      	sub	sp, #64	@ 0x40
 8002306:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002308:	2300      	movs	r3, #0
 800230a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800230c:	2300      	movs	r3, #0
 800230e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002310:	2300      	movs	r3, #0
 8002312:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002314:	2300      	movs	r3, #0
 8002316:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002318:	4b59      	ldr	r3, [pc, #356]	@ (8002480 <HAL_RCC_GetSysClockFreq+0x180>)
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f003 030c 	and.w	r3, r3, #12
 8002320:	2b08      	cmp	r3, #8
 8002322:	d00d      	beq.n	8002340 <HAL_RCC_GetSysClockFreq+0x40>
 8002324:	2b08      	cmp	r3, #8
 8002326:	f200 80a1 	bhi.w	800246c <HAL_RCC_GetSysClockFreq+0x16c>
 800232a:	2b00      	cmp	r3, #0
 800232c:	d002      	beq.n	8002334 <HAL_RCC_GetSysClockFreq+0x34>
 800232e:	2b04      	cmp	r3, #4
 8002330:	d003      	beq.n	800233a <HAL_RCC_GetSysClockFreq+0x3a>
 8002332:	e09b      	b.n	800246c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002334:	4b53      	ldr	r3, [pc, #332]	@ (8002484 <HAL_RCC_GetSysClockFreq+0x184>)
 8002336:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002338:	e09b      	b.n	8002472 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800233a:	4b53      	ldr	r3, [pc, #332]	@ (8002488 <HAL_RCC_GetSysClockFreq+0x188>)
 800233c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800233e:	e098      	b.n	8002472 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002340:	4b4f      	ldr	r3, [pc, #316]	@ (8002480 <HAL_RCC_GetSysClockFreq+0x180>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002348:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800234a:	4b4d      	ldr	r3, [pc, #308]	@ (8002480 <HAL_RCC_GetSysClockFreq+0x180>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d028      	beq.n	80023a8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002356:	4b4a      	ldr	r3, [pc, #296]	@ (8002480 <HAL_RCC_GetSysClockFreq+0x180>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	099b      	lsrs	r3, r3, #6
 800235c:	2200      	movs	r2, #0
 800235e:	623b      	str	r3, [r7, #32]
 8002360:	627a      	str	r2, [r7, #36]	@ 0x24
 8002362:	6a3b      	ldr	r3, [r7, #32]
 8002364:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002368:	2100      	movs	r1, #0
 800236a:	4b47      	ldr	r3, [pc, #284]	@ (8002488 <HAL_RCC_GetSysClockFreq+0x188>)
 800236c:	fb03 f201 	mul.w	r2, r3, r1
 8002370:	2300      	movs	r3, #0
 8002372:	fb00 f303 	mul.w	r3, r0, r3
 8002376:	4413      	add	r3, r2
 8002378:	4a43      	ldr	r2, [pc, #268]	@ (8002488 <HAL_RCC_GetSysClockFreq+0x188>)
 800237a:	fba0 1202 	umull	r1, r2, r0, r2
 800237e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002380:	460a      	mov	r2, r1
 8002382:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002384:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002386:	4413      	add	r3, r2
 8002388:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800238a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800238c:	2200      	movs	r2, #0
 800238e:	61bb      	str	r3, [r7, #24]
 8002390:	61fa      	str	r2, [r7, #28]
 8002392:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002396:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800239a:	f7fe fb11 	bl	80009c0 <__aeabi_uldivmod>
 800239e:	4602      	mov	r2, r0
 80023a0:	460b      	mov	r3, r1
 80023a2:	4613      	mov	r3, r2
 80023a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80023a6:	e053      	b.n	8002450 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023a8:	4b35      	ldr	r3, [pc, #212]	@ (8002480 <HAL_RCC_GetSysClockFreq+0x180>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	099b      	lsrs	r3, r3, #6
 80023ae:	2200      	movs	r2, #0
 80023b0:	613b      	str	r3, [r7, #16]
 80023b2:	617a      	str	r2, [r7, #20]
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80023ba:	f04f 0b00 	mov.w	fp, #0
 80023be:	4652      	mov	r2, sl
 80023c0:	465b      	mov	r3, fp
 80023c2:	f04f 0000 	mov.w	r0, #0
 80023c6:	f04f 0100 	mov.w	r1, #0
 80023ca:	0159      	lsls	r1, r3, #5
 80023cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023d0:	0150      	lsls	r0, r2, #5
 80023d2:	4602      	mov	r2, r0
 80023d4:	460b      	mov	r3, r1
 80023d6:	ebb2 080a 	subs.w	r8, r2, sl
 80023da:	eb63 090b 	sbc.w	r9, r3, fp
 80023de:	f04f 0200 	mov.w	r2, #0
 80023e2:	f04f 0300 	mov.w	r3, #0
 80023e6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80023ea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80023ee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80023f2:	ebb2 0408 	subs.w	r4, r2, r8
 80023f6:	eb63 0509 	sbc.w	r5, r3, r9
 80023fa:	f04f 0200 	mov.w	r2, #0
 80023fe:	f04f 0300 	mov.w	r3, #0
 8002402:	00eb      	lsls	r3, r5, #3
 8002404:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002408:	00e2      	lsls	r2, r4, #3
 800240a:	4614      	mov	r4, r2
 800240c:	461d      	mov	r5, r3
 800240e:	eb14 030a 	adds.w	r3, r4, sl
 8002412:	603b      	str	r3, [r7, #0]
 8002414:	eb45 030b 	adc.w	r3, r5, fp
 8002418:	607b      	str	r3, [r7, #4]
 800241a:	f04f 0200 	mov.w	r2, #0
 800241e:	f04f 0300 	mov.w	r3, #0
 8002422:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002426:	4629      	mov	r1, r5
 8002428:	028b      	lsls	r3, r1, #10
 800242a:	4621      	mov	r1, r4
 800242c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002430:	4621      	mov	r1, r4
 8002432:	028a      	lsls	r2, r1, #10
 8002434:	4610      	mov	r0, r2
 8002436:	4619      	mov	r1, r3
 8002438:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800243a:	2200      	movs	r2, #0
 800243c:	60bb      	str	r3, [r7, #8]
 800243e:	60fa      	str	r2, [r7, #12]
 8002440:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002444:	f7fe fabc 	bl	80009c0 <__aeabi_uldivmod>
 8002448:	4602      	mov	r2, r0
 800244a:	460b      	mov	r3, r1
 800244c:	4613      	mov	r3, r2
 800244e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002450:	4b0b      	ldr	r3, [pc, #44]	@ (8002480 <HAL_RCC_GetSysClockFreq+0x180>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	0c1b      	lsrs	r3, r3, #16
 8002456:	f003 0303 	and.w	r3, r3, #3
 800245a:	3301      	adds	r3, #1
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002460:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002464:	fbb2 f3f3 	udiv	r3, r2, r3
 8002468:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800246a:	e002      	b.n	8002472 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800246c:	4b05      	ldr	r3, [pc, #20]	@ (8002484 <HAL_RCC_GetSysClockFreq+0x184>)
 800246e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002470:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002474:	4618      	mov	r0, r3
 8002476:	3740      	adds	r7, #64	@ 0x40
 8002478:	46bd      	mov	sp, r7
 800247a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800247e:	bf00      	nop
 8002480:	40023800 	.word	0x40023800
 8002484:	00f42400 	.word	0x00f42400
 8002488:	017d7840 	.word	0x017d7840

0800248c <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 800248c:	b10a      	cbz	r2, 8002492 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 800248e:	f000 ba4d 	b.w	800292c <memcpy>
 8002492:	4770      	bx	lr

08002494 <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
 8002494:	b10a      	cbz	r2, 800249a <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6>
 8002496:	f000 b9b1 	b.w	80027fc <memcmp>
 800249a:	4610      	mov	r0, r2
 800249c:	4770      	bx	lr

0800249e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_S_allocateERS3_j>:
 800249e:	1e08      	subs	r0, r1, #0
 80024a0:	b508      	push	{r3, lr}
 80024a2:	da01      	bge.n	80024a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_S_allocateERS3_j+0xa>
 80024a4:	f000 f8d3 	bl	800264e <_ZSt17__throw_bad_allocv>
 80024a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80024ac:	f000 b8be 	b.w	800262c <_Znwj>

080024b0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>:
 80024b0:	f850 3b08 	ldr.w	r3, [r0], #8
 80024b4:	1a1b      	subs	r3, r3, r0
 80024b6:	4258      	negs	r0, r3
 80024b8:	4158      	adcs	r0, r3
 80024ba:	4770      	bx	lr

080024bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 80024bc:	680b      	ldr	r3, [r1, #0]
 80024be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024c2:	b510      	push	{r4, lr}
 80024c4:	d302      	bcc.n	80024cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 80024c6:	480b      	ldr	r0, [pc, #44]	@ (80024f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x38>)
 80024c8:	f000 f8c7 	bl	800265a <_ZSt20__throw_length_errorPKc>
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d90b      	bls.n	80024e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 80024d0:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 80024d4:	ea4f 0442 	mov.w	r4, r2, lsl #1
 80024d8:	d206      	bcs.n	80024e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 80024da:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 80024de:	bf2a      	itet	cs
 80024e0:	f06f 4340 	mvncs.w	r3, #3221225472	@ 0xc0000000
 80024e4:	600c      	strcc	r4, [r1, #0]
 80024e6:	600b      	strcs	r3, [r1, #0]
 80024e8:	6809      	ldr	r1, [r1, #0]
 80024ea:	3101      	adds	r1, #1
 80024ec:	f7ff ffd7 	bl	800249e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_S_allocateERS3_j>
 80024f0:	bd10      	pop	{r4, pc}
 80024f2:	bf00      	nop
 80024f4:	08002a38 	.word	0x08002a38

080024f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_destroyEj>:
 80024f8:	6800      	ldr	r0, [r0, #0]
 80024fa:	f000 b895 	b.w	8002628 <_ZdlPv>

080024fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 80024fe:	b510      	push	{r4, lr}
 8002500:	4604      	mov	r4, r0
 8002502:	f7ff ffd5 	bl	80024b0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8002506:	b918      	cbnz	r0, 8002510 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x12>
 8002508:	68a1      	ldr	r1, [r4, #8]
 800250a:	4620      	mov	r0, r4
 800250c:	f7ff fff4 	bl	80024f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_destroyEj>
 8002510:	bd10      	pop	{r4, pc}

08002512 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8002512:	2a01      	cmp	r2, #1
 8002514:	b410      	push	{r4}
 8002516:	d104      	bne.n	8002522 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 8002518:	780a      	ldrb	r2, [r1, #0]
 800251a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800251e:	7002      	strb	r2, [r0, #0]
 8002520:	4770      	bx	lr
 8002522:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002526:	f7ff bfb1 	b.w	800248c <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

0800252a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 800252a:	b508      	push	{r3, lr}
 800252c:	1a52      	subs	r2, r2, r1
 800252e:	f7ff fff0 	bl	8002512 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8002532:	bd08      	pop	{r3, pc}

08002534 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8002534:	b508      	push	{r3, lr}
 8002536:	1a52      	subs	r2, r2, r1
 8002538:	f7ff ffeb 	bl	8002512 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800253c:	bd08      	pop	{r3, pc}

0800253e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 800253e:	b510      	push	{r4, lr}
 8002540:	4604      	mov	r4, r0
 8002542:	f7ff ffdc 	bl	80024fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8002546:	4620      	mov	r0, r4
 8002548:	bd10      	pop	{r4, pc}

0800254a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>:
 800254a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800254c:	6847      	ldr	r7, [r0, #4]
 800254e:	4605      	mov	r5, r0
 8002550:	4608      	mov	r0, r1
 8002552:	460e      	mov	r6, r1
 8002554:	f7fd fe3e 	bl	80001d4 <strlen>
 8002558:	4287      	cmp	r7, r0
 800255a:	4604      	mov	r4, r0
 800255c:	463a      	mov	r2, r7
 800255e:	4631      	mov	r1, r6
 8002560:	bf28      	it	cs
 8002562:	4602      	movcs	r2, r0
 8002564:	6828      	ldr	r0, [r5, #0]
 8002566:	f7ff ff95 	bl	8002494 <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 800256a:	b900      	cbnz	r0, 800256e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc+0x24>
 800256c:	1b38      	subs	r0, r7, r4
 800256e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002570 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 8002570:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002572:	1a53      	subs	r3, r2, r1
 8002574:	2b0f      	cmp	r3, #15
 8002576:	4604      	mov	r4, r0
 8002578:	460d      	mov	r5, r1
 800257a:	4616      	mov	r6, r2
 800257c:	9301      	str	r3, [sp, #4]
 800257e:	d906      	bls.n	800258e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x1e>
 8002580:	2200      	movs	r2, #0
 8002582:	a901      	add	r1, sp, #4
 8002584:	f7ff ff9a 	bl	80024bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8002588:	9b01      	ldr	r3, [sp, #4]
 800258a:	6020      	str	r0, [r4, #0]
 800258c:	60a3      	str	r3, [r4, #8]
 800258e:	4632      	mov	r2, r6
 8002590:	4629      	mov	r1, r5
 8002592:	6820      	ldr	r0, [r4, #0]
 8002594:	f7ff ffc9 	bl	800252a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 8002598:	9b01      	ldr	r3, [sp, #4]
 800259a:	6822      	ldr	r2, [r4, #0]
 800259c:	6063      	str	r3, [r4, #4]
 800259e:	2100      	movs	r1, #0
 80025a0:	54d1      	strb	r1, [r2, r3]
 80025a2:	b002      	add	sp, #8
 80025a4:	bd70      	pop	{r4, r5, r6, pc}

080025a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 80025a6:	f100 0208 	add.w	r2, r0, #8
 80025aa:	b510      	push	{r4, lr}
 80025ac:	6002      	str	r2, [r0, #0]
 80025ae:	e9d1 1200 	ldrd	r1, r2, [r1]
 80025b2:	4604      	mov	r4, r0
 80025b4:	f04f 0300 	mov.w	r3, #0
 80025b8:	440a      	add	r2, r1
 80025ba:	f7ff ffd9 	bl	8002570 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 80025be:	4620      	mov	r0, r4
 80025c0:	bd10      	pop	{r4, pc}

080025c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 80025c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80025c4:	1a53      	subs	r3, r2, r1
 80025c6:	2b0f      	cmp	r3, #15
 80025c8:	4604      	mov	r4, r0
 80025ca:	460d      	mov	r5, r1
 80025cc:	4616      	mov	r6, r2
 80025ce:	9301      	str	r3, [sp, #4]
 80025d0:	d906      	bls.n	80025e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x1e>
 80025d2:	2200      	movs	r2, #0
 80025d4:	a901      	add	r1, sp, #4
 80025d6:	f7ff ff71 	bl	80024bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80025da:	9b01      	ldr	r3, [sp, #4]
 80025dc:	6020      	str	r0, [r4, #0]
 80025de:	60a3      	str	r3, [r4, #8]
 80025e0:	4632      	mov	r2, r6
 80025e2:	4629      	mov	r1, r5
 80025e4:	6820      	ldr	r0, [r4, #0]
 80025e6:	f7ff ffa5 	bl	8002534 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 80025ea:	9b01      	ldr	r3, [sp, #4]
 80025ec:	6822      	ldr	r2, [r4, #0]
 80025ee:	6063      	str	r3, [r4, #4]
 80025f0:	2100      	movs	r1, #0
 80025f2:	54d1      	strb	r1, [r2, r3]
 80025f4:	b002      	add	sp, #8
 80025f6:	bd70      	pop	{r4, r5, r6, pc}

080025f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 80025f8:	b538      	push	{r3, r4, r5, lr}
 80025fa:	f100 0308 	add.w	r3, r0, #8
 80025fe:	4604      	mov	r4, r0
 8002600:	6003      	str	r3, [r0, #0]
 8002602:	460d      	mov	r5, r1
 8002604:	b911      	cbnz	r1, 800260c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x14>
 8002606:	4807      	ldr	r0, [pc, #28]	@ (8002624 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x2c>)
 8002608:	f000 f824 	bl	8002654 <_ZSt19__throw_logic_errorPKc>
 800260c:	4608      	mov	r0, r1
 800260e:	f7fd fde1 	bl	80001d4 <strlen>
 8002612:	f04f 0300 	mov.w	r3, #0
 8002616:	182a      	adds	r2, r5, r0
 8002618:	4629      	mov	r1, r5
 800261a:	4620      	mov	r0, r4
 800261c:	f7ff ffd1 	bl	80025c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8002620:	4620      	mov	r0, r4
 8002622:	bd38      	pop	{r3, r4, r5, pc}
 8002624:	08002a50 	.word	0x08002a50

08002628 <_ZdlPv>:
 8002628:	f000 b832 	b.w	8002690 <free>

0800262c <_Znwj>:
 800262c:	2801      	cmp	r0, #1
 800262e:	bf38      	it	cc
 8002630:	2001      	movcc	r0, #1
 8002632:	b510      	push	{r4, lr}
 8002634:	4604      	mov	r4, r0
 8002636:	4620      	mov	r0, r4
 8002638:	f000 f822 	bl	8002680 <malloc>
 800263c:	b100      	cbz	r0, 8002640 <_Znwj+0x14>
 800263e:	bd10      	pop	{r4, pc}
 8002640:	f000 f80e 	bl	8002660 <_ZSt15get_new_handlerv>
 8002644:	b908      	cbnz	r0, 800264a <_Znwj+0x1e>
 8002646:	f000 f813 	bl	8002670 <abort>
 800264a:	4780      	blx	r0
 800264c:	e7f3      	b.n	8002636 <_Znwj+0xa>

0800264e <_ZSt17__throw_bad_allocv>:
 800264e:	b508      	push	{r3, lr}
 8002650:	f000 f80e 	bl	8002670 <abort>

08002654 <_ZSt19__throw_logic_errorPKc>:
 8002654:	b508      	push	{r3, lr}
 8002656:	f000 f80b 	bl	8002670 <abort>

0800265a <_ZSt20__throw_length_errorPKc>:
 800265a:	b508      	push	{r3, lr}
 800265c:	f000 f808 	bl	8002670 <abort>

08002660 <_ZSt15get_new_handlerv>:
 8002660:	4b02      	ldr	r3, [pc, #8]	@ (800266c <_ZSt15get_new_handlerv+0xc>)
 8002662:	6818      	ldr	r0, [r3, #0]
 8002664:	f3bf 8f5b 	dmb	ish
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	20000150 	.word	0x20000150

08002670 <abort>:
 8002670:	b508      	push	{r3, lr}
 8002672:	2006      	movs	r0, #6
 8002674:	f000 f902 	bl	800287c <raise>
 8002678:	2001      	movs	r0, #1
 800267a:	f7ff f90e 	bl	800189a <_exit>
	...

08002680 <malloc>:
 8002680:	4b02      	ldr	r3, [pc, #8]	@ (800268c <malloc+0xc>)
 8002682:	4601      	mov	r1, r0
 8002684:	6818      	ldr	r0, [r3, #0]
 8002686:	f000 b82d 	b.w	80026e4 <_malloc_r>
 800268a:	bf00      	nop
 800268c:	20000020 	.word	0x20000020

08002690 <free>:
 8002690:	4b02      	ldr	r3, [pc, #8]	@ (800269c <free+0xc>)
 8002692:	4601      	mov	r1, r0
 8002694:	6818      	ldr	r0, [r3, #0]
 8002696:	f000 b957 	b.w	8002948 <_free_r>
 800269a:	bf00      	nop
 800269c:	20000020 	.word	0x20000020

080026a0 <sbrk_aligned>:
 80026a0:	b570      	push	{r4, r5, r6, lr}
 80026a2:	4e0f      	ldr	r6, [pc, #60]	@ (80026e0 <sbrk_aligned+0x40>)
 80026a4:	460c      	mov	r4, r1
 80026a6:	6831      	ldr	r1, [r6, #0]
 80026a8:	4605      	mov	r5, r0
 80026aa:	b911      	cbnz	r1, 80026b2 <sbrk_aligned+0x12>
 80026ac:	f000 f902 	bl	80028b4 <_sbrk_r>
 80026b0:	6030      	str	r0, [r6, #0]
 80026b2:	4621      	mov	r1, r4
 80026b4:	4628      	mov	r0, r5
 80026b6:	f000 f8fd 	bl	80028b4 <_sbrk_r>
 80026ba:	1c43      	adds	r3, r0, #1
 80026bc:	d103      	bne.n	80026c6 <sbrk_aligned+0x26>
 80026be:	f04f 34ff 	mov.w	r4, #4294967295
 80026c2:	4620      	mov	r0, r4
 80026c4:	bd70      	pop	{r4, r5, r6, pc}
 80026c6:	1cc4      	adds	r4, r0, #3
 80026c8:	f024 0403 	bic.w	r4, r4, #3
 80026cc:	42a0      	cmp	r0, r4
 80026ce:	d0f8      	beq.n	80026c2 <sbrk_aligned+0x22>
 80026d0:	1a21      	subs	r1, r4, r0
 80026d2:	4628      	mov	r0, r5
 80026d4:	f000 f8ee 	bl	80028b4 <_sbrk_r>
 80026d8:	3001      	adds	r0, #1
 80026da:	d1f2      	bne.n	80026c2 <sbrk_aligned+0x22>
 80026dc:	e7ef      	b.n	80026be <sbrk_aligned+0x1e>
 80026de:	bf00      	nop
 80026e0:	20000154 	.word	0x20000154

080026e4 <_malloc_r>:
 80026e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80026e8:	1ccd      	adds	r5, r1, #3
 80026ea:	f025 0503 	bic.w	r5, r5, #3
 80026ee:	3508      	adds	r5, #8
 80026f0:	2d0c      	cmp	r5, #12
 80026f2:	bf38      	it	cc
 80026f4:	250c      	movcc	r5, #12
 80026f6:	2d00      	cmp	r5, #0
 80026f8:	4606      	mov	r6, r0
 80026fa:	db01      	blt.n	8002700 <_malloc_r+0x1c>
 80026fc:	42a9      	cmp	r1, r5
 80026fe:	d904      	bls.n	800270a <_malloc_r+0x26>
 8002700:	230c      	movs	r3, #12
 8002702:	6033      	str	r3, [r6, #0]
 8002704:	2000      	movs	r0, #0
 8002706:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800270a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80027e0 <_malloc_r+0xfc>
 800270e:	f000 f869 	bl	80027e4 <__malloc_lock>
 8002712:	f8d8 3000 	ldr.w	r3, [r8]
 8002716:	461c      	mov	r4, r3
 8002718:	bb44      	cbnz	r4, 800276c <_malloc_r+0x88>
 800271a:	4629      	mov	r1, r5
 800271c:	4630      	mov	r0, r6
 800271e:	f7ff ffbf 	bl	80026a0 <sbrk_aligned>
 8002722:	1c43      	adds	r3, r0, #1
 8002724:	4604      	mov	r4, r0
 8002726:	d158      	bne.n	80027da <_malloc_r+0xf6>
 8002728:	f8d8 4000 	ldr.w	r4, [r8]
 800272c:	4627      	mov	r7, r4
 800272e:	2f00      	cmp	r7, #0
 8002730:	d143      	bne.n	80027ba <_malloc_r+0xd6>
 8002732:	2c00      	cmp	r4, #0
 8002734:	d04b      	beq.n	80027ce <_malloc_r+0xea>
 8002736:	6823      	ldr	r3, [r4, #0]
 8002738:	4639      	mov	r1, r7
 800273a:	4630      	mov	r0, r6
 800273c:	eb04 0903 	add.w	r9, r4, r3
 8002740:	f000 f8b8 	bl	80028b4 <_sbrk_r>
 8002744:	4581      	cmp	r9, r0
 8002746:	d142      	bne.n	80027ce <_malloc_r+0xea>
 8002748:	6821      	ldr	r1, [r4, #0]
 800274a:	1a6d      	subs	r5, r5, r1
 800274c:	4629      	mov	r1, r5
 800274e:	4630      	mov	r0, r6
 8002750:	f7ff ffa6 	bl	80026a0 <sbrk_aligned>
 8002754:	3001      	adds	r0, #1
 8002756:	d03a      	beq.n	80027ce <_malloc_r+0xea>
 8002758:	6823      	ldr	r3, [r4, #0]
 800275a:	442b      	add	r3, r5
 800275c:	6023      	str	r3, [r4, #0]
 800275e:	f8d8 3000 	ldr.w	r3, [r8]
 8002762:	685a      	ldr	r2, [r3, #4]
 8002764:	bb62      	cbnz	r2, 80027c0 <_malloc_r+0xdc>
 8002766:	f8c8 7000 	str.w	r7, [r8]
 800276a:	e00f      	b.n	800278c <_malloc_r+0xa8>
 800276c:	6822      	ldr	r2, [r4, #0]
 800276e:	1b52      	subs	r2, r2, r5
 8002770:	d420      	bmi.n	80027b4 <_malloc_r+0xd0>
 8002772:	2a0b      	cmp	r2, #11
 8002774:	d917      	bls.n	80027a6 <_malloc_r+0xc2>
 8002776:	1961      	adds	r1, r4, r5
 8002778:	42a3      	cmp	r3, r4
 800277a:	6025      	str	r5, [r4, #0]
 800277c:	bf18      	it	ne
 800277e:	6059      	strne	r1, [r3, #4]
 8002780:	6863      	ldr	r3, [r4, #4]
 8002782:	bf08      	it	eq
 8002784:	f8c8 1000 	streq.w	r1, [r8]
 8002788:	5162      	str	r2, [r4, r5]
 800278a:	604b      	str	r3, [r1, #4]
 800278c:	4630      	mov	r0, r6
 800278e:	f000 f82f 	bl	80027f0 <__malloc_unlock>
 8002792:	f104 000b 	add.w	r0, r4, #11
 8002796:	1d23      	adds	r3, r4, #4
 8002798:	f020 0007 	bic.w	r0, r0, #7
 800279c:	1ac2      	subs	r2, r0, r3
 800279e:	bf1c      	itt	ne
 80027a0:	1a1b      	subne	r3, r3, r0
 80027a2:	50a3      	strne	r3, [r4, r2]
 80027a4:	e7af      	b.n	8002706 <_malloc_r+0x22>
 80027a6:	6862      	ldr	r2, [r4, #4]
 80027a8:	42a3      	cmp	r3, r4
 80027aa:	bf0c      	ite	eq
 80027ac:	f8c8 2000 	streq.w	r2, [r8]
 80027b0:	605a      	strne	r2, [r3, #4]
 80027b2:	e7eb      	b.n	800278c <_malloc_r+0xa8>
 80027b4:	4623      	mov	r3, r4
 80027b6:	6864      	ldr	r4, [r4, #4]
 80027b8:	e7ae      	b.n	8002718 <_malloc_r+0x34>
 80027ba:	463c      	mov	r4, r7
 80027bc:	687f      	ldr	r7, [r7, #4]
 80027be:	e7b6      	b.n	800272e <_malloc_r+0x4a>
 80027c0:	461a      	mov	r2, r3
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	42a3      	cmp	r3, r4
 80027c6:	d1fb      	bne.n	80027c0 <_malloc_r+0xdc>
 80027c8:	2300      	movs	r3, #0
 80027ca:	6053      	str	r3, [r2, #4]
 80027cc:	e7de      	b.n	800278c <_malloc_r+0xa8>
 80027ce:	230c      	movs	r3, #12
 80027d0:	6033      	str	r3, [r6, #0]
 80027d2:	4630      	mov	r0, r6
 80027d4:	f000 f80c 	bl	80027f0 <__malloc_unlock>
 80027d8:	e794      	b.n	8002704 <_malloc_r+0x20>
 80027da:	6005      	str	r5, [r0, #0]
 80027dc:	e7d6      	b.n	800278c <_malloc_r+0xa8>
 80027de:	bf00      	nop
 80027e0:	20000158 	.word	0x20000158

080027e4 <__malloc_lock>:
 80027e4:	4801      	ldr	r0, [pc, #4]	@ (80027ec <__malloc_lock+0x8>)
 80027e6:	f000 b89f 	b.w	8002928 <__retarget_lock_acquire_recursive>
 80027ea:	bf00      	nop
 80027ec:	20000298 	.word	0x20000298

080027f0 <__malloc_unlock>:
 80027f0:	4801      	ldr	r0, [pc, #4]	@ (80027f8 <__malloc_unlock+0x8>)
 80027f2:	f000 b89a 	b.w	800292a <__retarget_lock_release_recursive>
 80027f6:	bf00      	nop
 80027f8:	20000298 	.word	0x20000298

080027fc <memcmp>:
 80027fc:	b510      	push	{r4, lr}
 80027fe:	3901      	subs	r1, #1
 8002800:	4402      	add	r2, r0
 8002802:	4290      	cmp	r0, r2
 8002804:	d101      	bne.n	800280a <memcmp+0xe>
 8002806:	2000      	movs	r0, #0
 8002808:	e005      	b.n	8002816 <memcmp+0x1a>
 800280a:	7803      	ldrb	r3, [r0, #0]
 800280c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8002810:	42a3      	cmp	r3, r4
 8002812:	d001      	beq.n	8002818 <memcmp+0x1c>
 8002814:	1b18      	subs	r0, r3, r4
 8002816:	bd10      	pop	{r4, pc}
 8002818:	3001      	adds	r0, #1
 800281a:	e7f2      	b.n	8002802 <memcmp+0x6>

0800281c <memset>:
 800281c:	4402      	add	r2, r0
 800281e:	4603      	mov	r3, r0
 8002820:	4293      	cmp	r3, r2
 8002822:	d100      	bne.n	8002826 <memset+0xa>
 8002824:	4770      	bx	lr
 8002826:	f803 1b01 	strb.w	r1, [r3], #1
 800282a:	e7f9      	b.n	8002820 <memset+0x4>

0800282c <_raise_r>:
 800282c:	291f      	cmp	r1, #31
 800282e:	b538      	push	{r3, r4, r5, lr}
 8002830:	4605      	mov	r5, r0
 8002832:	460c      	mov	r4, r1
 8002834:	d904      	bls.n	8002840 <_raise_r+0x14>
 8002836:	2316      	movs	r3, #22
 8002838:	6003      	str	r3, [r0, #0]
 800283a:	f04f 30ff 	mov.w	r0, #4294967295
 800283e:	bd38      	pop	{r3, r4, r5, pc}
 8002840:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8002842:	b112      	cbz	r2, 800284a <_raise_r+0x1e>
 8002844:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002848:	b94b      	cbnz	r3, 800285e <_raise_r+0x32>
 800284a:	4628      	mov	r0, r5
 800284c:	f000 f830 	bl	80028b0 <_getpid_r>
 8002850:	4622      	mov	r2, r4
 8002852:	4601      	mov	r1, r0
 8002854:	4628      	mov	r0, r5
 8002856:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800285a:	f000 b817 	b.w	800288c <_kill_r>
 800285e:	2b01      	cmp	r3, #1
 8002860:	d00a      	beq.n	8002878 <_raise_r+0x4c>
 8002862:	1c59      	adds	r1, r3, #1
 8002864:	d103      	bne.n	800286e <_raise_r+0x42>
 8002866:	2316      	movs	r3, #22
 8002868:	6003      	str	r3, [r0, #0]
 800286a:	2001      	movs	r0, #1
 800286c:	e7e7      	b.n	800283e <_raise_r+0x12>
 800286e:	2100      	movs	r1, #0
 8002870:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8002874:	4620      	mov	r0, r4
 8002876:	4798      	blx	r3
 8002878:	2000      	movs	r0, #0
 800287a:	e7e0      	b.n	800283e <_raise_r+0x12>

0800287c <raise>:
 800287c:	4b02      	ldr	r3, [pc, #8]	@ (8002888 <raise+0xc>)
 800287e:	4601      	mov	r1, r0
 8002880:	6818      	ldr	r0, [r3, #0]
 8002882:	f7ff bfd3 	b.w	800282c <_raise_r>
 8002886:	bf00      	nop
 8002888:	20000020 	.word	0x20000020

0800288c <_kill_r>:
 800288c:	b538      	push	{r3, r4, r5, lr}
 800288e:	4d07      	ldr	r5, [pc, #28]	@ (80028ac <_kill_r+0x20>)
 8002890:	2300      	movs	r3, #0
 8002892:	4604      	mov	r4, r0
 8002894:	4608      	mov	r0, r1
 8002896:	4611      	mov	r1, r2
 8002898:	602b      	str	r3, [r5, #0]
 800289a:	f7fe ffee 	bl	800187a <_kill>
 800289e:	1c43      	adds	r3, r0, #1
 80028a0:	d102      	bne.n	80028a8 <_kill_r+0x1c>
 80028a2:	682b      	ldr	r3, [r5, #0]
 80028a4:	b103      	cbz	r3, 80028a8 <_kill_r+0x1c>
 80028a6:	6023      	str	r3, [r4, #0]
 80028a8:	bd38      	pop	{r3, r4, r5, pc}
 80028aa:	bf00      	nop
 80028ac:	20000294 	.word	0x20000294

080028b0 <_getpid_r>:
 80028b0:	f7fe bfdb 	b.w	800186a <_getpid>

080028b4 <_sbrk_r>:
 80028b4:	b538      	push	{r3, r4, r5, lr}
 80028b6:	4d06      	ldr	r5, [pc, #24]	@ (80028d0 <_sbrk_r+0x1c>)
 80028b8:	2300      	movs	r3, #0
 80028ba:	4604      	mov	r4, r0
 80028bc:	4608      	mov	r0, r1
 80028be:	602b      	str	r3, [r5, #0]
 80028c0:	f7fe fff6 	bl	80018b0 <_sbrk>
 80028c4:	1c43      	adds	r3, r0, #1
 80028c6:	d102      	bne.n	80028ce <_sbrk_r+0x1a>
 80028c8:	682b      	ldr	r3, [r5, #0]
 80028ca:	b103      	cbz	r3, 80028ce <_sbrk_r+0x1a>
 80028cc:	6023      	str	r3, [r4, #0]
 80028ce:	bd38      	pop	{r3, r4, r5, pc}
 80028d0:	20000294 	.word	0x20000294

080028d4 <__errno>:
 80028d4:	4b01      	ldr	r3, [pc, #4]	@ (80028dc <__errno+0x8>)
 80028d6:	6818      	ldr	r0, [r3, #0]
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	20000020 	.word	0x20000020

080028e0 <__libc_init_array>:
 80028e0:	b570      	push	{r4, r5, r6, lr}
 80028e2:	4d0d      	ldr	r5, [pc, #52]	@ (8002918 <__libc_init_array+0x38>)
 80028e4:	4c0d      	ldr	r4, [pc, #52]	@ (800291c <__libc_init_array+0x3c>)
 80028e6:	1b64      	subs	r4, r4, r5
 80028e8:	10a4      	asrs	r4, r4, #2
 80028ea:	2600      	movs	r6, #0
 80028ec:	42a6      	cmp	r6, r4
 80028ee:	d109      	bne.n	8002904 <__libc_init_array+0x24>
 80028f0:	4d0b      	ldr	r5, [pc, #44]	@ (8002920 <__libc_init_array+0x40>)
 80028f2:	4c0c      	ldr	r4, [pc, #48]	@ (8002924 <__libc_init_array+0x44>)
 80028f4:	f000 f872 	bl	80029dc <_init>
 80028f8:	1b64      	subs	r4, r4, r5
 80028fa:	10a4      	asrs	r4, r4, #2
 80028fc:	2600      	movs	r6, #0
 80028fe:	42a6      	cmp	r6, r4
 8002900:	d105      	bne.n	800290e <__libc_init_array+0x2e>
 8002902:	bd70      	pop	{r4, r5, r6, pc}
 8002904:	f855 3b04 	ldr.w	r3, [r5], #4
 8002908:	4798      	blx	r3
 800290a:	3601      	adds	r6, #1
 800290c:	e7ee      	b.n	80028ec <__libc_init_array+0xc>
 800290e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002912:	4798      	blx	r3
 8002914:	3601      	adds	r6, #1
 8002916:	e7f2      	b.n	80028fe <__libc_init_array+0x1e>
 8002918:	08002a8c 	.word	0x08002a8c
 800291c:	08002a8c 	.word	0x08002a8c
 8002920:	08002a8c 	.word	0x08002a8c
 8002924:	08002a90 	.word	0x08002a90

08002928 <__retarget_lock_acquire_recursive>:
 8002928:	4770      	bx	lr

0800292a <__retarget_lock_release_recursive>:
 800292a:	4770      	bx	lr

0800292c <memcpy>:
 800292c:	440a      	add	r2, r1
 800292e:	4291      	cmp	r1, r2
 8002930:	f100 33ff 	add.w	r3, r0, #4294967295
 8002934:	d100      	bne.n	8002938 <memcpy+0xc>
 8002936:	4770      	bx	lr
 8002938:	b510      	push	{r4, lr}
 800293a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800293e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002942:	4291      	cmp	r1, r2
 8002944:	d1f9      	bne.n	800293a <memcpy+0xe>
 8002946:	bd10      	pop	{r4, pc}

08002948 <_free_r>:
 8002948:	b538      	push	{r3, r4, r5, lr}
 800294a:	4605      	mov	r5, r0
 800294c:	2900      	cmp	r1, #0
 800294e:	d041      	beq.n	80029d4 <_free_r+0x8c>
 8002950:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002954:	1f0c      	subs	r4, r1, #4
 8002956:	2b00      	cmp	r3, #0
 8002958:	bfb8      	it	lt
 800295a:	18e4      	addlt	r4, r4, r3
 800295c:	f7ff ff42 	bl	80027e4 <__malloc_lock>
 8002960:	4a1d      	ldr	r2, [pc, #116]	@ (80029d8 <_free_r+0x90>)
 8002962:	6813      	ldr	r3, [r2, #0]
 8002964:	b933      	cbnz	r3, 8002974 <_free_r+0x2c>
 8002966:	6063      	str	r3, [r4, #4]
 8002968:	6014      	str	r4, [r2, #0]
 800296a:	4628      	mov	r0, r5
 800296c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002970:	f7ff bf3e 	b.w	80027f0 <__malloc_unlock>
 8002974:	42a3      	cmp	r3, r4
 8002976:	d908      	bls.n	800298a <_free_r+0x42>
 8002978:	6820      	ldr	r0, [r4, #0]
 800297a:	1821      	adds	r1, r4, r0
 800297c:	428b      	cmp	r3, r1
 800297e:	bf01      	itttt	eq
 8002980:	6819      	ldreq	r1, [r3, #0]
 8002982:	685b      	ldreq	r3, [r3, #4]
 8002984:	1809      	addeq	r1, r1, r0
 8002986:	6021      	streq	r1, [r4, #0]
 8002988:	e7ed      	b.n	8002966 <_free_r+0x1e>
 800298a:	461a      	mov	r2, r3
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	b10b      	cbz	r3, 8002994 <_free_r+0x4c>
 8002990:	42a3      	cmp	r3, r4
 8002992:	d9fa      	bls.n	800298a <_free_r+0x42>
 8002994:	6811      	ldr	r1, [r2, #0]
 8002996:	1850      	adds	r0, r2, r1
 8002998:	42a0      	cmp	r0, r4
 800299a:	d10b      	bne.n	80029b4 <_free_r+0x6c>
 800299c:	6820      	ldr	r0, [r4, #0]
 800299e:	4401      	add	r1, r0
 80029a0:	1850      	adds	r0, r2, r1
 80029a2:	4283      	cmp	r3, r0
 80029a4:	6011      	str	r1, [r2, #0]
 80029a6:	d1e0      	bne.n	800296a <_free_r+0x22>
 80029a8:	6818      	ldr	r0, [r3, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	6053      	str	r3, [r2, #4]
 80029ae:	4408      	add	r0, r1
 80029b0:	6010      	str	r0, [r2, #0]
 80029b2:	e7da      	b.n	800296a <_free_r+0x22>
 80029b4:	d902      	bls.n	80029bc <_free_r+0x74>
 80029b6:	230c      	movs	r3, #12
 80029b8:	602b      	str	r3, [r5, #0]
 80029ba:	e7d6      	b.n	800296a <_free_r+0x22>
 80029bc:	6820      	ldr	r0, [r4, #0]
 80029be:	1821      	adds	r1, r4, r0
 80029c0:	428b      	cmp	r3, r1
 80029c2:	bf04      	itt	eq
 80029c4:	6819      	ldreq	r1, [r3, #0]
 80029c6:	685b      	ldreq	r3, [r3, #4]
 80029c8:	6063      	str	r3, [r4, #4]
 80029ca:	bf04      	itt	eq
 80029cc:	1809      	addeq	r1, r1, r0
 80029ce:	6021      	streq	r1, [r4, #0]
 80029d0:	6054      	str	r4, [r2, #4]
 80029d2:	e7ca      	b.n	800296a <_free_r+0x22>
 80029d4:	bd38      	pop	{r3, r4, r5, pc}
 80029d6:	bf00      	nop
 80029d8:	20000158 	.word	0x20000158

080029dc <_init>:
 80029dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029de:	bf00      	nop
 80029e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029e2:	bc08      	pop	{r3}
 80029e4:	469e      	mov	lr, r3
 80029e6:	4770      	bx	lr

080029e8 <_fini>:
 80029e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029ea:	bf00      	nop
 80029ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029ee:	bc08      	pop	{r3}
 80029f0:	469e      	mov	lr, r3
 80029f2:	4770      	bx	lr
