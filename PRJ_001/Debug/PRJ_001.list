
PRJ_001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002364  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  080024f8  080024f8  000034f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002588  08002588  0000405c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002588  08002588  00003588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002590  08002590  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002590  08002590  00003590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002594  08002594  00003594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08002598  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000228  2000005c  080025f4  0000405c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000284  080025f4  00004284  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e964  00000000  00000000  0000408c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022c6  00000000  00000000  000129f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005d0  00000000  00000000  00014cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000427  00000000  00000000  00015288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b2aa  00000000  00000000  000156af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a0ec  00000000  00000000  00030959  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096ef0  00000000  00000000  0003aa45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d1935  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d98  00000000  00000000  000d1978  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000d4710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000005c 	.word	0x2000005c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080024e0 	.word	0x080024e0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000060 	.word	0x20000060
 80001d0:	080024e0 	.word	0x080024e0

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_uldivmod>:
 80001e4:	b953      	cbnz	r3, 80001fc <__aeabi_uldivmod+0x18>
 80001e6:	b94a      	cbnz	r2, 80001fc <__aeabi_uldivmod+0x18>
 80001e8:	2900      	cmp	r1, #0
 80001ea:	bf08      	it	eq
 80001ec:	2800      	cmpeq	r0, #0
 80001ee:	bf1c      	itt	ne
 80001f0:	f04f 31ff 	movne.w	r1, #4294967295
 80001f4:	f04f 30ff 	movne.w	r0, #4294967295
 80001f8:	f000 b988 	b.w	800050c <__aeabi_idiv0>
 80001fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000200:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000204:	f000 f806 	bl	8000214 <__udivmoddi4>
 8000208:	f8dd e004 	ldr.w	lr, [sp, #4]
 800020c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000210:	b004      	add	sp, #16
 8000212:	4770      	bx	lr

08000214 <__udivmoddi4>:
 8000214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000218:	9d08      	ldr	r5, [sp, #32]
 800021a:	468e      	mov	lr, r1
 800021c:	4604      	mov	r4, r0
 800021e:	4688      	mov	r8, r1
 8000220:	2b00      	cmp	r3, #0
 8000222:	d14a      	bne.n	80002ba <__udivmoddi4+0xa6>
 8000224:	428a      	cmp	r2, r1
 8000226:	4617      	mov	r7, r2
 8000228:	d962      	bls.n	80002f0 <__udivmoddi4+0xdc>
 800022a:	fab2 f682 	clz	r6, r2
 800022e:	b14e      	cbz	r6, 8000244 <__udivmoddi4+0x30>
 8000230:	f1c6 0320 	rsb	r3, r6, #32
 8000234:	fa01 f806 	lsl.w	r8, r1, r6
 8000238:	fa20 f303 	lsr.w	r3, r0, r3
 800023c:	40b7      	lsls	r7, r6
 800023e:	ea43 0808 	orr.w	r8, r3, r8
 8000242:	40b4      	lsls	r4, r6
 8000244:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000248:	fa1f fc87 	uxth.w	ip, r7
 800024c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000250:	0c23      	lsrs	r3, r4, #16
 8000252:	fb0e 8811 	mls	r8, lr, r1, r8
 8000256:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800025a:	fb01 f20c 	mul.w	r2, r1, ip
 800025e:	429a      	cmp	r2, r3
 8000260:	d909      	bls.n	8000276 <__udivmoddi4+0x62>
 8000262:	18fb      	adds	r3, r7, r3
 8000264:	f101 30ff 	add.w	r0, r1, #4294967295
 8000268:	f080 80ea 	bcs.w	8000440 <__udivmoddi4+0x22c>
 800026c:	429a      	cmp	r2, r3
 800026e:	f240 80e7 	bls.w	8000440 <__udivmoddi4+0x22c>
 8000272:	3902      	subs	r1, #2
 8000274:	443b      	add	r3, r7
 8000276:	1a9a      	subs	r2, r3, r2
 8000278:	b2a3      	uxth	r3, r4
 800027a:	fbb2 f0fe 	udiv	r0, r2, lr
 800027e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000282:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000286:	fb00 fc0c 	mul.w	ip, r0, ip
 800028a:	459c      	cmp	ip, r3
 800028c:	d909      	bls.n	80002a2 <__udivmoddi4+0x8e>
 800028e:	18fb      	adds	r3, r7, r3
 8000290:	f100 32ff 	add.w	r2, r0, #4294967295
 8000294:	f080 80d6 	bcs.w	8000444 <__udivmoddi4+0x230>
 8000298:	459c      	cmp	ip, r3
 800029a:	f240 80d3 	bls.w	8000444 <__udivmoddi4+0x230>
 800029e:	443b      	add	r3, r7
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a6:	eba3 030c 	sub.w	r3, r3, ip
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa2>
 80002ae:	40f3      	lsrs	r3, r6
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xb6>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb0>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa2>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x14c>
 80002d2:	4573      	cmp	r3, lr
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xc8>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 8105 	bhi.w	80004e6 <__udivmoddi4+0x2d2>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb6e 0203 	sbc.w	r2, lr, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	4690      	mov	r8, r2
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e5      	beq.n	80002b6 <__udivmoddi4+0xa2>
 80002ea:	e9c5 4800 	strd	r4, r8, [r5]
 80002ee:	e7e2      	b.n	80002b6 <__udivmoddi4+0xa2>
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f000 8090 	beq.w	8000416 <__udivmoddi4+0x202>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f040 80a4 	bne.w	8000448 <__udivmoddi4+0x234>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	0c03      	lsrs	r3, r0, #16
 8000304:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000308:	b280      	uxth	r0, r0
 800030a:	b2bc      	uxth	r4, r7
 800030c:	2101      	movs	r1, #1
 800030e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000312:	fb0e 221c 	mls	r2, lr, ip, r2
 8000316:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800031a:	fb04 f20c 	mul.w	r2, r4, ip
 800031e:	429a      	cmp	r2, r3
 8000320:	d907      	bls.n	8000332 <__udivmoddi4+0x11e>
 8000322:	18fb      	adds	r3, r7, r3
 8000324:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000328:	d202      	bcs.n	8000330 <__udivmoddi4+0x11c>
 800032a:	429a      	cmp	r2, r3
 800032c:	f200 80e0 	bhi.w	80004f0 <__udivmoddi4+0x2dc>
 8000330:	46c4      	mov	ip, r8
 8000332:	1a9b      	subs	r3, r3, r2
 8000334:	fbb3 f2fe 	udiv	r2, r3, lr
 8000338:	fb0e 3312 	mls	r3, lr, r2, r3
 800033c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000340:	fb02 f404 	mul.w	r4, r2, r4
 8000344:	429c      	cmp	r4, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x144>
 8000348:	18fb      	adds	r3, r7, r3
 800034a:	f102 30ff 	add.w	r0, r2, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x142>
 8000350:	429c      	cmp	r4, r3
 8000352:	f200 80ca 	bhi.w	80004ea <__udivmoddi4+0x2d6>
 8000356:	4602      	mov	r2, r0
 8000358:	1b1b      	subs	r3, r3, r4
 800035a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x98>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa0e f401 	lsl.w	r4, lr, r1
 8000370:	fa20 f306 	lsr.w	r3, r0, r6
 8000374:	fa2e fe06 	lsr.w	lr, lr, r6
 8000378:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fa00 f801 	lsl.w	r8, r0, r1
 8000382:	fa1f fc87 	uxth.w	ip, r7
 8000386:	fbbe f0f9 	udiv	r0, lr, r9
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000390:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000394:	fb00 fe0c 	mul.w	lr, r0, ip
 8000398:	45a6      	cmp	lr, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1a0>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f100 3aff 	add.w	sl, r0, #4294967295
 80003a6:	f080 809c 	bcs.w	80004e2 <__udivmoddi4+0x2ce>
 80003aa:	45a6      	cmp	lr, r4
 80003ac:	f240 8099 	bls.w	80004e2 <__udivmoddi4+0x2ce>
 80003b0:	3802      	subs	r0, #2
 80003b2:	443c      	add	r4, r7
 80003b4:	eba4 040e 	sub.w	r4, r4, lr
 80003b8:	fa1f fe83 	uxth.w	lr, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003c8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003cc:	45a4      	cmp	ip, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1ce>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003d6:	f080 8082 	bcs.w	80004de <__udivmoddi4+0x2ca>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d97f      	bls.n	80004de <__udivmoddi4+0x2ca>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003e6:	eba4 040c 	sub.w	r4, r4, ip
 80003ea:	fba0 ec02 	umull	lr, ip, r0, r2
 80003ee:	4564      	cmp	r4, ip
 80003f0:	4673      	mov	r3, lr
 80003f2:	46e1      	mov	r9, ip
 80003f4:	d362      	bcc.n	80004bc <__udivmoddi4+0x2a8>
 80003f6:	d05f      	beq.n	80004b8 <__udivmoddi4+0x2a4>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x1fe>
 80003fa:	ebb8 0203 	subs.w	r2, r8, r3
 80003fe:	eb64 0409 	sbc.w	r4, r4, r9
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	fa22 f301 	lsr.w	r3, r2, r1
 800040a:	431e      	orrs	r6, r3
 800040c:	40cc      	lsrs	r4, r1
 800040e:	e9c5 6400 	strd	r6, r4, [r5]
 8000412:	2100      	movs	r1, #0
 8000414:	e74f      	b.n	80002b6 <__udivmoddi4+0xa2>
 8000416:	fbb1 fcf2 	udiv	ip, r1, r2
 800041a:	0c01      	lsrs	r1, r0, #16
 800041c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000420:	b280      	uxth	r0, r0
 8000422:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000426:	463b      	mov	r3, r7
 8000428:	4638      	mov	r0, r7
 800042a:	463c      	mov	r4, r7
 800042c:	46b8      	mov	r8, r7
 800042e:	46be      	mov	lr, r7
 8000430:	2620      	movs	r6, #32
 8000432:	fbb1 f1f7 	udiv	r1, r1, r7
 8000436:	eba2 0208 	sub.w	r2, r2, r8
 800043a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800043e:	e766      	b.n	800030e <__udivmoddi4+0xfa>
 8000440:	4601      	mov	r1, r0
 8000442:	e718      	b.n	8000276 <__udivmoddi4+0x62>
 8000444:	4610      	mov	r0, r2
 8000446:	e72c      	b.n	80002a2 <__udivmoddi4+0x8e>
 8000448:	f1c6 0220 	rsb	r2, r6, #32
 800044c:	fa2e f302 	lsr.w	r3, lr, r2
 8000450:	40b7      	lsls	r7, r6
 8000452:	40b1      	lsls	r1, r6
 8000454:	fa20 f202 	lsr.w	r2, r0, r2
 8000458:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800045c:	430a      	orrs	r2, r1
 800045e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000462:	b2bc      	uxth	r4, r7
 8000464:	fb0e 3318 	mls	r3, lr, r8, r3
 8000468:	0c11      	lsrs	r1, r2, #16
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb08 f904 	mul.w	r9, r8, r4
 8000472:	40b0      	lsls	r0, r6
 8000474:	4589      	cmp	r9, r1
 8000476:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800047a:	b280      	uxth	r0, r0
 800047c:	d93e      	bls.n	80004fc <__udivmoddi4+0x2e8>
 800047e:	1879      	adds	r1, r7, r1
 8000480:	f108 3cff 	add.w	ip, r8, #4294967295
 8000484:	d201      	bcs.n	800048a <__udivmoddi4+0x276>
 8000486:	4589      	cmp	r9, r1
 8000488:	d81f      	bhi.n	80004ca <__udivmoddi4+0x2b6>
 800048a:	eba1 0109 	sub.w	r1, r1, r9
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fb09 f804 	mul.w	r8, r9, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	b292      	uxth	r2, r2
 800049c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d229      	bcs.n	80004f8 <__udivmoddi4+0x2e4>
 80004a4:	18ba      	adds	r2, r7, r2
 80004a6:	f109 31ff 	add.w	r1, r9, #4294967295
 80004aa:	d2c4      	bcs.n	8000436 <__udivmoddi4+0x222>
 80004ac:	4542      	cmp	r2, r8
 80004ae:	d2c2      	bcs.n	8000436 <__udivmoddi4+0x222>
 80004b0:	f1a9 0102 	sub.w	r1, r9, #2
 80004b4:	443a      	add	r2, r7
 80004b6:	e7be      	b.n	8000436 <__udivmoddi4+0x222>
 80004b8:	45f0      	cmp	r8, lr
 80004ba:	d29d      	bcs.n	80003f8 <__udivmoddi4+0x1e4>
 80004bc:	ebbe 0302 	subs.w	r3, lr, r2
 80004c0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004c4:	3801      	subs	r0, #1
 80004c6:	46e1      	mov	r9, ip
 80004c8:	e796      	b.n	80003f8 <__udivmoddi4+0x1e4>
 80004ca:	eba7 0909 	sub.w	r9, r7, r9
 80004ce:	4449      	add	r1, r9
 80004d0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004d4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d8:	fb09 f804 	mul.w	r8, r9, r4
 80004dc:	e7db      	b.n	8000496 <__udivmoddi4+0x282>
 80004de:	4673      	mov	r3, lr
 80004e0:	e77f      	b.n	80003e2 <__udivmoddi4+0x1ce>
 80004e2:	4650      	mov	r0, sl
 80004e4:	e766      	b.n	80003b4 <__udivmoddi4+0x1a0>
 80004e6:	4608      	mov	r0, r1
 80004e8:	e6fd      	b.n	80002e6 <__udivmoddi4+0xd2>
 80004ea:	443b      	add	r3, r7
 80004ec:	3a02      	subs	r2, #2
 80004ee:	e733      	b.n	8000358 <__udivmoddi4+0x144>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	443b      	add	r3, r7
 80004f6:	e71c      	b.n	8000332 <__udivmoddi4+0x11e>
 80004f8:	4649      	mov	r1, r9
 80004fa:	e79c      	b.n	8000436 <__udivmoddi4+0x222>
 80004fc:	eba1 0109 	sub.w	r1, r1, r9
 8000500:	46c4      	mov	ip, r8
 8000502:	fbb1 f9fe 	udiv	r9, r1, lr
 8000506:	fb09 f804 	mul.w	r8, r9, r4
 800050a:	e7c4      	b.n	8000496 <__udivmoddi4+0x282>

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <Clk_En>:
Pin_74H595 Pin_74H595_0;
Pin_74H595 Pin_74H595_1;
Pin_74H595 Pin_74H595_2;
Pin_74H595 Pin_74H595_3;

void Clk_En(uint8_t DS_GPIO_PIN_NUM){
 8000510:	b580      	push	{r7, lr}
 8000512:	b08a      	sub	sp, #40	@ 0x28
 8000514:	af00      	add	r7, sp, #0
 8000516:	4603      	mov	r3, r0
 8000518:	71fb      	strb	r3, [r7, #7]
	Pin_74H595 *Pin_74H595_t;
	if (DS_GPIO_PIN_NUM == DS0){
 800051a:	79fb      	ldrb	r3, [r7, #7]
 800051c:	2b01      	cmp	r3, #1
 800051e:	d102      	bne.n	8000526 <Clk_En+0x16>
		Pin_74H595_t = &Pin_74H595_0;
 8000520:	4b34      	ldr	r3, [pc, #208]	@ (80005f4 <Clk_En+0xe4>)
 8000522:	627b      	str	r3, [r7, #36]	@ 0x24
 8000524:	e010      	b.n	8000548 <Clk_En+0x38>
	}
	else if (DS_GPIO_PIN_NUM == DS1){
 8000526:	79fb      	ldrb	r3, [r7, #7]
 8000528:	2b03      	cmp	r3, #3
 800052a:	d102      	bne.n	8000532 <Clk_En+0x22>
		Pin_74H595_t = &Pin_74H595_1;
 800052c:	4b32      	ldr	r3, [pc, #200]	@ (80005f8 <Clk_En+0xe8>)
 800052e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000530:	e00a      	b.n	8000548 <Clk_En+0x38>
	}
	else if (DS_GPIO_PIN_NUM == DS2){
 8000532:	79fb      	ldrb	r3, [r7, #7]
 8000534:	2b05      	cmp	r3, #5
 8000536:	d102      	bne.n	800053e <Clk_En+0x2e>
		Pin_74H595_t = &Pin_74H595_2;
 8000538:	4b30      	ldr	r3, [pc, #192]	@ (80005fc <Clk_En+0xec>)
 800053a:	627b      	str	r3, [r7, #36]	@ 0x24
 800053c:	e004      	b.n	8000548 <Clk_En+0x38>
	}
	else if (DS_GPIO_PIN_NUM == DS3){
 800053e:	79fb      	ldrb	r3, [r7, #7]
 8000540:	2b07      	cmp	r3, #7
 8000542:	d101      	bne.n	8000548 <Clk_En+0x38>
		Pin_74H595_t = &Pin_74H595_3;
 8000544:	4b2e      	ldr	r3, [pc, #184]	@ (8000600 <Clk_En+0xf0>)
 8000546:	627b      	str	r3, [r7, #36]	@ 0x24
	}
	GPIO_WriteToOutPutPin(Pin_74H595_t->SH_CP.pGPIOx, Pin_74H595_t->SH_CP.GPIO_Pin_Config.GPIO_PinNumber, High);
 8000548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800054a:	6858      	ldr	r0, [r3, #4]
 800054c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800054e:	891b      	ldrh	r3, [r3, #8]
 8000550:	b2db      	uxtb	r3, r3
 8000552:	2201      	movs	r2, #1
 8000554:	4619      	mov	r1, r3
 8000556:	f000 fc9b 	bl	8000e90 <GPIO_WriteToOutPutPin>
	delay_ms(1);
 800055a:	2300      	movs	r3, #0
 800055c:	623b      	str	r3, [r7, #32]
 800055e:	e018      	b.n	8000592 <Clk_En+0x82>
 8000560:	4b28      	ldr	r3, [pc, #160]	@ (8000604 <Clk_En+0xf4>)
 8000562:	685b      	ldr	r3, [r3, #4]
 8000564:	613b      	str	r3, [r7, #16]
 8000566:	f000 fe6f 	bl	8001248 <RCC_GetSystemClock>
 800056a:	4603      	mov	r3, r0
 800056c:	4a26      	ldr	r2, [pc, #152]	@ (8000608 <Clk_En+0xf8>)
 800056e:	fba2 2303 	umull	r2, r3, r2, r3
 8000572:	0c9b      	lsrs	r3, r3, #18
 8000574:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000578:	fb02 f303 	mul.w	r3, r2, r3
 800057c:	60fb      	str	r3, [r7, #12]
 800057e:	4b21      	ldr	r3, [pc, #132]	@ (8000604 <Clk_En+0xf4>)
 8000580:	685a      	ldr	r2, [r3, #4]
 8000582:	693b      	ldr	r3, [r7, #16]
 8000584:	1ad3      	subs	r3, r2, r3
 8000586:	68fa      	ldr	r2, [r7, #12]
 8000588:	429a      	cmp	r2, r3
 800058a:	d8f8      	bhi.n	800057e <Clk_En+0x6e>
 800058c:	6a3b      	ldr	r3, [r7, #32]
 800058e:	3301      	adds	r3, #1
 8000590:	623b      	str	r3, [r7, #32]
 8000592:	6a3b      	ldr	r3, [r7, #32]
 8000594:	2b00      	cmp	r3, #0
 8000596:	d0e3      	beq.n	8000560 <Clk_En+0x50>
	GPIO_WriteToOutPutPin(Pin_74H595_t->SH_CP.pGPIOx, Pin_74H595_t->SH_CP.GPIO_Pin_Config.GPIO_PinNumber, Low);
 8000598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800059a:	6858      	ldr	r0, [r3, #4]
 800059c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800059e:	891b      	ldrh	r3, [r3, #8]
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	2200      	movs	r2, #0
 80005a4:	4619      	mov	r1, r3
 80005a6:	f000 fc73 	bl	8000e90 <GPIO_WriteToOutPutPin>
	delay_ms(1);
 80005aa:	2300      	movs	r3, #0
 80005ac:	61fb      	str	r3, [r7, #28]
 80005ae:	e018      	b.n	80005e2 <Clk_En+0xd2>
 80005b0:	4b14      	ldr	r3, [pc, #80]	@ (8000604 <Clk_En+0xf4>)
 80005b2:	685b      	ldr	r3, [r3, #4]
 80005b4:	61bb      	str	r3, [r7, #24]
 80005b6:	f000 fe47 	bl	8001248 <RCC_GetSystemClock>
 80005ba:	4603      	mov	r3, r0
 80005bc:	4a12      	ldr	r2, [pc, #72]	@ (8000608 <Clk_En+0xf8>)
 80005be:	fba2 2303 	umull	r2, r3, r2, r3
 80005c2:	0c9b      	lsrs	r3, r3, #18
 80005c4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80005c8:	fb02 f303 	mul.w	r3, r2, r3
 80005cc:	617b      	str	r3, [r7, #20]
 80005ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000604 <Clk_En+0xf4>)
 80005d0:	685a      	ldr	r2, [r3, #4]
 80005d2:	69bb      	ldr	r3, [r7, #24]
 80005d4:	1ad3      	subs	r3, r2, r3
 80005d6:	697a      	ldr	r2, [r7, #20]
 80005d8:	429a      	cmp	r2, r3
 80005da:	d8f8      	bhi.n	80005ce <Clk_En+0xbe>
 80005dc:	69fb      	ldr	r3, [r7, #28]
 80005de:	3301      	adds	r3, #1
 80005e0:	61fb      	str	r3, [r7, #28]
 80005e2:	69fb      	ldr	r3, [r7, #28]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d0e3      	beq.n	80005b0 <Clk_En+0xa0>
}
 80005e8:	bf00      	nop
 80005ea:	bf00      	nop
 80005ec:	3728      	adds	r7, #40	@ 0x28
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	20000078 	.word	0x20000078
 80005f8:	200000a0 	.word	0x200000a0
 80005fc:	200000c8 	.word	0x200000c8
 8000600:	200000f0 	.word	0x200000f0
 8000604:	e0001000 	.word	0xe0001000
 8000608:	431bde83 	.word	0x431bde83

0800060c <Write_data>:

void Write_data(uint8_t data, uint8_t DS_GPIO_PIN_NUM, uint8_t MSBorLSB){
 800060c:	b580      	push	{r7, lr}
 800060e:	b086      	sub	sp, #24
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	71fb      	strb	r3, [r7, #7]
 8000616:	460b      	mov	r3, r1
 8000618:	71bb      	strb	r3, [r7, #6]
 800061a:	4613      	mov	r3, r2
 800061c:	717b      	strb	r3, [r7, #5]
	Pin_74H595 *Pin_74H595_t;
	if (DS_GPIO_PIN_NUM == DS0){
 800061e:	79bb      	ldrb	r3, [r7, #6]
 8000620:	2b01      	cmp	r3, #1
 8000622:	d102      	bne.n	800062a <Write_data+0x1e>
		Pin_74H595_t = &Pin_74H595_0;
 8000624:	4b3b      	ldr	r3, [pc, #236]	@ (8000714 <Write_data+0x108>)
 8000626:	617b      	str	r3, [r7, #20]
 8000628:	e010      	b.n	800064c <Write_data+0x40>
	}
	else if (DS_GPIO_PIN_NUM == DS1){
 800062a:	79bb      	ldrb	r3, [r7, #6]
 800062c:	2b03      	cmp	r3, #3
 800062e:	d102      	bne.n	8000636 <Write_data+0x2a>
		Pin_74H595_t = &Pin_74H595_1;
 8000630:	4b39      	ldr	r3, [pc, #228]	@ (8000718 <Write_data+0x10c>)
 8000632:	617b      	str	r3, [r7, #20]
 8000634:	e00a      	b.n	800064c <Write_data+0x40>
	}
	else if (DS_GPIO_PIN_NUM == DS2){
 8000636:	79bb      	ldrb	r3, [r7, #6]
 8000638:	2b05      	cmp	r3, #5
 800063a:	d102      	bne.n	8000642 <Write_data+0x36>
		Pin_74H595_t = &Pin_74H595_2;
 800063c:	4b37      	ldr	r3, [pc, #220]	@ (800071c <Write_data+0x110>)
 800063e:	617b      	str	r3, [r7, #20]
 8000640:	e004      	b.n	800064c <Write_data+0x40>
	}
	else if (DS_GPIO_PIN_NUM == DS3){
 8000642:	79bb      	ldrb	r3, [r7, #6]
 8000644:	2b07      	cmp	r3, #7
 8000646:	d101      	bne.n	800064c <Write_data+0x40>
		Pin_74H595_t = &Pin_74H595_3;
 8000648:	4b35      	ldr	r3, [pc, #212]	@ (8000720 <Write_data+0x114>)
 800064a:	617b      	str	r3, [r7, #20]
	}
	if (MSBorLSB == LSB){
 800064c:	797b      	ldrb	r3, [r7, #5]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d12c      	bne.n	80006ac <Write_data+0xa0>
		for(int i = 7; i >= 0; i--){
 8000652:	2307      	movs	r3, #7
 8000654:	613b      	str	r3, [r7, #16]
 8000656:	e021      	b.n	800069c <Write_data+0x90>
			if((data >> i) & 0x01){
 8000658:	79fa      	ldrb	r2, [r7, #7]
 800065a:	693b      	ldr	r3, [r7, #16]
 800065c:	fa42 f303 	asr.w	r3, r2, r3
 8000660:	f003 0301 	and.w	r3, r3, #1
 8000664:	2b00      	cmp	r3, #0
 8000666:	d009      	beq.n	800067c <Write_data+0x70>
				GPIO_WriteToOutPutPin(Pin_74H595_t->DS.pGPIOx, Pin_74H595_t->DS.GPIO_Pin_Config.GPIO_PinNumber, High);
 8000668:	697b      	ldr	r3, [r7, #20]
 800066a:	6918      	ldr	r0, [r3, #16]
 800066c:	697b      	ldr	r3, [r7, #20]
 800066e:	8a9b      	ldrh	r3, [r3, #20]
 8000670:	b2db      	uxtb	r3, r3
 8000672:	2201      	movs	r2, #1
 8000674:	4619      	mov	r1, r3
 8000676:	f000 fc0b 	bl	8000e90 <GPIO_WriteToOutPutPin>
 800067a:	e008      	b.n	800068e <Write_data+0x82>
			}else{
				GPIO_WriteToOutPutPin(Pin_74H595_t->DS.pGPIOx, Pin_74H595_t->DS.GPIO_Pin_Config.GPIO_PinNumber, Low);
 800067c:	697b      	ldr	r3, [r7, #20]
 800067e:	6918      	ldr	r0, [r3, #16]
 8000680:	697b      	ldr	r3, [r7, #20]
 8000682:	8a9b      	ldrh	r3, [r3, #20]
 8000684:	b2db      	uxtb	r3, r3
 8000686:	2200      	movs	r2, #0
 8000688:	4619      	mov	r1, r3
 800068a:	f000 fc01 	bl	8000e90 <GPIO_WriteToOutPutPin>
			}
			Clk_En(DS_GPIO_PIN_NUM);
 800068e:	79bb      	ldrb	r3, [r7, #6]
 8000690:	4618      	mov	r0, r3
 8000692:	f7ff ff3d 	bl	8000510 <Clk_En>
		for(int i = 7; i >= 0; i--){
 8000696:	693b      	ldr	r3, [r7, #16]
 8000698:	3b01      	subs	r3, #1
 800069a:	613b      	str	r3, [r7, #16]
 800069c:	693b      	ldr	r3, [r7, #16]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	dada      	bge.n	8000658 <Write_data+0x4c>
		}
		Latch_En(DS_GPIO_PIN_NUM);
 80006a2:	79bb      	ldrb	r3, [r7, #6]
 80006a4:	4618      	mov	r0, r3
 80006a6:	f000 f83d 	bl	8000724 <Latch_En>
			}
			Clk_En(DS_GPIO_PIN_NUM);
		}
		Latch_En(DS_GPIO_PIN_NUM);
	}
}
 80006aa:	e02e      	b.n	800070a <Write_data+0xfe>
	else if (MSBorLSB == MSB){
 80006ac:	797b      	ldrb	r3, [r7, #5]
 80006ae:	2b01      	cmp	r3, #1
 80006b0:	d12b      	bne.n	800070a <Write_data+0xfe>
		for(int i = 0; i < 8; i++){
 80006b2:	2300      	movs	r3, #0
 80006b4:	60fb      	str	r3, [r7, #12]
 80006b6:	e021      	b.n	80006fc <Write_data+0xf0>
			if((data >> i) & 0x01){
 80006b8:	79fa      	ldrb	r2, [r7, #7]
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	fa42 f303 	asr.w	r3, r2, r3
 80006c0:	f003 0301 	and.w	r3, r3, #1
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d009      	beq.n	80006dc <Write_data+0xd0>
				GPIO_WriteToOutPutPin(Pin_74H595_t->DS.pGPIOx, Pin_74H595_t->DS.GPIO_Pin_Config.GPIO_PinNumber, High);
 80006c8:	697b      	ldr	r3, [r7, #20]
 80006ca:	6918      	ldr	r0, [r3, #16]
 80006cc:	697b      	ldr	r3, [r7, #20]
 80006ce:	8a9b      	ldrh	r3, [r3, #20]
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	2201      	movs	r2, #1
 80006d4:	4619      	mov	r1, r3
 80006d6:	f000 fbdb 	bl	8000e90 <GPIO_WriteToOutPutPin>
 80006da:	e008      	b.n	80006ee <Write_data+0xe2>
				GPIO_WriteToOutPutPin(Pin_74H595_t->DS.pGPIOx, Pin_74H595_t->DS.GPIO_Pin_Config.GPIO_PinNumber, Low);
 80006dc:	697b      	ldr	r3, [r7, #20]
 80006de:	6918      	ldr	r0, [r3, #16]
 80006e0:	697b      	ldr	r3, [r7, #20]
 80006e2:	8a9b      	ldrh	r3, [r3, #20]
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	2200      	movs	r2, #0
 80006e8:	4619      	mov	r1, r3
 80006ea:	f000 fbd1 	bl	8000e90 <GPIO_WriteToOutPutPin>
			Clk_En(DS_GPIO_PIN_NUM);
 80006ee:	79bb      	ldrb	r3, [r7, #6]
 80006f0:	4618      	mov	r0, r3
 80006f2:	f7ff ff0d 	bl	8000510 <Clk_En>
		for(int i = 0; i < 8; i++){
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	3301      	adds	r3, #1
 80006fa:	60fb      	str	r3, [r7, #12]
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	2b07      	cmp	r3, #7
 8000700:	ddda      	ble.n	80006b8 <Write_data+0xac>
		Latch_En(DS_GPIO_PIN_NUM);
 8000702:	79bb      	ldrb	r3, [r7, #6]
 8000704:	4618      	mov	r0, r3
 8000706:	f000 f80d 	bl	8000724 <Latch_En>
}
 800070a:	bf00      	nop
 800070c:	3718      	adds	r7, #24
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	20000078 	.word	0x20000078
 8000718:	200000a0 	.word	0x200000a0
 800071c:	200000c8 	.word	0x200000c8
 8000720:	200000f0 	.word	0x200000f0

08000724 <Latch_En>:

void Latch_En(uint8_t DS_GPIO_PIN_NUM){
 8000724:	b580      	push	{r7, lr}
 8000726:	b08a      	sub	sp, #40	@ 0x28
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	71fb      	strb	r3, [r7, #7]
	Pin_74H595 *Pin_74H595_t;
	if (DS_GPIO_PIN_NUM == DS0){
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	2b01      	cmp	r3, #1
 8000732:	d102      	bne.n	800073a <Latch_En+0x16>
		Pin_74H595_t = &Pin_74H595_0;
 8000734:	4b34      	ldr	r3, [pc, #208]	@ (8000808 <Latch_En+0xe4>)
 8000736:	627b      	str	r3, [r7, #36]	@ 0x24
 8000738:	e010      	b.n	800075c <Latch_En+0x38>
	}
	else if (DS_GPIO_PIN_NUM == DS1){
 800073a:	79fb      	ldrb	r3, [r7, #7]
 800073c:	2b03      	cmp	r3, #3
 800073e:	d102      	bne.n	8000746 <Latch_En+0x22>
		Pin_74H595_t = &Pin_74H595_1;
 8000740:	4b32      	ldr	r3, [pc, #200]	@ (800080c <Latch_En+0xe8>)
 8000742:	627b      	str	r3, [r7, #36]	@ 0x24
 8000744:	e00a      	b.n	800075c <Latch_En+0x38>
	}
	else if (DS_GPIO_PIN_NUM == DS2){
 8000746:	79fb      	ldrb	r3, [r7, #7]
 8000748:	2b05      	cmp	r3, #5
 800074a:	d102      	bne.n	8000752 <Latch_En+0x2e>
		Pin_74H595_t = &Pin_74H595_2;
 800074c:	4b30      	ldr	r3, [pc, #192]	@ (8000810 <Latch_En+0xec>)
 800074e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000750:	e004      	b.n	800075c <Latch_En+0x38>
	}
	else if (DS_GPIO_PIN_NUM == DS3){
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	2b07      	cmp	r3, #7
 8000756:	d101      	bne.n	800075c <Latch_En+0x38>
		Pin_74H595_t = &Pin_74H595_3;
 8000758:	4b2e      	ldr	r3, [pc, #184]	@ (8000814 <Latch_En+0xf0>)
 800075a:	627b      	str	r3, [r7, #36]	@ 0x24
	}
	GPIO_WriteToOutPutPin(Pin_74H595_t->ST_CP.pGPIOx, Pin_74H595_t->ST_CP.GPIO_Pin_Config.GPIO_PinNumber, High);
 800075c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800075e:	69d8      	ldr	r0, [r3, #28]
 8000760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000762:	8c1b      	ldrh	r3, [r3, #32]
 8000764:	b2db      	uxtb	r3, r3
 8000766:	2201      	movs	r2, #1
 8000768:	4619      	mov	r1, r3
 800076a:	f000 fb91 	bl	8000e90 <GPIO_WriteToOutPutPin>
	delay_ms(5);
 800076e:	2300      	movs	r3, #0
 8000770:	623b      	str	r3, [r7, #32]
 8000772:	e018      	b.n	80007a6 <Latch_En+0x82>
 8000774:	4b28      	ldr	r3, [pc, #160]	@ (8000818 <Latch_En+0xf4>)
 8000776:	685b      	ldr	r3, [r3, #4]
 8000778:	613b      	str	r3, [r7, #16]
 800077a:	f000 fd65 	bl	8001248 <RCC_GetSystemClock>
 800077e:	4603      	mov	r3, r0
 8000780:	4a26      	ldr	r2, [pc, #152]	@ (800081c <Latch_En+0xf8>)
 8000782:	fba2 2303 	umull	r2, r3, r2, r3
 8000786:	0c9b      	lsrs	r3, r3, #18
 8000788:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800078c:	fb02 f303 	mul.w	r3, r2, r3
 8000790:	60fb      	str	r3, [r7, #12]
 8000792:	4b21      	ldr	r3, [pc, #132]	@ (8000818 <Latch_En+0xf4>)
 8000794:	685a      	ldr	r2, [r3, #4]
 8000796:	693b      	ldr	r3, [r7, #16]
 8000798:	1ad3      	subs	r3, r2, r3
 800079a:	68fa      	ldr	r2, [r7, #12]
 800079c:	429a      	cmp	r2, r3
 800079e:	d8f8      	bhi.n	8000792 <Latch_En+0x6e>
 80007a0:	6a3b      	ldr	r3, [r7, #32]
 80007a2:	3301      	adds	r3, #1
 80007a4:	623b      	str	r3, [r7, #32]
 80007a6:	6a3b      	ldr	r3, [r7, #32]
 80007a8:	2b04      	cmp	r3, #4
 80007aa:	d9e3      	bls.n	8000774 <Latch_En+0x50>
	GPIO_WriteToOutPutPin(Pin_74H595_t->ST_CP.pGPIOx, Pin_74H595_t->ST_CP.GPIO_Pin_Config.GPIO_PinNumber, Low);
 80007ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007ae:	69d8      	ldr	r0, [r3, #28]
 80007b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007b2:	8c1b      	ldrh	r3, [r3, #32]
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	2200      	movs	r2, #0
 80007b8:	4619      	mov	r1, r3
 80007ba:	f000 fb69 	bl	8000e90 <GPIO_WriteToOutPutPin>
	delay_ms(5);
 80007be:	2300      	movs	r3, #0
 80007c0:	61fb      	str	r3, [r7, #28]
 80007c2:	e018      	b.n	80007f6 <Latch_En+0xd2>
 80007c4:	4b14      	ldr	r3, [pc, #80]	@ (8000818 <Latch_En+0xf4>)
 80007c6:	685b      	ldr	r3, [r3, #4]
 80007c8:	61bb      	str	r3, [r7, #24]
 80007ca:	f000 fd3d 	bl	8001248 <RCC_GetSystemClock>
 80007ce:	4603      	mov	r3, r0
 80007d0:	4a12      	ldr	r2, [pc, #72]	@ (800081c <Latch_En+0xf8>)
 80007d2:	fba2 2303 	umull	r2, r3, r2, r3
 80007d6:	0c9b      	lsrs	r3, r3, #18
 80007d8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80007dc:	fb02 f303 	mul.w	r3, r2, r3
 80007e0:	617b      	str	r3, [r7, #20]
 80007e2:	4b0d      	ldr	r3, [pc, #52]	@ (8000818 <Latch_En+0xf4>)
 80007e4:	685a      	ldr	r2, [r3, #4]
 80007e6:	69bb      	ldr	r3, [r7, #24]
 80007e8:	1ad3      	subs	r3, r2, r3
 80007ea:	697a      	ldr	r2, [r7, #20]
 80007ec:	429a      	cmp	r2, r3
 80007ee:	d8f8      	bhi.n	80007e2 <Latch_En+0xbe>
 80007f0:	69fb      	ldr	r3, [r7, #28]
 80007f2:	3301      	adds	r3, #1
 80007f4:	61fb      	str	r3, [r7, #28]
 80007f6:	69fb      	ldr	r3, [r7, #28]
 80007f8:	2b04      	cmp	r3, #4
 80007fa:	d9e3      	bls.n	80007c4 <Latch_En+0xa0>
}
 80007fc:	bf00      	nop
 80007fe:	bf00      	nop
 8000800:	3728      	adds	r7, #40	@ 0x28
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	20000078 	.word	0x20000078
 800080c:	200000a0 	.word	0x200000a0
 8000810:	200000c8 	.word	0x200000c8
 8000814:	200000f0 	.word	0x200000f0
 8000818:	e0001000 	.word	0xe0001000
 800081c:	431bde83 	.word	0x431bde83

08000820 <Set_74HC595>:

Pin_74H595 Set_74HC595(Pin_74H595 *Pin_74H595_t, uint8_t DS_GPIO_PIN_NUM, uint8_t ST_CP_GPIO_PIN_NUM){
 8000820:	b5b0      	push	{r4, r5, r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
 8000826:	60f8      	str	r0, [r7, #12]
 8000828:	60b9      	str	r1, [r7, #8]
 800082a:	4611      	mov	r1, r2
 800082c:	461a      	mov	r2, r3
 800082e:	460b      	mov	r3, r1
 8000830:	71fb      	strb	r3, [r7, #7]
 8000832:	4613      	mov	r3, r2
 8000834:	71bb      	strb	r3, [r7, #6]
	GPIOE_PCLK_EN;
 8000836:	4b30      	ldr	r3, [pc, #192]	@ (80008f8 <Set_74HC595+0xd8>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	4a2f      	ldr	r2, [pc, #188]	@ (80008f8 <Set_74HC595+0xd8>)
 800083c:	f043 0310 	orr.w	r3, r3, #16
 8000840:	6313      	str	r3, [r2, #48]	@ 0x30
	Pin_74H595_t->SH_CP.pGPIOx = GPIOE;
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	4a2d      	ldr	r2, [pc, #180]	@ (80008fc <Set_74HC595+0xdc>)
 8000846:	605a      	str	r2, [r3, #4]
	Pin_74H595_t->SH_CP.GPIO_Pin_Config.GPIO_PinNumber = GPIO_PIN_NUM_0;
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	2200      	movs	r2, #0
 800084c:	811a      	strh	r2, [r3, #8]
	Pin_74H595_t->SH_CP.GPIO_Pin_Config.GPIO_PinMode = GPIO_MODER_OUTPUT;
 800084e:	68bb      	ldr	r3, [r7, #8]
 8000850:	2201      	movs	r2, #1
 8000852:	729a      	strb	r2, [r3, #10]
	Pin_74H595_t->SH_CP.GPIO_Pin_Config.GPIO_PinOPType = GPIO_OTYPER_PP;
 8000854:	68bb      	ldr	r3, [r7, #8]
 8000856:	2200      	movs	r2, #0
 8000858:	735a      	strb	r2, [r3, #13]
	Pin_74H595_t->SH_CP.GPIO_Pin_Config.GPIO_PinSpeed = GPIO_OSPEEDR_HIGH;
 800085a:	68bb      	ldr	r3, [r7, #8]
 800085c:	2202      	movs	r2, #2
 800085e:	72da      	strb	r2, [r3, #11]
	Pin_74H595_t->SH_CP.GPIO_Pin_Config.GPIO_PinPuPdControl = GPIO_PUPDR_PU;
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	2201      	movs	r2, #1
 8000864:	731a      	strb	r2, [r3, #12]
	GPIO_Init_Pin(&(Pin_74H595_t->SH_CP));
 8000866:	68bb      	ldr	r3, [r7, #8]
 8000868:	3304      	adds	r3, #4
 800086a:	4618      	mov	r0, r3
 800086c:	f000 fa20 	bl	8000cb0 <GPIO_Init_Pin>

	Pin_74H595_t->DS.pGPIOx = GPIOE;
 8000870:	68bb      	ldr	r3, [r7, #8]
 8000872:	4a22      	ldr	r2, [pc, #136]	@ (80008fc <Set_74HC595+0xdc>)
 8000874:	611a      	str	r2, [r3, #16]
	Pin_74H595_t->DS.GPIO_Pin_Config.GPIO_PinNumber = DS_GPIO_PIN_NUM;
 8000876:	79fb      	ldrb	r3, [r7, #7]
 8000878:	b29a      	uxth	r2, r3
 800087a:	68bb      	ldr	r3, [r7, #8]
 800087c:	829a      	strh	r2, [r3, #20]
	Pin_74H595_t->DS.GPIO_Pin_Config.GPIO_PinMode = GPIO_MODER_OUTPUT;
 800087e:	68bb      	ldr	r3, [r7, #8]
 8000880:	2201      	movs	r2, #1
 8000882:	759a      	strb	r2, [r3, #22]
	Pin_74H595_t->DS.GPIO_Pin_Config.GPIO_PinOPType = GPIO_OTYPER_PP;
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	2200      	movs	r2, #0
 8000888:	765a      	strb	r2, [r3, #25]
	Pin_74H595_t->DS.GPIO_Pin_Config.GPIO_PinSpeed = GPIO_OSPEEDR_HIGH;
 800088a:	68bb      	ldr	r3, [r7, #8]
 800088c:	2202      	movs	r2, #2
 800088e:	75da      	strb	r2, [r3, #23]
	Pin_74H595_t->DS.GPIO_Pin_Config.GPIO_PinPuPdControl = GPIO_PUPDR_PU;
 8000890:	68bb      	ldr	r3, [r7, #8]
 8000892:	2201      	movs	r2, #1
 8000894:	761a      	strb	r2, [r3, #24]
	GPIO_Init_Pin(&(Pin_74H595_t->DS));
 8000896:	68bb      	ldr	r3, [r7, #8]
 8000898:	3310      	adds	r3, #16
 800089a:	4618      	mov	r0, r3
 800089c:	f000 fa08 	bl	8000cb0 <GPIO_Init_Pin>

	Pin_74H595_t->ST_CP.pGPIOx = GPIOE;
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	4a16      	ldr	r2, [pc, #88]	@ (80008fc <Set_74HC595+0xdc>)
 80008a4:	61da      	str	r2, [r3, #28]
	Pin_74H595_t->ST_CP.GPIO_Pin_Config.GPIO_PinNumber = ST_CP_GPIO_PIN_NUM;
 80008a6:	79bb      	ldrb	r3, [r7, #6]
 80008a8:	b29a      	uxth	r2, r3
 80008aa:	68bb      	ldr	r3, [r7, #8]
 80008ac:	841a      	strh	r2, [r3, #32]
	Pin_74H595_t->ST_CP.GPIO_Pin_Config.GPIO_PinMode = GPIO_MODER_OUTPUT;
 80008ae:	68bb      	ldr	r3, [r7, #8]
 80008b0:	2201      	movs	r2, #1
 80008b2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	Pin_74H595_t->ST_CP.GPIO_Pin_Config.GPIO_PinOPType = GPIO_OTYPER_PP;
 80008b6:	68bb      	ldr	r3, [r7, #8]
 80008b8:	2200      	movs	r2, #0
 80008ba:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	Pin_74H595_t->ST_CP.GPIO_Pin_Config.GPIO_PinSpeed = GPIO_OSPEEDR_HIGH;
 80008be:	68bb      	ldr	r3, [r7, #8]
 80008c0:	2202      	movs	r2, #2
 80008c2:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	Pin_74H595_t->ST_CP.GPIO_Pin_Config.GPIO_PinPuPdControl = GPIO_PUPDR_PU;
 80008c6:	68bb      	ldr	r3, [r7, #8]
 80008c8:	2201      	movs	r2, #1
 80008ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	GPIO_Init_Pin(&(Pin_74H595_t->ST_CP));
 80008ce:	68bb      	ldr	r3, [r7, #8]
 80008d0:	331c      	adds	r3, #28
 80008d2:	4618      	mov	r0, r3
 80008d4:	f000 f9ec 	bl	8000cb0 <GPIO_Init_Pin>

	return *Pin_74H595_t;
 80008d8:	68fa      	ldr	r2, [r7, #12]
 80008da:	68bb      	ldr	r3, [r7, #8]
 80008dc:	4614      	mov	r4, r2
 80008de:	461d      	mov	r5, r3
 80008e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008e8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80008ec:	e884 0003 	stmia.w	r4, {r0, r1}
}
 80008f0:	68f8      	ldr	r0, [r7, #12]
 80008f2:	3710      	adds	r7, #16
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bdb0      	pop	{r4, r5, r7, pc}
 80008f8:	40023800 	.word	0x40023800
 80008fc:	40021000 	.word	0x40021000

08000900 <init_74HC595>:

void init_74HC595(uint8_t DS_GPIO_PIN_NUM){
 8000900:	b5b0      	push	{r4, r5, r7, lr}
 8000902:	b08c      	sub	sp, #48	@ 0x30
 8000904:	af00      	add	r7, sp, #0
 8000906:	4603      	mov	r3, r0
 8000908:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (DS_GPIO_PIN_NUM == DS0){
 800090c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000910:	2b01      	cmp	r3, #1
 8000912:	d112      	bne.n	800093a <init_74HC595+0x3a>
		Pin_74H595_0 = Set_74HC595(&Pin_74H595_0, DS_GPIO_PIN_NUM, ST_CP0);
 8000914:	4c2d      	ldr	r4, [pc, #180]	@ (80009cc <init_74HC595+0xcc>)
 8000916:	4638      	mov	r0, r7
 8000918:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800091c:	2302      	movs	r3, #2
 800091e:	492b      	ldr	r1, [pc, #172]	@ (80009cc <init_74HC595+0xcc>)
 8000920:	f7ff ff7e 	bl	8000820 <Set_74HC595>
 8000924:	4625      	mov	r5, r4
 8000926:	463c      	mov	r4, r7
 8000928:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800092a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800092c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800092e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000930:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000934:	e885 0003 	stmia.w	r5, {r0, r1}
		Pin_74H595_2 = Set_74HC595(&Pin_74H595_2, DS_GPIO_PIN_NUM, ST_CP2);
	}
	else if (DS_GPIO_PIN_NUM == DS3){
		Pin_74H595_2 = Set_74HC595(&Pin_74H595_3, DS_GPIO_PIN_NUM, ST_CP3);
	}
}
 8000938:	e043      	b.n	80009c2 <init_74HC595+0xc2>
	else if (DS_GPIO_PIN_NUM == DS1){
 800093a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800093e:	2b03      	cmp	r3, #3
 8000940:	d112      	bne.n	8000968 <init_74HC595+0x68>
		Pin_74H595_1 = Set_74HC595(&Pin_74H595_1, DS_GPIO_PIN_NUM, ST_CP1);
 8000942:	4c23      	ldr	r4, [pc, #140]	@ (80009d0 <init_74HC595+0xd0>)
 8000944:	4638      	mov	r0, r7
 8000946:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800094a:	2304      	movs	r3, #4
 800094c:	4920      	ldr	r1, [pc, #128]	@ (80009d0 <init_74HC595+0xd0>)
 800094e:	f7ff ff67 	bl	8000820 <Set_74HC595>
 8000952:	4625      	mov	r5, r4
 8000954:	463c      	mov	r4, r7
 8000956:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000958:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800095a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800095c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800095e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000962:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000966:	e02c      	b.n	80009c2 <init_74HC595+0xc2>
	else if (DS_GPIO_PIN_NUM == DS2){
 8000968:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800096c:	2b05      	cmp	r3, #5
 800096e:	d112      	bne.n	8000996 <init_74HC595+0x96>
		Pin_74H595_2 = Set_74HC595(&Pin_74H595_2, DS_GPIO_PIN_NUM, ST_CP2);
 8000970:	4c18      	ldr	r4, [pc, #96]	@ (80009d4 <init_74HC595+0xd4>)
 8000972:	4638      	mov	r0, r7
 8000974:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000978:	2306      	movs	r3, #6
 800097a:	4916      	ldr	r1, [pc, #88]	@ (80009d4 <init_74HC595+0xd4>)
 800097c:	f7ff ff50 	bl	8000820 <Set_74HC595>
 8000980:	4625      	mov	r5, r4
 8000982:	463c      	mov	r4, r7
 8000984:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000986:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000988:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800098a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800098c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000990:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000994:	e015      	b.n	80009c2 <init_74HC595+0xc2>
	else if (DS_GPIO_PIN_NUM == DS3){
 8000996:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800099a:	2b07      	cmp	r3, #7
 800099c:	d111      	bne.n	80009c2 <init_74HC595+0xc2>
		Pin_74H595_2 = Set_74HC595(&Pin_74H595_3, DS_GPIO_PIN_NUM, ST_CP3);
 800099e:	4c0d      	ldr	r4, [pc, #52]	@ (80009d4 <init_74HC595+0xd4>)
 80009a0:	4638      	mov	r0, r7
 80009a2:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80009a6:	2308      	movs	r3, #8
 80009a8:	490b      	ldr	r1, [pc, #44]	@ (80009d8 <init_74HC595+0xd8>)
 80009aa:	f7ff ff39 	bl	8000820 <Set_74HC595>
 80009ae:	4625      	mov	r5, r4
 80009b0:	463c      	mov	r4, r7
 80009b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009ba:	e894 0003 	ldmia.w	r4, {r0, r1}
 80009be:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80009c2:	bf00      	nop
 80009c4:	3730      	adds	r7, #48	@ 0x30
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bdb0      	pop	{r4, r5, r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000078 	.word	0x20000078
 80009d0:	200000a0 	.word	0x200000a0
 80009d4:	200000c8 	.word	0x200000c8
 80009d8:	200000f0 	.word	0x200000f0

080009dc <_ZN6DeviceC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

#include "Device.h"



Device::Device(std::string name){
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
 80009e4:	6039      	str	r1, [r7, #0]
	if (name.compare("Living Room") == 0){
 80009e6:	4929      	ldr	r1, [pc, #164]	@ (8000a8c <_ZN6DeviceC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xb0>)
 80009e8:	6838      	ldr	r0, [r7, #0]
 80009ea:	f001 fb30 	bl	800204e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	bf0c      	ite	eq
 80009f4:	2301      	moveq	r3, #1
 80009f6:	2300      	movne	r3, #0
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d009      	beq.n	8000a12 <_ZN6DeviceC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x36>
		id = em_LV_R;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	2202      	movs	r2, #2
 8000a02:	701a      	strb	r2, [r3, #0]
		id_74HC[0] = DS0;	// For led
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	2201      	movs	r2, #1
 8000a08:	705a      	strb	r2, [r3, #1]
		id_74HC[1] = DS3;	// For LCD
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	2207      	movs	r2, #7
 8000a0e:	709a      	strb	r2, [r3, #2]
 8000a10:	e024      	b.n	8000a5c <_ZN6DeviceC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x80>
	}
	else if (name.compare("Kitchen Room") == 0){
 8000a12:	491f      	ldr	r1, [pc, #124]	@ (8000a90 <_ZN6DeviceC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xb4>)
 8000a14:	6838      	ldr	r0, [r7, #0]
 8000a16:	f001 fb1a 	bl	800204e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	bf0c      	ite	eq
 8000a20:	2301      	moveq	r3, #1
 8000a22:	2300      	movne	r3, #0
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d006      	beq.n	8000a38 <_ZN6DeviceC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x5c>
		id = em_KC_R;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2203      	movs	r2, #3
 8000a2e:	701a      	strb	r2, [r3, #0]
		id_74HC[0] = DS1;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	2203      	movs	r2, #3
 8000a34:	705a      	strb	r2, [r3, #1]
 8000a36:	e011      	b.n	8000a5c <_ZN6DeviceC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x80>
	}

	else if (name.compare("Bed Room") == 0){
 8000a38:	4916      	ldr	r1, [pc, #88]	@ (8000a94 <_ZN6DeviceC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xb8>)
 8000a3a:	6838      	ldr	r0, [r7, #0]
 8000a3c:	f001 fb07 	bl	800204e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	bf0c      	ite	eq
 8000a46:	2301      	moveq	r3, #1
 8000a48:	2300      	movne	r3, #0
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d005      	beq.n	8000a5c <_ZN6DeviceC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x80>
		id = em_B_R;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2204      	movs	r2, #4
 8000a54:	701a      	strb	r2, [r3, #0]
		id_74HC[0] = DS2;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2205      	movs	r2, #5
 8000a5a:	705a      	strb	r2, [r3, #1]
	}

	// For shift IC
	for (uint8_t i = 0; i < sizeof(id_74HC); i++){
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	73fb      	strb	r3, [r7, #15]
 8000a60:	e009      	b.n	8000a76 <_ZN6DeviceC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x9a>
		init_74HC595(id_74HC[i]);
 8000a62:	7bfb      	ldrb	r3, [r7, #15]
 8000a64:	687a      	ldr	r2, [r7, #4]
 8000a66:	4413      	add	r3, r2
 8000a68:	785b      	ldrb	r3, [r3, #1]
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f7ff ff48 	bl	8000900 <init_74HC595>
	for (uint8_t i = 0; i < sizeof(id_74HC); i++){
 8000a70:	7bfb      	ldrb	r3, [r7, #15]
 8000a72:	3301      	adds	r3, #1
 8000a74:	73fb      	strb	r3, [r7, #15]
 8000a76:	7bfb      	ldrb	r3, [r7, #15]
 8000a78:	2b04      	cmp	r3, #4
 8000a7a:	d9f2      	bls.n	8000a62 <_ZN6DeviceC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x86>
//		lcd_init();
//		i2c_lcd_init();
	}
//	start_dht();
//	Read_DHT();
	Config_Pin();
 8000a7c:	f000 fa2e 	bl	8000edc <Config_Pin>

}
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	4618      	mov	r0, r3
 8000a84:	3710      	adds	r7, #16
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	080024f8 	.word	0x080024f8
 8000a90:	08002504 	.word	0x08002504
 8000a94:	08002514 	.word	0x08002514

08000a98 <_ZN6Device9TurnOnLedEh>:
	GPIOC_PCLK_DIS;
	GPIOD_PCLK_DIS;
	GPIOE_PCLK_DIS;
}

void Device::TurnOnLed(uint8_t data){
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
 8000aa0:	460b      	mov	r3, r1
 8000aa2:	70fb      	strb	r3, [r7, #3]
	Write_data(data, id_74HC[0], MSB);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	7859      	ldrb	r1, [r3, #1]
 8000aa8:	78fb      	ldrb	r3, [r7, #3]
 8000aaa:	2201      	movs	r2, #1
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff fdad 	bl	800060c <Write_data>
}
 8000ab2:	bf00      	nop
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <GPIO_Init>:
        else if(pGPIOx == GPIOD) GPIOD_PCLK_DIS;
    }
}

//Init and Denit
void GPIO_Init(GPIO_Handle_t *pGPIOHandel){
 8000aba:	b480      	push	{r7}
 8000abc:	b085      	sub	sp, #20
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	6078      	str	r0, [r7, #4]
	for (int Pin_Number = 0; Pin_Number < GPIO_PIN_15; Pin_Number++){
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60fb      	str	r3, [r7, #12]
 8000ac6:	e0e7      	b.n	8000c98 <GPIO_Init+0x1de>
		if ((pGPIOHandel->GPIO_Pin_Config.GPIO_PinNumber >> Pin_Number) & 0x1){
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	889b      	ldrh	r3, [r3, #4]
 8000acc:	461a      	mov	r2, r3
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	fa42 f303 	asr.w	r3, r2, r3
 8000ad4:	f003 0301 	and.w	r3, r3, #1
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	f000 80da 	beq.w	8000c92 <GPIO_Init+0x1d8>
//			 1.Configgure mode GPIO pin
			uint32_t temp = 0;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60bb      	str	r3, [r7, #8]
			if(pGPIOHandel->GPIO_Pin_Config.GPIO_PinMode <= GPIO_MODER_ANALOG){
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	799b      	ldrb	r3, [r3, #6]
 8000ae6:	2b03      	cmp	r3, #3
 8000ae8:	d81d      	bhi.n	8000b26 <GPIO_Init+0x6c>
				temp = pGPIOHandel->GPIO_Pin_Config.GPIO_PinMode << (2* Pin_Number);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	799b      	ldrb	r3, [r3, #6]
 8000aee:	461a      	mov	r2, r3
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	005b      	lsls	r3, r3, #1
 8000af4:	fa02 f303 	lsl.w	r3, r2, r3
 8000af8:	60bb      	str	r3, [r7, #8]
				pGPIOHandel->pGPIOx->MODER &= ~(3 << (2* Pin_Number));
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	005b      	lsls	r3, r3, #1
 8000b04:	2103      	movs	r1, #3
 8000b06:	fa01 f303 	lsl.w	r3, r1, r3
 8000b0a:	43db      	mvns	r3, r3
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	400a      	ands	r2, r1
 8000b14:	601a      	str	r2, [r3, #0]
				pGPIOHandel->pGPIOx->MODER |= temp;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	6819      	ldr	r1, [r3, #0]
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	68ba      	ldr	r2, [r7, #8]
 8000b22:	430a      	orrs	r2, r1
 8000b24:	601a      	str	r2, [r3, #0]
			}
			else{
				// Interrupt
			}
			temp = 0;
 8000b26:	2300      	movs	r3, #0
 8000b28:	60bb      	str	r3, [r7, #8]
			// 2.Configure speed
			if(pGPIOHandel->GPIO_Pin_Config.GPIO_PinSpeed <= GPIO_OSPEEDR_VERYHIGH){
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	79db      	ldrb	r3, [r3, #7]
 8000b2e:	2b03      	cmp	r3, #3
 8000b30:	d81d      	bhi.n	8000b6e <GPIO_Init+0xb4>
				temp = pGPIOHandel->GPIO_Pin_Config.GPIO_PinSpeed << (2* Pin_Number);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	79db      	ldrb	r3, [r3, #7]
 8000b36:	461a      	mov	r2, r3
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	005b      	lsls	r3, r3, #1
 8000b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b40:	60bb      	str	r3, [r7, #8]
				pGPIOHandel->pGPIOx->OSPEEDR &= ~(3 << (2* Pin_Number));
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	689a      	ldr	r2, [r3, #8]
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	005b      	lsls	r3, r3, #1
 8000b4c:	2103      	movs	r1, #3
 8000b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b52:	43db      	mvns	r3, r3
 8000b54:	4619      	mov	r1, r3
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	400a      	ands	r2, r1
 8000b5c:	609a      	str	r2, [r3, #8]
				pGPIOHandel->pGPIOx->OSPEEDR |= temp;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	6899      	ldr	r1, [r3, #8]
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	68ba      	ldr	r2, [r7, #8]
 8000b6a:	430a      	orrs	r2, r1
 8000b6c:	609a      	str	r2, [r3, #8]
			}
			else{
			   // Interrupt
			}
			temp = 0;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60bb      	str	r3, [r7, #8]

			// 3.Configure pupd setting
			if(pGPIOHandel->GPIO_Pin_Config.GPIO_PinPuPdControl <= GPIO_PUPDR_RESERVED){
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	7a1b      	ldrb	r3, [r3, #8]
 8000b76:	2b03      	cmp	r3, #3
 8000b78:	d81d      	bhi.n	8000bb6 <GPIO_Init+0xfc>
				temp = pGPIOHandel->GPIO_Pin_Config.GPIO_PinPuPdControl << (2* Pin_Number);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	7a1b      	ldrb	r3, [r3, #8]
 8000b7e:	461a      	mov	r2, r3
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	005b      	lsls	r3, r3, #1
 8000b84:	fa02 f303 	lsl.w	r3, r2, r3
 8000b88:	60bb      	str	r3, [r7, #8]
				pGPIOHandel->pGPIOx->PUPDR &= ~(3 << (2* Pin_Number));
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	68da      	ldr	r2, [r3, #12]
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	005b      	lsls	r3, r3, #1
 8000b94:	2103      	movs	r1, #3
 8000b96:	fa01 f303 	lsl.w	r3, r1, r3
 8000b9a:	43db      	mvns	r3, r3
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	400a      	ands	r2, r1
 8000ba4:	60da      	str	r2, [r3, #12]
				pGPIOHandel->pGPIOx->PUPDR |= temp;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	68d9      	ldr	r1, [r3, #12]
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	68ba      	ldr	r2, [r7, #8]
 8000bb2:	430a      	orrs	r2, r1
 8000bb4:	60da      	str	r2, [r3, #12]
			}
			else{
				// Interrupt
			}
			temp = 0;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60bb      	str	r3, [r7, #8]
			// 4.Configure otype
			if(pGPIOHandel->GPIO_Pin_Config.GPIO_PinOPType <= GPIO_OTYPER_OD){
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	7a5b      	ldrb	r3, [r3, #9]
 8000bbe:	2b01      	cmp	r3, #1
 8000bc0:	d81b      	bhi.n	8000bfa <GPIO_Init+0x140>
				temp = pGPIOHandel->GPIO_Pin_Config.GPIO_PinOPType << Pin_Number;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	7a5b      	ldrb	r3, [r3, #9]
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	fa02 f303 	lsl.w	r3, r2, r3
 8000bce:	60bb      	str	r3, [r7, #8]
				pGPIOHandel->pGPIOx->OTYPER &= ~(1 << Pin_Number);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	685a      	ldr	r2, [r3, #4]
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	fa01 f303 	lsl.w	r3, r1, r3
 8000bde:	43db      	mvns	r3, r3
 8000be0:	4619      	mov	r1, r3
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	400a      	ands	r2, r1
 8000be8:	605a      	str	r2, [r3, #4]
				pGPIOHandel->pGPIOx->OTYPER |= temp;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	6859      	ldr	r1, [r3, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	68ba      	ldr	r2, [r7, #8]
 8000bf6:	430a      	orrs	r2, r1
 8000bf8:	605a      	str	r2, [r3, #4]
			}
			else{
				// Interrupt
			}
			temp = 0;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60bb      	str	r3, [r7, #8]
			// 5.Configure alt func mode
			if (pGPIOHandel->GPIO_Pin_Config.GPIO_PinAltFunMode_High <= GPIO_AFRH_AF15){
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	7a9b      	ldrb	r3, [r3, #10]
 8000c02:	2b0f      	cmp	r3, #15
 8000c04:	d81f      	bhi.n	8000c46 <GPIO_Init+0x18c>
				temp = pGPIOHandel->GPIO_Pin_Config.GPIO_PinAltFunMode_High << (4 * (Pin_Number - 8));
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	7a9b      	ldrb	r3, [r3, #10]
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	3b08      	subs	r3, #8
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	fa02 f303 	lsl.w	r3, r2, r3
 8000c16:	60bb      	str	r3, [r7, #8]
				pGPIOHandel->pGPIOx->AFRH &= ~(4 << (4 * (Pin_Number - 8)));
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	3b08      	subs	r3, #8
 8000c22:	009b      	lsls	r3, r3, #2
 8000c24:	2104      	movs	r1, #4
 8000c26:	fa01 f303 	lsl.w	r3, r1, r3
 8000c2a:	43db      	mvns	r3, r3
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	400a      	ands	r2, r1
 8000c34:	625a      	str	r2, [r3, #36]	@ 0x24
				pGPIOHandel->pGPIOx->AFRH |= temp;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	68ba      	ldr	r2, [r7, #8]
 8000c42:	430a      	orrs	r2, r1
 8000c44:	625a      	str	r2, [r3, #36]	@ 0x24
			}

			temp = 0;
 8000c46:	2300      	movs	r3, #0
 8000c48:	60bb      	str	r3, [r7, #8]
			if (pGPIOHandel->GPIO_Pin_Config.GPIO_PinAltFunMode_Low <= GPIO_AFRL_AF15){
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	7adb      	ldrb	r3, [r3, #11]
 8000c4e:	2b0f      	cmp	r3, #15
 8000c50:	d81d      	bhi.n	8000c8e <GPIO_Init+0x1d4>
				temp = pGPIOHandel->GPIO_Pin_Config.GPIO_PinAltFunMode_Low << (4 * (Pin_Number));
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	7adb      	ldrb	r3, [r3, #11]
 8000c56:	461a      	mov	r2, r3
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	009b      	lsls	r3, r3, #2
 8000c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c60:	60bb      	str	r3, [r7, #8]
				pGPIOHandel->pGPIOx->AFRL &= ~(4 << (4 * Pin_Number));
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	6a1a      	ldr	r2, [r3, #32]
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	2104      	movs	r1, #4
 8000c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c72:	43db      	mvns	r3, r3
 8000c74:	4619      	mov	r1, r3
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	400a      	ands	r2, r1
 8000c7c:	621a      	str	r2, [r3, #32]
				pGPIOHandel->pGPIOx->AFRL |= temp;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	6a19      	ldr	r1, [r3, #32]
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	68ba      	ldr	r2, [r7, #8]
 8000c8a:	430a      	orrs	r2, r1
 8000c8c:	621a      	str	r2, [r3, #32]
			}
			temp = 0;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60bb      	str	r3, [r7, #8]
	for (int Pin_Number = 0; Pin_Number < GPIO_PIN_15; Pin_Number++){
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	3301      	adds	r3, #1
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000c9e:	f6ff af13 	blt.w	8000ac8 <GPIO_Init+0xe>
		}
	}
}
 8000ca2:	bf00      	nop
 8000ca4:	bf00      	nop
 8000ca6:	3714      	adds	r7, #20
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr

08000cb0 <GPIO_Init_Pin>:


void GPIO_Init_Pin(GPIO_Handle_t *pGPIOHandel){	// Exactly Timer config
 8000cb0:	b480      	push	{r7}
 8000cb2:	b085      	sub	sp, #20
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	60fb      	str	r3, [r7, #12]
	if(pGPIOHandel->GPIO_Pin_Config.GPIO_PinMode <= GPIO_MODER_ANALOG){
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	799b      	ldrb	r3, [r3, #6]
 8000cc0:	2b03      	cmp	r3, #3
 8000cc2:	d81f      	bhi.n	8000d04 <GPIO_Init_Pin+0x54>
		temp = pGPIOHandel->GPIO_Pin_Config.GPIO_PinMode << (2* pGPIOHandel->GPIO_Pin_Config.GPIO_PinNumber);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	799b      	ldrb	r3, [r3, #6]
 8000cc8:	461a      	mov	r2, r3
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	889b      	ldrh	r3, [r3, #4]
 8000cce:	005b      	lsls	r3, r3, #1
 8000cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd4:	60fb      	str	r3, [r7, #12]
		pGPIOHandel->pGPIOx->MODER &= ~(3 << (2* pGPIOHandel->GPIO_Pin_Config.GPIO_PinNumber));
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	889b      	ldrh	r3, [r3, #4]
 8000ce0:	005b      	lsls	r3, r3, #1
 8000ce2:	2103      	movs	r1, #3
 8000ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce8:	43db      	mvns	r3, r3
 8000cea:	4619      	mov	r1, r3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	400a      	ands	r2, r1
 8000cf2:	601a      	str	r2, [r3, #0]
		pGPIOHandel->pGPIOx->MODER |= temp;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	6819      	ldr	r1, [r3, #0]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	68fa      	ldr	r2, [r7, #12]
 8000d00:	430a      	orrs	r2, r1
 8000d02:	601a      	str	r2, [r3, #0]
	}
	else{
		// Interrupt
	}
	temp = 0;
 8000d04:	2300      	movs	r3, #0
 8000d06:	60fb      	str	r3, [r7, #12]
	// 2.Configure speed
	if(pGPIOHandel->GPIO_Pin_Config.GPIO_PinSpeed <= GPIO_OSPEEDR_VERYHIGH){
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	79db      	ldrb	r3, [r3, #7]
 8000d0c:	2b03      	cmp	r3, #3
 8000d0e:	d81f      	bhi.n	8000d50 <GPIO_Init_Pin+0xa0>
		temp = pGPIOHandel->GPIO_Pin_Config.GPIO_PinSpeed << (2* pGPIOHandel->GPIO_Pin_Config.GPIO_PinNumber);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	79db      	ldrb	r3, [r3, #7]
 8000d14:	461a      	mov	r2, r3
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	889b      	ldrh	r3, [r3, #4]
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d20:	60fb      	str	r3, [r7, #12]
		pGPIOHandel->pGPIOx->OSPEEDR &= ~(3 << (2* pGPIOHandel->GPIO_Pin_Config.GPIO_PinNumber));
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	689a      	ldr	r2, [r3, #8]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	889b      	ldrh	r3, [r3, #4]
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	2103      	movs	r1, #3
 8000d30:	fa01 f303 	lsl.w	r3, r1, r3
 8000d34:	43db      	mvns	r3, r3
 8000d36:	4619      	mov	r1, r3
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	400a      	ands	r2, r1
 8000d3e:	609a      	str	r2, [r3, #8]
		pGPIOHandel->pGPIOx->OSPEEDR |= temp;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	6899      	ldr	r1, [r3, #8]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	68fa      	ldr	r2, [r7, #12]
 8000d4c:	430a      	orrs	r2, r1
 8000d4e:	609a      	str	r2, [r3, #8]
	}
	else{
	   // Interrupt
	}
	temp = 0;
 8000d50:	2300      	movs	r3, #0
 8000d52:	60fb      	str	r3, [r7, #12]

	// 3.Configure pupd setting
	if(pGPIOHandel->GPIO_Pin_Config.GPIO_PinPuPdControl <= GPIO_PUPDR_RESERVED){
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	7a1b      	ldrb	r3, [r3, #8]
 8000d58:	2b03      	cmp	r3, #3
 8000d5a:	d81f      	bhi.n	8000d9c <GPIO_Init_Pin+0xec>
		temp = pGPIOHandel->GPIO_Pin_Config.GPIO_PinPuPdControl << (2* pGPIOHandel->GPIO_Pin_Config.GPIO_PinNumber);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	7a1b      	ldrb	r3, [r3, #8]
 8000d60:	461a      	mov	r2, r3
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	889b      	ldrh	r3, [r3, #4]
 8000d66:	005b      	lsls	r3, r3, #1
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	60fb      	str	r3, [r7, #12]
		pGPIOHandel->pGPIOx->PUPDR &= ~(3 << (2* pGPIOHandel->GPIO_Pin_Config.GPIO_PinNumber));
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	68da      	ldr	r2, [r3, #12]
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	889b      	ldrh	r3, [r3, #4]
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	2103      	movs	r1, #3
 8000d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d80:	43db      	mvns	r3, r3
 8000d82:	4619      	mov	r1, r3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	400a      	ands	r2, r1
 8000d8a:	60da      	str	r2, [r3, #12]
		pGPIOHandel->pGPIOx->PUPDR |= temp;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	68d9      	ldr	r1, [r3, #12]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	68fa      	ldr	r2, [r7, #12]
 8000d98:	430a      	orrs	r2, r1
 8000d9a:	60da      	str	r2, [r3, #12]
	}
	else{
		// Interrupt
	}
	temp = 0;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	60fb      	str	r3, [r7, #12]
	// 4.Configure otype
	if(pGPIOHandel->GPIO_Pin_Config.GPIO_PinOPType <= GPIO_OTYPER_OD){
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	7a5b      	ldrb	r3, [r3, #9]
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d81d      	bhi.n	8000de4 <GPIO_Init_Pin+0x134>
		temp = pGPIOHandel->GPIO_Pin_Config.GPIO_PinOPType << pGPIOHandel->GPIO_Pin_Config.GPIO_PinNumber;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	7a5b      	ldrb	r3, [r3, #9]
 8000dac:	461a      	mov	r2, r3
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	889b      	ldrh	r3, [r3, #4]
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	60fb      	str	r3, [r7, #12]
		pGPIOHandel->pGPIOx->OTYPER &= ~(1 << pGPIOHandel->GPIO_Pin_Config.GPIO_PinNumber);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	685a      	ldr	r2, [r3, #4]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	889b      	ldrh	r3, [r3, #4]
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	408b      	lsls	r3, r1
 8000dc8:	43db      	mvns	r3, r3
 8000dca:	4619      	mov	r1, r3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	400a      	ands	r2, r1
 8000dd2:	605a      	str	r2, [r3, #4]
		pGPIOHandel->pGPIOx->OTYPER |= temp;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	6859      	ldr	r1, [r3, #4]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	68fa      	ldr	r2, [r7, #12]
 8000de0:	430a      	orrs	r2, r1
 8000de2:	605a      	str	r2, [r3, #4]
	}
	else{
		// Interrupt
	}
	temp = 0;
 8000de4:	2300      	movs	r3, #0
 8000de6:	60fb      	str	r3, [r7, #12]
	// 5.Configure alt func mode
	if (pGPIOHandel->GPIO_Pin_Config.GPIO_PinAltFunMode_High <= GPIO_AFRH_AF15){
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	7a9b      	ldrb	r3, [r3, #10]
 8000dec:	2b0f      	cmp	r3, #15
 8000dee:	d821      	bhi.n	8000e34 <GPIO_Init_Pin+0x184>
		temp = pGPIOHandel->GPIO_Pin_Config.GPIO_PinAltFunMode_High << (4 * (pGPIOHandel->GPIO_Pin_Config.GPIO_PinNumber - 8));
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	7a9b      	ldrb	r3, [r3, #10]
 8000df4:	461a      	mov	r2, r3
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	889b      	ldrh	r3, [r3, #4]
 8000dfa:	3b08      	subs	r3, #8
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	60fb      	str	r3, [r7, #12]
		pGPIOHandel->pGPIOx->AFRH &= ~(4 << (4 * (pGPIOHandel->GPIO_Pin_Config.GPIO_PinNumber - 8)));
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	889b      	ldrh	r3, [r3, #4]
 8000e0e:	3b08      	subs	r3, #8
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	2104      	movs	r1, #4
 8000e14:	fa01 f303 	lsl.w	r3, r1, r3
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	400a      	ands	r2, r1
 8000e22:	625a      	str	r2, [r3, #36]	@ 0x24
		pGPIOHandel->pGPIOx->AFRH |= temp;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	68fa      	ldr	r2, [r7, #12]
 8000e30:	430a      	orrs	r2, r1
 8000e32:	625a      	str	r2, [r3, #36]	@ 0x24
	}

	temp = 0;
 8000e34:	2300      	movs	r3, #0
 8000e36:	60fb      	str	r3, [r7, #12]
	if (pGPIOHandel->GPIO_Pin_Config.GPIO_PinAltFunMode_Low <= GPIO_AFRL_AF15){
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	7adb      	ldrb	r3, [r3, #11]
 8000e3c:	2b0f      	cmp	r3, #15
 8000e3e:	d81f      	bhi.n	8000e80 <GPIO_Init_Pin+0x1d0>
		temp = pGPIOHandel->GPIO_Pin_Config.GPIO_PinAltFunMode_Low << (4 * (pGPIOHandel->GPIO_Pin_Config.GPIO_PinNumber));
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	7adb      	ldrb	r3, [r3, #11]
 8000e44:	461a      	mov	r2, r3
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	889b      	ldrh	r3, [r3, #4]
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	60fb      	str	r3, [r7, #12]
		pGPIOHandel->pGPIOx->AFRL &= ~(4 << (4 * pGPIOHandel->GPIO_Pin_Config.GPIO_PinNumber));
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	6a1a      	ldr	r2, [r3, #32]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	889b      	ldrh	r3, [r3, #4]
 8000e5c:	009b      	lsls	r3, r3, #2
 8000e5e:	2104      	movs	r1, #4
 8000e60:	fa01 f303 	lsl.w	r3, r1, r3
 8000e64:	43db      	mvns	r3, r3
 8000e66:	4619      	mov	r1, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	400a      	ands	r2, r1
 8000e6e:	621a      	str	r2, [r3, #32]
		pGPIOHandel->pGPIOx->AFRL |= temp;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	6a19      	ldr	r1, [r3, #32]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	68fa      	ldr	r2, [r7, #12]
 8000e7c:	430a      	orrs	r2, r1
 8000e7e:	621a      	str	r2, [r3, #32]
	}
	temp = 0;
 8000e80:	2300      	movs	r3, #0
 8000e82:	60fb      	str	r3, [r7, #12]
}
 8000e84:	bf00      	nop
 8000e86:	3714      	adds	r7, #20
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr

08000e90 <GPIO_WriteToOutPutPin>:
    uint16_t value;
    value = (uint16_t)(pGPIOx->IDR);
    return value;
}

void GPIO_WriteToOutPutPin(GPIO_RegDef_t *pGPIOx, uint8_t GPIO_PinNumber, uint8_t Status){
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	460b      	mov	r3, r1
 8000e9a:	70fb      	strb	r3, [r7, #3]
 8000e9c:	4613      	mov	r3, r2
 8000e9e:	70bb      	strb	r3, [r7, #2]
    if(Status == GPIO_PIN_SET){
 8000ea0:	78bb      	ldrb	r3, [r7, #2]
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d109      	bne.n	8000eba <GPIO_WriteToOutPutPin+0x2a>
        pGPIOx->ODR |= (1 << GPIO_PinNumber);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	695b      	ldr	r3, [r3, #20]
 8000eaa:	78fa      	ldrb	r2, [r7, #3]
 8000eac:	2101      	movs	r1, #1
 8000eae:	fa01 f202 	lsl.w	r2, r1, r2
 8000eb2:	431a      	orrs	r2, r3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	615a      	str	r2, [r3, #20]
    }
    else{
        pGPIOx->ODR &= ~(1 << GPIO_PinNumber);
    }
}
 8000eb8:	e009      	b.n	8000ece <GPIO_WriteToOutPutPin+0x3e>
        pGPIOx->ODR &= ~(1 << GPIO_PinNumber);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	695b      	ldr	r3, [r3, #20]
 8000ebe:	78fa      	ldrb	r2, [r7, #3]
 8000ec0:	2101      	movs	r1, #1
 8000ec2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ec6:	43d2      	mvns	r2, r2
 8000ec8:	401a      	ands	r2, r3
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	615a      	str	r2, [r3, #20]
}
 8000ece:	bf00      	nop
 8000ed0:	370c      	adds	r7, #12
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
	...

08000edc <Config_Pin>:
	{'4', '5', '6', 'B'},
	{'7', '8', '9', 'C'},
	{'*', '0', '#', 'D'},
};

void Config_Pin(){
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
	GPIOD_PCLK_EN;
 8000ee0:	4b18      	ldr	r3, [pc, #96]	@ (8000f44 <Config_Pin+0x68>)
 8000ee2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee4:	4a17      	ldr	r2, [pc, #92]	@ (8000f44 <Config_Pin+0x68>)
 8000ee6:	f043 0308 	orr.w	r3, r3, #8
 8000eea:	6313      	str	r3, [r2, #48]	@ 0x30
	Key_Pin_R.pGPIOx = GPIOD;
 8000eec:	4b16      	ldr	r3, [pc, #88]	@ (8000f48 <Config_Pin+0x6c>)
 8000eee:	4a17      	ldr	r2, [pc, #92]	@ (8000f4c <Config_Pin+0x70>)
 8000ef0:	601a      	str	r2, [r3, #0]
	Key_Pin_R.GPIO_Pin_Config.GPIO_PinNumber = \
 8000ef2:	4b15      	ldr	r3, [pc, #84]	@ (8000f48 <Config_Pin+0x6c>)
 8000ef4:	220f      	movs	r2, #15
 8000ef6:	809a      	strh	r2, [r3, #4]
	PIN_NUM_0 | PIN_NUM_1 | PIN_NUM_2 | PIN_NUM_3;
	Key_Pin_R.GPIO_Pin_Config.GPIO_PinMode = GPIO_MODER_OUTPUT;
 8000ef8:	4b13      	ldr	r3, [pc, #76]	@ (8000f48 <Config_Pin+0x6c>)
 8000efa:	2201      	movs	r2, #1
 8000efc:	719a      	strb	r2, [r3, #6]
	Key_Pin_R.GPIO_Pin_Config.GPIO_PinOPType = GPIO_OTYPER_PP;
 8000efe:	4b12      	ldr	r3, [pc, #72]	@ (8000f48 <Config_Pin+0x6c>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	725a      	strb	r2, [r3, #9]
	Key_Pin_R.GPIO_Pin_Config.GPIO_PinSpeed = GPIO_OSPEEDR_LOW;
 8000f04:	4b10      	ldr	r3, [pc, #64]	@ (8000f48 <Config_Pin+0x6c>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	71da      	strb	r2, [r3, #7]
	Key_Pin_R.GPIO_Pin_Config.GPIO_PinPuPdControl = GPIO_PUPDR_PU;
 8000f0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f48 <Config_Pin+0x6c>)
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	721a      	strb	r2, [r3, #8]
	GPIO_Init(&Key_Pin_R);
 8000f10:	480d      	ldr	r0, [pc, #52]	@ (8000f48 <Config_Pin+0x6c>)
 8000f12:	f7ff fdd2 	bl	8000aba <GPIO_Init>

	Key_Pin_C.pGPIOx = GPIOD;
 8000f16:	4b0e      	ldr	r3, [pc, #56]	@ (8000f50 <Config_Pin+0x74>)
 8000f18:	4a0c      	ldr	r2, [pc, #48]	@ (8000f4c <Config_Pin+0x70>)
 8000f1a:	601a      	str	r2, [r3, #0]
	Key_Pin_C.GPIO_Pin_Config.GPIO_PinNumber = \
 8000f1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f50 <Config_Pin+0x74>)
 8000f1e:	22f0      	movs	r2, #240	@ 0xf0
 8000f20:	809a      	strh	r2, [r3, #4]
	PIN_NUM_4 | PIN_NUM_5 | PIN_NUM_6 | PIN_NUM_7;
	Key_Pin_C.GPIO_Pin_Config.GPIO_PinMode = GPIO_MODER_INPUT;
 8000f22:	4b0b      	ldr	r3, [pc, #44]	@ (8000f50 <Config_Pin+0x74>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	719a      	strb	r2, [r3, #6]
	Key_Pin_C.GPIO_Pin_Config.GPIO_PinOPType = GPIO_OTYPER_PP;
 8000f28:	4b09      	ldr	r3, [pc, #36]	@ (8000f50 <Config_Pin+0x74>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	725a      	strb	r2, [r3, #9]
	Key_Pin_C.GPIO_Pin_Config.GPIO_PinSpeed = GPIO_OSPEEDR_LOW;
 8000f2e:	4b08      	ldr	r3, [pc, #32]	@ (8000f50 <Config_Pin+0x74>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	71da      	strb	r2, [r3, #7]
	Key_Pin_C.GPIO_Pin_Config.GPIO_PinPuPdControl = GPIO_PUPDR_PU;
 8000f34:	4b06      	ldr	r3, [pc, #24]	@ (8000f50 <Config_Pin+0x74>)
 8000f36:	2201      	movs	r2, #1
 8000f38:	721a      	strb	r2, [r3, #8]

	GPIO_Init(&Key_Pin_C);
 8000f3a:	4805      	ldr	r0, [pc, #20]	@ (8000f50 <Config_Pin+0x74>)
 8000f3c:	f7ff fdbd 	bl	8000aba <GPIO_Init>
}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	40023800 	.word	0x40023800
 8000f48:	20000118 	.word	0x20000118
 8000f4c:	40020c00 	.word	0x40020c00
 8000f50:	20000124 	.word	0x20000124

08000f54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	6039      	str	r1, [r7, #0]
 8000f5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	db0a      	blt.n	8000f7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	b2da      	uxtb	r2, r3
 8000f6c:	490c      	ldr	r1, [pc, #48]	@ (8000fa0 <__NVIC_SetPriority+0x4c>)
 8000f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f72:	0112      	lsls	r2, r2, #4
 8000f74:	b2d2      	uxtb	r2, r2
 8000f76:	440b      	add	r3, r1
 8000f78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f7c:	e00a      	b.n	8000f94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	b2da      	uxtb	r2, r3
 8000f82:	4908      	ldr	r1, [pc, #32]	@ (8000fa4 <__NVIC_SetPriority+0x50>)
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	f003 030f 	and.w	r3, r3, #15
 8000f8a:	3b04      	subs	r3, #4
 8000f8c:	0112      	lsls	r2, r2, #4
 8000f8e:	b2d2      	uxtb	r2, r2
 8000f90:	440b      	add	r3, r1
 8000f92:	761a      	strb	r2, [r3, #24]
}
 8000f94:	bf00      	nop
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	e000e100 	.word	0xe000e100
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <_ZN4RoomC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
#include "Device.h"

class Room : public Device {
private:
public:
    Room(std::string name) : Device(name) {}
 8000fa8:	b590      	push	{r4, r7, lr}
 8000faa:	b089      	sub	sp, #36	@ 0x24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
 8000fb2:	687c      	ldr	r4, [r7, #4]
 8000fb4:	f107 0308 	add.w	r3, r7, #8
 8000fb8:	6839      	ldr	r1, [r7, #0]
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f001 f875 	bl	80020aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8000fc0:	f107 0308 	add.w	r3, r7, #8
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4620      	mov	r0, r4
 8000fc8:	f7ff fd08 	bl	80009dc <_ZN6DeviceC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8000fcc:	f107 0308 	add.w	r3, r7, #8
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f001 f836 	bl	8002042 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3724      	adds	r7, #36	@ 0x24
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd90      	pop	{r4, r7, pc}

08000fe0 <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b094      	sub	sp, #80	@ 0x50
 8000fe4:	af00      	add	r7, sp, #0
	NVIC_SetPriority (EXTI1_IRQn, 0);  // Set Priority
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	2007      	movs	r0, #7
 8000fea:	f7ff ffb3 	bl	8000f54 <__NVIC_SetPriority>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fee:	f000 fa53 	bl	8001498 <HAL_Init>
  /* USER CODE BEGIN Init */
  DWT_Init();
 8000ff2:	f000 f94b 	bl	800128c <DWT_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ff6:	f000 f8a3 	bl	8001140 <_Z18SystemClock_Configv>
 8000ffa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ffe:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize all configured peripherals */


  /* USER CODE BEGIN 2 */
	Room LVR("Living Room");
 8001000:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8001004:	f107 030c 	add.w	r3, r7, #12
 8001008:	494a      	ldr	r1, [pc, #296]	@ (8001134 <main+0x154>)
 800100a:	4618      	mov	r0, r3
 800100c:	f001 f876 	bl	80020fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001010:	f107 020c 	add.w	r2, r7, #12
 8001014:	1d3b      	adds	r3, r7, #4
 8001016:	4611      	mov	r1, r2
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff ffc5 	bl	8000fa8 <_ZN4RoomC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800101e:	f107 030c 	add.w	r3, r7, #12
 8001022:	4618      	mov	r0, r3
 8001024:	f001 f80d 	bl	8002042 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

      __attribute__((__always_inline__))
#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8001028:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800102c:	4618      	mov	r0, r3
 800102e:	f000 f8f7 	bl	8001220 <_ZNSt15__new_allocatorIcED1Ev>
//	Room KTR("Kitchen Room");
//	Room BR("Bed Room");
	LVR.TurnOnLed(Room::em_Led1);
 8001032:	1d3b      	adds	r3, r7, #4
 8001034:	2180      	movs	r1, #128	@ 0x80
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff fd2e 	bl	8000a98 <_ZN6Device9TurnOnLedEh>
	delay_ms(1000);
 800103c:	2300      	movs	r3, #0
 800103e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001040:	e01d      	b.n	800107e <main+0x9e>
 8001042:	4b3d      	ldr	r3, [pc, #244]	@ (8001138 <main+0x158>)
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	633b      	str	r3, [r7, #48]	@ 0x30
 8001048:	f000 f8fe 	bl	8001248 <RCC_GetSystemClock>
 800104c:	4603      	mov	r3, r0
 800104e:	4a3b      	ldr	r2, [pc, #236]	@ (800113c <main+0x15c>)
 8001050:	fba2 2303 	umull	r2, r3, r2, r3
 8001054:	0c9b      	lsrs	r3, r3, #18
 8001056:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800105a:	fb02 f303 	mul.w	r3, r2, r3
 800105e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001060:	4b35      	ldr	r3, [pc, #212]	@ (8001138 <main+0x158>)
 8001062:	685a      	ldr	r2, [r3, #4]
 8001064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001066:	1ad3      	subs	r3, r2, r3
 8001068:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800106a:	429a      	cmp	r2, r3
 800106c:	bf8c      	ite	hi
 800106e:	2301      	movhi	r3, #1
 8001070:	2300      	movls	r3, #0
 8001072:	b2db      	uxtb	r3, r3
 8001074:	2b00      	cmp	r3, #0
 8001076:	d1f3      	bne.n	8001060 <main+0x80>
 8001078:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800107a:	3301      	adds	r3, #1
 800107c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800107e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001080:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001084:	d3dd      	bcc.n	8001042 <main+0x62>
	LVR.TurnOnLed(Room::em_Led2);
 8001086:	1d3b      	adds	r3, r7, #4
 8001088:	2140      	movs	r1, #64	@ 0x40
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff fd04 	bl	8000a98 <_ZN6Device9TurnOnLedEh>
	delay_ms(1000);
 8001090:	2300      	movs	r3, #0
 8001092:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001094:	e01d      	b.n	80010d2 <main+0xf2>
 8001096:	4b28      	ldr	r3, [pc, #160]	@ (8001138 <main+0x158>)
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800109c:	f000 f8d4 	bl	8001248 <RCC_GetSystemClock>
 80010a0:	4603      	mov	r3, r0
 80010a2:	4a26      	ldr	r2, [pc, #152]	@ (800113c <main+0x15c>)
 80010a4:	fba2 2303 	umull	r2, r3, r2, r3
 80010a8:	0c9b      	lsrs	r3, r3, #18
 80010aa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80010ae:	fb02 f303 	mul.w	r3, r2, r3
 80010b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80010b4:	4b20      	ldr	r3, [pc, #128]	@ (8001138 <main+0x158>)
 80010b6:	685a      	ldr	r2, [r3, #4]
 80010b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80010ba:	1ad3      	subs	r3, r2, r3
 80010bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80010be:	429a      	cmp	r2, r3
 80010c0:	bf8c      	ite	hi
 80010c2:	2301      	movhi	r3, #1
 80010c4:	2300      	movls	r3, #0
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d1f3      	bne.n	80010b4 <main+0xd4>
 80010cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80010ce:	3301      	adds	r3, #1
 80010d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80010d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80010d4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80010d8:	d3dd      	bcc.n	8001096 <main+0xb6>
	LVR.TurnOnLed(Room::em_Led3);
 80010da:	1d3b      	adds	r3, r7, #4
 80010dc:	2120      	movs	r1, #32
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff fcda 	bl	8000a98 <_ZN6Device9TurnOnLedEh>
	delay_ms(1000);
 80010e4:	2300      	movs	r3, #0
 80010e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80010e8:	e01d      	b.n	8001126 <main+0x146>
 80010ea:	4b13      	ldr	r3, [pc, #76]	@ (8001138 <main+0x158>)
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	643b      	str	r3, [r7, #64]	@ 0x40
 80010f0:	f000 f8aa 	bl	8001248 <RCC_GetSystemClock>
 80010f4:	4603      	mov	r3, r0
 80010f6:	4a11      	ldr	r2, [pc, #68]	@ (800113c <main+0x15c>)
 80010f8:	fba2 2303 	umull	r2, r3, r2, r3
 80010fc:	0c9b      	lsrs	r3, r3, #18
 80010fe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001102:	fb02 f303 	mul.w	r3, r2, r3
 8001106:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001108:	4b0b      	ldr	r3, [pc, #44]	@ (8001138 <main+0x158>)
 800110a:	685a      	ldr	r2, [r3, #4]
 800110c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800110e:	1ad3      	subs	r3, r2, r3
 8001110:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001112:	429a      	cmp	r2, r3
 8001114:	bf8c      	ite	hi
 8001116:	2301      	movhi	r3, #1
 8001118:	2300      	movls	r3, #0
 800111a:	b2db      	uxtb	r3, r3
 800111c:	2b00      	cmp	r3, #0
 800111e:	d1f3      	bne.n	8001108 <main+0x128>
 8001120:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001122:	3301      	adds	r3, #1
 8001124:	647b      	str	r3, [r7, #68]	@ 0x44
 8001126:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001128:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800112c:	d3dd      	bcc.n	80010ea <main+0x10a>
//	LED.GPIO_Pin_Config.GPIO_PinSpeed = GPIO_OSPEEDR_LOW;
//	LED.GPIO_Pin_Config.GPIO_PinPuPdControl = GPIO_PUPDR_NOPUPD;
//	GPIO_Init(&LED);
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800112e:	bf00      	nop
 8001130:	e7fd      	b.n	800112e <main+0x14e>
 8001132:	bf00      	nop
 8001134:	08002520 	.word	0x08002520
 8001138:	e0001000 	.word	0xe0001000
 800113c:	431bde83 	.word	0x431bde83

08001140 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b094      	sub	sp, #80	@ 0x50
 8001144:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001146:	f107 0320 	add.w	r3, r7, #32
 800114a:	2230      	movs	r2, #48	@ 0x30
 800114c:	2100      	movs	r1, #0
 800114e:	4618      	mov	r0, r3
 8001150:	f001 f8e6 	bl	8002320 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001154:	f107 030c 	add.w	r3, r7, #12
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001164:	2300      	movs	r3, #0
 8001166:	60bb      	str	r3, [r7, #8]
 8001168:	4b28      	ldr	r3, [pc, #160]	@ (800120c <_Z18SystemClock_Configv+0xcc>)
 800116a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800116c:	4a27      	ldr	r2, [pc, #156]	@ (800120c <_Z18SystemClock_Configv+0xcc>)
 800116e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001172:	6413      	str	r3, [r2, #64]	@ 0x40
 8001174:	4b25      	ldr	r3, [pc, #148]	@ (800120c <_Z18SystemClock_Configv+0xcc>)
 8001176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001178:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800117c:	60bb      	str	r3, [r7, #8]
 800117e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001180:	2300      	movs	r3, #0
 8001182:	607b      	str	r3, [r7, #4]
 8001184:	4b22      	ldr	r3, [pc, #136]	@ (8001210 <_Z18SystemClock_Configv+0xd0>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800118c:	4a20      	ldr	r2, [pc, #128]	@ (8001210 <_Z18SystemClock_Configv+0xd0>)
 800118e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001192:	6013      	str	r3, [r2, #0]
 8001194:	4b1e      	ldr	r3, [pc, #120]	@ (8001210 <_Z18SystemClock_Configv+0xd0>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800119c:	607b      	str	r3, [r7, #4]
 800119e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011a0:	2302      	movs	r3, #2
 80011a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011a4:	2301      	movs	r3, #1
 80011a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011a8:	2310      	movs	r3, #16
 80011aa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011ac:	2300      	movs	r3, #0
 80011ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011b0:	f107 0320 	add.w	r3, r7, #32
 80011b4:	4618      	mov	r0, r3
 80011b6:	f000 fac7 	bl	8001748 <HAL_RCC_OscConfig>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	bf14      	ite	ne
 80011c0:	2301      	movne	r3, #1
 80011c2:	2300      	moveq	r3, #0
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <_Z18SystemClock_Configv+0x8e>
  {
    Error_Handler();
 80011ca:	f000 f823 	bl	8001214 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011ce:	230f      	movs	r3, #15
 80011d0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80011d2:	2300      	movs	r3, #0
 80011d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011d6:	2300      	movs	r3, #0
 80011d8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011da:	2300      	movs	r3, #0
 80011dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011de:	2300      	movs	r3, #0
 80011e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011e2:	f107 030c 	add.w	r3, r7, #12
 80011e6:	2100      	movs	r1, #0
 80011e8:	4618      	mov	r0, r3
 80011ea:	f000 fd25 	bl	8001c38 <HAL_RCC_ClockConfig>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	bf14      	ite	ne
 80011f4:	2301      	movne	r3, #1
 80011f6:	2300      	moveq	r3, #0
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <_Z18SystemClock_Configv+0xc2>
  {
    Error_Handler();
 80011fe:	f000 f809 	bl	8001214 <Error_Handler>
  }
}
 8001202:	bf00      	nop
 8001204:	3750      	adds	r7, #80	@ 0x50
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40023800 	.word	0x40023800
 8001210:	40007000 	.word	0x40007000

08001214 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001218:	b672      	cpsid	i
}
 800121a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800121c:	bf00      	nop
 800121e:	e7fd      	b.n	800121c <Error_Handler+0x8>

08001220 <_ZNSt15__new_allocatorIcED1Ev>:
#if __cplusplus >= 201103L
      __new_allocator& operator=(const __new_allocator&) = default;
#endif

#if __cplusplus <= 201703L
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	4618      	mov	r0, r3
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr

08001236 <Get_Output_CLK>:

uint16_t AHB_Prescaler[8] = {2,4,8,16,64,128,256,512};
uint8_t APB1_Prescaler[4] = {2,4,8,16};
uint8_t APB2_Prescaler[4] = {2,4,8,16};

uint32_t Get_Output_CLK(){
 8001236:	b480      	push	{r7}
 8001238:	af00      	add	r7, sp, #0
    return 0;
 800123a:	2300      	movs	r3, #0
}
 800123c:	4618      	mov	r0, r3
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
	...

08001248 <RCC_GetSystemClock>:
    pclk2 = (SystemClk/ahbp) / apb2;
    return pclk2;
}

// Delay Function
uint32_t RCC_GetSystemClock(void) {
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
    uint8_t clksrc = (RCC->CFGR >> 2) & 0x3;
 800124e:	4b0c      	ldr	r3, [pc, #48]	@ (8001280 <RCC_GetSystemClock+0x38>)
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	089b      	lsrs	r3, r3, #2
 8001254:	b2db      	uxtb	r3, r3
 8001256:	f003 0303 	and.w	r3, r3, #3
 800125a:	71fb      	strb	r3, [r7, #7]
    if (clksrc == 0) return 16000000U;     // HSI
 800125c:	79fb      	ldrb	r3, [r7, #7]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d101      	bne.n	8001266 <RCC_GetSystemClock+0x1e>
 8001262:	4b08      	ldr	r3, [pc, #32]	@ (8001284 <RCC_GetSystemClock+0x3c>)
 8001264:	e007      	b.n	8001276 <RCC_GetSystemClock+0x2e>
    if (clksrc == 1) return 8000000U;      // HSE
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	2b01      	cmp	r3, #1
 800126a:	d101      	bne.n	8001270 <RCC_GetSystemClock+0x28>
 800126c:	4b06      	ldr	r3, [pc, #24]	@ (8001288 <RCC_GetSystemClock+0x40>)
 800126e:	e002      	b.n	8001276 <RCC_GetSystemClock+0x2e>
    return Get_Output_CLK();              // PLL
 8001270:	f7ff ffe1 	bl	8001236 <Get_Output_CLK>
 8001274:	4603      	mov	r3, r0
}
 8001276:	4618      	mov	r0, r3
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40023800 	.word	0x40023800
 8001284:	00f42400 	.word	0x00f42400
 8001288:	007a1200 	.word	0x007a1200

0800128c <DWT_Init>:

void DWT_Init(void) {
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
    // Enable TRC (Trace and Debug)
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001290:	4b09      	ldr	r3, [pc, #36]	@ (80012b8 <DWT_Init+0x2c>)
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	4a08      	ldr	r2, [pc, #32]	@ (80012b8 <DWT_Init+0x2c>)
 8001296:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800129a:	60d3      	str	r3, [r2, #12]

    // Reset Cycle Counter
    DWT->CYCCNT = 0;
 800129c:	4b07      	ldr	r3, [pc, #28]	@ (80012bc <DWT_Init+0x30>)
 800129e:	2200      	movs	r2, #0
 80012a0:	605a      	str	r2, [r3, #4]

    // Enable Cycle Counter
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80012a2:	4b06      	ldr	r3, [pc, #24]	@ (80012bc <DWT_Init+0x30>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a05      	ldr	r2, [pc, #20]	@ (80012bc <DWT_Init+0x30>)
 80012a8:	f043 0301 	orr.w	r3, r3, #1
 80012ac:	6013      	str	r3, [r2, #0]
}
 80012ae:	bf00      	nop
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	e000edf0 	.word	0xe000edf0
 80012bc:	e0001000 	.word	0xe0001000

080012c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	607b      	str	r3, [r7, #4]
 80012ca:	4b10      	ldr	r3, [pc, #64]	@ (800130c <HAL_MspInit+0x4c>)
 80012cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ce:	4a0f      	ldr	r2, [pc, #60]	@ (800130c <HAL_MspInit+0x4c>)
 80012d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80012d6:	4b0d      	ldr	r3, [pc, #52]	@ (800130c <HAL_MspInit+0x4c>)
 80012d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012de:	607b      	str	r3, [r7, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	603b      	str	r3, [r7, #0]
 80012e6:	4b09      	ldr	r3, [pc, #36]	@ (800130c <HAL_MspInit+0x4c>)
 80012e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ea:	4a08      	ldr	r2, [pc, #32]	@ (800130c <HAL_MspInit+0x4c>)
 80012ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80012f2:	4b06      	ldr	r3, [pc, #24]	@ (800130c <HAL_MspInit+0x4c>)
 80012f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012fa:	603b      	str	r3, [r7, #0]
 80012fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012fe:	bf00      	nop
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	40023800 	.word	0x40023800

08001310 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001314:	bf00      	nop
 8001316:	e7fd      	b.n	8001314 <NMI_Handler+0x4>

08001318 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800131c:	bf00      	nop
 800131e:	e7fd      	b.n	800131c <HardFault_Handler+0x4>

08001320 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001324:	bf00      	nop
 8001326:	e7fd      	b.n	8001324 <MemManage_Handler+0x4>

08001328 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800132c:	bf00      	nop
 800132e:	e7fd      	b.n	800132c <BusFault_Handler+0x4>

08001330 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001334:	bf00      	nop
 8001336:	e7fd      	b.n	8001334 <UsageFault_Handler+0x4>

08001338 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800133c:	bf00      	nop
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr

08001346 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr

08001362 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001366:	f000 f8e9 	bl	800153c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}

0800136e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800136e:	b480      	push	{r7}
 8001370:	af00      	add	r7, sp, #0
  return 1;
 8001372:	2301      	movs	r3, #1
}
 8001374:	4618      	mov	r0, r3
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr

0800137e <_kill>:

int _kill(int pid, int sig)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b082      	sub	sp, #8
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
 8001386:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001388:	f001 f826 	bl	80023d8 <__errno>
 800138c:	4603      	mov	r3, r0
 800138e:	2216      	movs	r2, #22
 8001390:	601a      	str	r2, [r3, #0]
  return -1;
 8001392:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001396:	4618      	mov	r0, r3
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <_exit>:

void _exit (int status)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b082      	sub	sp, #8
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80013a6:	f04f 31ff 	mov.w	r1, #4294967295
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f7ff ffe7 	bl	800137e <_kill>
  while (1) {}    /* Make sure we hang here */
 80013b0:	bf00      	nop
 80013b2:	e7fd      	b.n	80013b0 <_exit+0x12>

080013b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013bc:	4a14      	ldr	r2, [pc, #80]	@ (8001410 <_sbrk+0x5c>)
 80013be:	4b15      	ldr	r3, [pc, #84]	@ (8001414 <_sbrk+0x60>)
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013c8:	4b13      	ldr	r3, [pc, #76]	@ (8001418 <_sbrk+0x64>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d102      	bne.n	80013d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013d0:	4b11      	ldr	r3, [pc, #68]	@ (8001418 <_sbrk+0x64>)
 80013d2:	4a12      	ldr	r2, [pc, #72]	@ (800141c <_sbrk+0x68>)
 80013d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013d6:	4b10      	ldr	r3, [pc, #64]	@ (8001418 <_sbrk+0x64>)
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4413      	add	r3, r2
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d207      	bcs.n	80013f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013e4:	f000 fff8 	bl	80023d8 <__errno>
 80013e8:	4603      	mov	r3, r0
 80013ea:	220c      	movs	r2, #12
 80013ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013ee:	f04f 33ff 	mov.w	r3, #4294967295
 80013f2:	e009      	b.n	8001408 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013f4:	4b08      	ldr	r3, [pc, #32]	@ (8001418 <_sbrk+0x64>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013fa:	4b07      	ldr	r3, [pc, #28]	@ (8001418 <_sbrk+0x64>)
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4413      	add	r3, r2
 8001402:	4a05      	ldr	r2, [pc, #20]	@ (8001418 <_sbrk+0x64>)
 8001404:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001406:	68fb      	ldr	r3, [r7, #12]
}
 8001408:	4618      	mov	r0, r3
 800140a:	3718      	adds	r7, #24
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20018000 	.word	0x20018000
 8001414:	00000400 	.word	0x00000400
 8001418:	20000130 	.word	0x20000130
 800141c:	20000288 	.word	0x20000288

08001420 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001424:	4b06      	ldr	r3, [pc, #24]	@ (8001440 <SystemInit+0x20>)
 8001426:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800142a:	4a05      	ldr	r2, [pc, #20]	@ (8001440 <SystemInit+0x20>)
 800142c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001430:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	e000ed00 	.word	0xe000ed00

08001444 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001444:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800147c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001448:	f7ff ffea 	bl	8001420 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800144c:	480c      	ldr	r0, [pc, #48]	@ (8001480 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800144e:	490d      	ldr	r1, [pc, #52]	@ (8001484 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001450:	4a0d      	ldr	r2, [pc, #52]	@ (8001488 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001452:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001454:	e002      	b.n	800145c <LoopCopyDataInit>

08001456 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001456:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001458:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800145a:	3304      	adds	r3, #4

0800145c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800145c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800145e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001460:	d3f9      	bcc.n	8001456 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001462:	4a0a      	ldr	r2, [pc, #40]	@ (800148c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001464:	4c0a      	ldr	r4, [pc, #40]	@ (8001490 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001466:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001468:	e001      	b.n	800146e <LoopFillZerobss>

0800146a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800146a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800146c:	3204      	adds	r2, #4

0800146e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800146e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001470:	d3fb      	bcc.n	800146a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001472:	f000 ffb7 	bl	80023e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001476:	f7ff fdb3 	bl	8000fe0 <main>
  bx  lr    
 800147a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800147c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001480:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001484:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001488:	08002598 	.word	0x08002598
  ldr r2, =_sbss
 800148c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001490:	20000284 	.word	0x20000284

08001494 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001494:	e7fe      	b.n	8001494 <ADC_IRQHandler>
	...

08001498 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800149c:	4b0e      	ldr	r3, [pc, #56]	@ (80014d8 <HAL_Init+0x40>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a0d      	ldr	r2, [pc, #52]	@ (80014d8 <HAL_Init+0x40>)
 80014a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014a8:	4b0b      	ldr	r3, [pc, #44]	@ (80014d8 <HAL_Init+0x40>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a0a      	ldr	r2, [pc, #40]	@ (80014d8 <HAL_Init+0x40>)
 80014ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80014b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014b4:	4b08      	ldr	r3, [pc, #32]	@ (80014d8 <HAL_Init+0x40>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a07      	ldr	r2, [pc, #28]	@ (80014d8 <HAL_Init+0x40>)
 80014ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014c0:	2003      	movs	r0, #3
 80014c2:	f000 f90d 	bl	80016e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014c6:	200f      	movs	r0, #15
 80014c8:	f000 f808 	bl	80014dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014cc:	f7ff fef8 	bl	80012c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	40023c00 	.word	0x40023c00

080014dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014e4:	4b12      	ldr	r3, [pc, #72]	@ (8001530 <HAL_InitTick+0x54>)
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	4b12      	ldr	r3, [pc, #72]	@ (8001534 <HAL_InitTick+0x58>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	4619      	mov	r1, r3
 80014ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80014f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014fa:	4618      	mov	r0, r3
 80014fc:	f000 f917 	bl	800172e <HAL_SYSTICK_Config>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e00e      	b.n	8001528 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2b0f      	cmp	r3, #15
 800150e:	d80a      	bhi.n	8001526 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001510:	2200      	movs	r2, #0
 8001512:	6879      	ldr	r1, [r7, #4]
 8001514:	f04f 30ff 	mov.w	r0, #4294967295
 8001518:	f000 f8ed 	bl	80016f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800151c:	4a06      	ldr	r2, [pc, #24]	@ (8001538 <HAL_InitTick+0x5c>)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001522:	2300      	movs	r3, #0
 8001524:	e000      	b.n	8001528 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
}
 8001528:	4618      	mov	r0, r3
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	20000000 	.word	0x20000000
 8001534:	20000008 	.word	0x20000008
 8001538:	20000004 	.word	0x20000004

0800153c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001540:	4b06      	ldr	r3, [pc, #24]	@ (800155c <HAL_IncTick+0x20>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	461a      	mov	r2, r3
 8001546:	4b06      	ldr	r3, [pc, #24]	@ (8001560 <HAL_IncTick+0x24>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4413      	add	r3, r2
 800154c:	4a04      	ldr	r2, [pc, #16]	@ (8001560 <HAL_IncTick+0x24>)
 800154e:	6013      	str	r3, [r2, #0]
}
 8001550:	bf00      	nop
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	20000008 	.word	0x20000008
 8001560:	20000134 	.word	0x20000134

08001564 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  return uwTick;
 8001568:	4b03      	ldr	r3, [pc, #12]	@ (8001578 <HAL_GetTick+0x14>)
 800156a:	681b      	ldr	r3, [r3, #0]
}
 800156c:	4618      	mov	r0, r3
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	20000134 	.word	0x20000134

0800157c <__NVIC_SetPriorityGrouping>:
{
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f003 0307 	and.w	r3, r3, #7
 800158a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800158c:	4b0c      	ldr	r3, [pc, #48]	@ (80015c0 <__NVIC_SetPriorityGrouping+0x44>)
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001592:	68ba      	ldr	r2, [r7, #8]
 8001594:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001598:	4013      	ands	r3, r2
 800159a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ae:	4a04      	ldr	r2, [pc, #16]	@ (80015c0 <__NVIC_SetPriorityGrouping+0x44>)
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	60d3      	str	r3, [r2, #12]
}
 80015b4:	bf00      	nop
 80015b6:	3714      	adds	r7, #20
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	e000ed00 	.word	0xe000ed00

080015c4 <__NVIC_GetPriorityGrouping>:
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015c8:	4b04      	ldr	r3, [pc, #16]	@ (80015dc <__NVIC_GetPriorityGrouping+0x18>)
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	0a1b      	lsrs	r3, r3, #8
 80015ce:	f003 0307 	and.w	r3, r3, #7
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	e000ed00 	.word	0xe000ed00

080015e0 <__NVIC_SetPriority>:
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	6039      	str	r1, [r7, #0]
 80015ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	db0a      	blt.n	800160a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	b2da      	uxtb	r2, r3
 80015f8:	490c      	ldr	r1, [pc, #48]	@ (800162c <__NVIC_SetPriority+0x4c>)
 80015fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fe:	0112      	lsls	r2, r2, #4
 8001600:	b2d2      	uxtb	r2, r2
 8001602:	440b      	add	r3, r1
 8001604:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001608:	e00a      	b.n	8001620 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	b2da      	uxtb	r2, r3
 800160e:	4908      	ldr	r1, [pc, #32]	@ (8001630 <__NVIC_SetPriority+0x50>)
 8001610:	79fb      	ldrb	r3, [r7, #7]
 8001612:	f003 030f 	and.w	r3, r3, #15
 8001616:	3b04      	subs	r3, #4
 8001618:	0112      	lsls	r2, r2, #4
 800161a:	b2d2      	uxtb	r2, r2
 800161c:	440b      	add	r3, r1
 800161e:	761a      	strb	r2, [r3, #24]
}
 8001620:	bf00      	nop
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr
 800162c:	e000e100 	.word	0xe000e100
 8001630:	e000ed00 	.word	0xe000ed00

08001634 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001634:	b480      	push	{r7}
 8001636:	b089      	sub	sp, #36	@ 0x24
 8001638:	af00      	add	r7, sp, #0
 800163a:	60f8      	str	r0, [r7, #12]
 800163c:	60b9      	str	r1, [r7, #8]
 800163e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f003 0307 	and.w	r3, r3, #7
 8001646:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	f1c3 0307 	rsb	r3, r3, #7
 800164e:	2b04      	cmp	r3, #4
 8001650:	bf28      	it	cs
 8001652:	2304      	movcs	r3, #4
 8001654:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	3304      	adds	r3, #4
 800165a:	2b06      	cmp	r3, #6
 800165c:	d902      	bls.n	8001664 <NVIC_EncodePriority+0x30>
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	3b03      	subs	r3, #3
 8001662:	e000      	b.n	8001666 <NVIC_EncodePriority+0x32>
 8001664:	2300      	movs	r3, #0
 8001666:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001668:	f04f 32ff 	mov.w	r2, #4294967295
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	fa02 f303 	lsl.w	r3, r2, r3
 8001672:	43da      	mvns	r2, r3
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	401a      	ands	r2, r3
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800167c:	f04f 31ff 	mov.w	r1, #4294967295
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	fa01 f303 	lsl.w	r3, r1, r3
 8001686:	43d9      	mvns	r1, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800168c:	4313      	orrs	r3, r2
         );
}
 800168e:	4618      	mov	r0, r3
 8001690:	3724      	adds	r7, #36	@ 0x24
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
	...

0800169c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	3b01      	subs	r3, #1
 80016a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016ac:	d301      	bcc.n	80016b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016ae:	2301      	movs	r3, #1
 80016b0:	e00f      	b.n	80016d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016b2:	4a0a      	ldr	r2, [pc, #40]	@ (80016dc <SysTick_Config+0x40>)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	3b01      	subs	r3, #1
 80016b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ba:	210f      	movs	r1, #15
 80016bc:	f04f 30ff 	mov.w	r0, #4294967295
 80016c0:	f7ff ff8e 	bl	80015e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016c4:	4b05      	ldr	r3, [pc, #20]	@ (80016dc <SysTick_Config+0x40>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ca:	4b04      	ldr	r3, [pc, #16]	@ (80016dc <SysTick_Config+0x40>)
 80016cc:	2207      	movs	r2, #7
 80016ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	e000e010 	.word	0xe000e010

080016e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f7ff ff47 	bl	800157c <__NVIC_SetPriorityGrouping>
}
 80016ee:	bf00      	nop
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b086      	sub	sp, #24
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	4603      	mov	r3, r0
 80016fe:	60b9      	str	r1, [r7, #8]
 8001700:	607a      	str	r2, [r7, #4]
 8001702:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001704:	2300      	movs	r3, #0
 8001706:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001708:	f7ff ff5c 	bl	80015c4 <__NVIC_GetPriorityGrouping>
 800170c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	68b9      	ldr	r1, [r7, #8]
 8001712:	6978      	ldr	r0, [r7, #20]
 8001714:	f7ff ff8e 	bl	8001634 <NVIC_EncodePriority>
 8001718:	4602      	mov	r2, r0
 800171a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800171e:	4611      	mov	r1, r2
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff ff5d 	bl	80015e0 <__NVIC_SetPriority>
}
 8001726:	bf00      	nop
 8001728:	3718      	adds	r7, #24
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b082      	sub	sp, #8
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f7ff ffb0 	bl	800169c <SysTick_Config>
 800173c:	4603      	mov	r3, r0
}
 800173e:	4618      	mov	r0, r3
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
	...

08001748 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d101      	bne.n	800175a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e267      	b.n	8001c2a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	2b00      	cmp	r3, #0
 8001764:	d075      	beq.n	8001852 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001766:	4b88      	ldr	r3, [pc, #544]	@ (8001988 <HAL_RCC_OscConfig+0x240>)
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	f003 030c 	and.w	r3, r3, #12
 800176e:	2b04      	cmp	r3, #4
 8001770:	d00c      	beq.n	800178c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001772:	4b85      	ldr	r3, [pc, #532]	@ (8001988 <HAL_RCC_OscConfig+0x240>)
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800177a:	2b08      	cmp	r3, #8
 800177c:	d112      	bne.n	80017a4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800177e:	4b82      	ldr	r3, [pc, #520]	@ (8001988 <HAL_RCC_OscConfig+0x240>)
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001786:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800178a:	d10b      	bne.n	80017a4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800178c:	4b7e      	ldr	r3, [pc, #504]	@ (8001988 <HAL_RCC_OscConfig+0x240>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d05b      	beq.n	8001850 <HAL_RCC_OscConfig+0x108>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d157      	bne.n	8001850 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e242      	b.n	8001c2a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017ac:	d106      	bne.n	80017bc <HAL_RCC_OscConfig+0x74>
 80017ae:	4b76      	ldr	r3, [pc, #472]	@ (8001988 <HAL_RCC_OscConfig+0x240>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a75      	ldr	r2, [pc, #468]	@ (8001988 <HAL_RCC_OscConfig+0x240>)
 80017b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017b8:	6013      	str	r3, [r2, #0]
 80017ba:	e01d      	b.n	80017f8 <HAL_RCC_OscConfig+0xb0>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80017c4:	d10c      	bne.n	80017e0 <HAL_RCC_OscConfig+0x98>
 80017c6:	4b70      	ldr	r3, [pc, #448]	@ (8001988 <HAL_RCC_OscConfig+0x240>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a6f      	ldr	r2, [pc, #444]	@ (8001988 <HAL_RCC_OscConfig+0x240>)
 80017cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017d0:	6013      	str	r3, [r2, #0]
 80017d2:	4b6d      	ldr	r3, [pc, #436]	@ (8001988 <HAL_RCC_OscConfig+0x240>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a6c      	ldr	r2, [pc, #432]	@ (8001988 <HAL_RCC_OscConfig+0x240>)
 80017d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017dc:	6013      	str	r3, [r2, #0]
 80017de:	e00b      	b.n	80017f8 <HAL_RCC_OscConfig+0xb0>
 80017e0:	4b69      	ldr	r3, [pc, #420]	@ (8001988 <HAL_RCC_OscConfig+0x240>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a68      	ldr	r2, [pc, #416]	@ (8001988 <HAL_RCC_OscConfig+0x240>)
 80017e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017ea:	6013      	str	r3, [r2, #0]
 80017ec:	4b66      	ldr	r3, [pc, #408]	@ (8001988 <HAL_RCC_OscConfig+0x240>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a65      	ldr	r2, [pc, #404]	@ (8001988 <HAL_RCC_OscConfig+0x240>)
 80017f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d013      	beq.n	8001828 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001800:	f7ff feb0 	bl	8001564 <HAL_GetTick>
 8001804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001806:	e008      	b.n	800181a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001808:	f7ff feac 	bl	8001564 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b64      	cmp	r3, #100	@ 0x64
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e207      	b.n	8001c2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800181a:	4b5b      	ldr	r3, [pc, #364]	@ (8001988 <HAL_RCC_OscConfig+0x240>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d0f0      	beq.n	8001808 <HAL_RCC_OscConfig+0xc0>
 8001826:	e014      	b.n	8001852 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001828:	f7ff fe9c 	bl	8001564 <HAL_GetTick>
 800182c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800182e:	e008      	b.n	8001842 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001830:	f7ff fe98 	bl	8001564 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2b64      	cmp	r3, #100	@ 0x64
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e1f3      	b.n	8001c2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001842:	4b51      	ldr	r3, [pc, #324]	@ (8001988 <HAL_RCC_OscConfig+0x240>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d1f0      	bne.n	8001830 <HAL_RCC_OscConfig+0xe8>
 800184e:	e000      	b.n	8001852 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001850:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d063      	beq.n	8001926 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800185e:	4b4a      	ldr	r3, [pc, #296]	@ (8001988 <HAL_RCC_OscConfig+0x240>)
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	f003 030c 	and.w	r3, r3, #12
 8001866:	2b00      	cmp	r3, #0
 8001868:	d00b      	beq.n	8001882 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800186a:	4b47      	ldr	r3, [pc, #284]	@ (8001988 <HAL_RCC_OscConfig+0x240>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001872:	2b08      	cmp	r3, #8
 8001874:	d11c      	bne.n	80018b0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001876:	4b44      	ldr	r3, [pc, #272]	@ (8001988 <HAL_RCC_OscConfig+0x240>)
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d116      	bne.n	80018b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001882:	4b41      	ldr	r3, [pc, #260]	@ (8001988 <HAL_RCC_OscConfig+0x240>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	2b00      	cmp	r3, #0
 800188c:	d005      	beq.n	800189a <HAL_RCC_OscConfig+0x152>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	68db      	ldr	r3, [r3, #12]
 8001892:	2b01      	cmp	r3, #1
 8001894:	d001      	beq.n	800189a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e1c7      	b.n	8001c2a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800189a:	4b3b      	ldr	r3, [pc, #236]	@ (8001988 <HAL_RCC_OscConfig+0x240>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	691b      	ldr	r3, [r3, #16]
 80018a6:	00db      	lsls	r3, r3, #3
 80018a8:	4937      	ldr	r1, [pc, #220]	@ (8001988 <HAL_RCC_OscConfig+0x240>)
 80018aa:	4313      	orrs	r3, r2
 80018ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ae:	e03a      	b.n	8001926 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d020      	beq.n	80018fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018b8:	4b34      	ldr	r3, [pc, #208]	@ (800198c <HAL_RCC_OscConfig+0x244>)
 80018ba:	2201      	movs	r2, #1
 80018bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018be:	f7ff fe51 	bl	8001564 <HAL_GetTick>
 80018c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018c4:	e008      	b.n	80018d8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018c6:	f7ff fe4d 	bl	8001564 <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d901      	bls.n	80018d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e1a8      	b.n	8001c2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018d8:	4b2b      	ldr	r3, [pc, #172]	@ (8001988 <HAL_RCC_OscConfig+0x240>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0302 	and.w	r3, r3, #2
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d0f0      	beq.n	80018c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018e4:	4b28      	ldr	r3, [pc, #160]	@ (8001988 <HAL_RCC_OscConfig+0x240>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	691b      	ldr	r3, [r3, #16]
 80018f0:	00db      	lsls	r3, r3, #3
 80018f2:	4925      	ldr	r1, [pc, #148]	@ (8001988 <HAL_RCC_OscConfig+0x240>)
 80018f4:	4313      	orrs	r3, r2
 80018f6:	600b      	str	r3, [r1, #0]
 80018f8:	e015      	b.n	8001926 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018fa:	4b24      	ldr	r3, [pc, #144]	@ (800198c <HAL_RCC_OscConfig+0x244>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001900:	f7ff fe30 	bl	8001564 <HAL_GetTick>
 8001904:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001906:	e008      	b.n	800191a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001908:	f7ff fe2c 	bl	8001564 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b02      	cmp	r3, #2
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e187      	b.n	8001c2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800191a:	4b1b      	ldr	r3, [pc, #108]	@ (8001988 <HAL_RCC_OscConfig+0x240>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d1f0      	bne.n	8001908 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0308 	and.w	r3, r3, #8
 800192e:	2b00      	cmp	r3, #0
 8001930:	d036      	beq.n	80019a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	695b      	ldr	r3, [r3, #20]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d016      	beq.n	8001968 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800193a:	4b15      	ldr	r3, [pc, #84]	@ (8001990 <HAL_RCC_OscConfig+0x248>)
 800193c:	2201      	movs	r2, #1
 800193e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001940:	f7ff fe10 	bl	8001564 <HAL_GetTick>
 8001944:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001946:	e008      	b.n	800195a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001948:	f7ff fe0c 	bl	8001564 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b02      	cmp	r3, #2
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e167      	b.n	8001c2a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800195a:	4b0b      	ldr	r3, [pc, #44]	@ (8001988 <HAL_RCC_OscConfig+0x240>)
 800195c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	2b00      	cmp	r3, #0
 8001964:	d0f0      	beq.n	8001948 <HAL_RCC_OscConfig+0x200>
 8001966:	e01b      	b.n	80019a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001968:	4b09      	ldr	r3, [pc, #36]	@ (8001990 <HAL_RCC_OscConfig+0x248>)
 800196a:	2200      	movs	r2, #0
 800196c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800196e:	f7ff fdf9 	bl	8001564 <HAL_GetTick>
 8001972:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001974:	e00e      	b.n	8001994 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001976:	f7ff fdf5 	bl	8001564 <HAL_GetTick>
 800197a:	4602      	mov	r2, r0
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	2b02      	cmp	r3, #2
 8001982:	d907      	bls.n	8001994 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001984:	2303      	movs	r3, #3
 8001986:	e150      	b.n	8001c2a <HAL_RCC_OscConfig+0x4e2>
 8001988:	40023800 	.word	0x40023800
 800198c:	42470000 	.word	0x42470000
 8001990:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001994:	4b88      	ldr	r3, [pc, #544]	@ (8001bb8 <HAL_RCC_OscConfig+0x470>)
 8001996:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001998:	f003 0302 	and.w	r3, r3, #2
 800199c:	2b00      	cmp	r3, #0
 800199e:	d1ea      	bne.n	8001976 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0304 	and.w	r3, r3, #4
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	f000 8097 	beq.w	8001adc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019ae:	2300      	movs	r3, #0
 80019b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019b2:	4b81      	ldr	r3, [pc, #516]	@ (8001bb8 <HAL_RCC_OscConfig+0x470>)
 80019b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d10f      	bne.n	80019de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019be:	2300      	movs	r3, #0
 80019c0:	60bb      	str	r3, [r7, #8]
 80019c2:	4b7d      	ldr	r3, [pc, #500]	@ (8001bb8 <HAL_RCC_OscConfig+0x470>)
 80019c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c6:	4a7c      	ldr	r2, [pc, #496]	@ (8001bb8 <HAL_RCC_OscConfig+0x470>)
 80019c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80019ce:	4b7a      	ldr	r3, [pc, #488]	@ (8001bb8 <HAL_RCC_OscConfig+0x470>)
 80019d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019d6:	60bb      	str	r3, [r7, #8]
 80019d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019da:	2301      	movs	r3, #1
 80019dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019de:	4b77      	ldr	r3, [pc, #476]	@ (8001bbc <HAL_RCC_OscConfig+0x474>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d118      	bne.n	8001a1c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019ea:	4b74      	ldr	r3, [pc, #464]	@ (8001bbc <HAL_RCC_OscConfig+0x474>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a73      	ldr	r2, [pc, #460]	@ (8001bbc <HAL_RCC_OscConfig+0x474>)
 80019f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019f6:	f7ff fdb5 	bl	8001564 <HAL_GetTick>
 80019fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019fc:	e008      	b.n	8001a10 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019fe:	f7ff fdb1 	bl	8001564 <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d901      	bls.n	8001a10 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	e10c      	b.n	8001c2a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a10:	4b6a      	ldr	r3, [pc, #424]	@ (8001bbc <HAL_RCC_OscConfig+0x474>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d0f0      	beq.n	80019fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d106      	bne.n	8001a32 <HAL_RCC_OscConfig+0x2ea>
 8001a24:	4b64      	ldr	r3, [pc, #400]	@ (8001bb8 <HAL_RCC_OscConfig+0x470>)
 8001a26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a28:	4a63      	ldr	r2, [pc, #396]	@ (8001bb8 <HAL_RCC_OscConfig+0x470>)
 8001a2a:	f043 0301 	orr.w	r3, r3, #1
 8001a2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a30:	e01c      	b.n	8001a6c <HAL_RCC_OscConfig+0x324>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	2b05      	cmp	r3, #5
 8001a38:	d10c      	bne.n	8001a54 <HAL_RCC_OscConfig+0x30c>
 8001a3a:	4b5f      	ldr	r3, [pc, #380]	@ (8001bb8 <HAL_RCC_OscConfig+0x470>)
 8001a3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a3e:	4a5e      	ldr	r2, [pc, #376]	@ (8001bb8 <HAL_RCC_OscConfig+0x470>)
 8001a40:	f043 0304 	orr.w	r3, r3, #4
 8001a44:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a46:	4b5c      	ldr	r3, [pc, #368]	@ (8001bb8 <HAL_RCC_OscConfig+0x470>)
 8001a48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a4a:	4a5b      	ldr	r2, [pc, #364]	@ (8001bb8 <HAL_RCC_OscConfig+0x470>)
 8001a4c:	f043 0301 	orr.w	r3, r3, #1
 8001a50:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a52:	e00b      	b.n	8001a6c <HAL_RCC_OscConfig+0x324>
 8001a54:	4b58      	ldr	r3, [pc, #352]	@ (8001bb8 <HAL_RCC_OscConfig+0x470>)
 8001a56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a58:	4a57      	ldr	r2, [pc, #348]	@ (8001bb8 <HAL_RCC_OscConfig+0x470>)
 8001a5a:	f023 0301 	bic.w	r3, r3, #1
 8001a5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a60:	4b55      	ldr	r3, [pc, #340]	@ (8001bb8 <HAL_RCC_OscConfig+0x470>)
 8001a62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a64:	4a54      	ldr	r2, [pc, #336]	@ (8001bb8 <HAL_RCC_OscConfig+0x470>)
 8001a66:	f023 0304 	bic.w	r3, r3, #4
 8001a6a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d015      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a74:	f7ff fd76 	bl	8001564 <HAL_GetTick>
 8001a78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a7a:	e00a      	b.n	8001a92 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a7c:	f7ff fd72 	bl	8001564 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e0cb      	b.n	8001c2a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a92:	4b49      	ldr	r3, [pc, #292]	@ (8001bb8 <HAL_RCC_OscConfig+0x470>)
 8001a94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d0ee      	beq.n	8001a7c <HAL_RCC_OscConfig+0x334>
 8001a9e:	e014      	b.n	8001aca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aa0:	f7ff fd60 	bl	8001564 <HAL_GetTick>
 8001aa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aa6:	e00a      	b.n	8001abe <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aa8:	f7ff fd5c 	bl	8001564 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e0b5      	b.n	8001c2a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001abe:	4b3e      	ldr	r3, [pc, #248]	@ (8001bb8 <HAL_RCC_OscConfig+0x470>)
 8001ac0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d1ee      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001aca:	7dfb      	ldrb	r3, [r7, #23]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d105      	bne.n	8001adc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ad0:	4b39      	ldr	r3, [pc, #228]	@ (8001bb8 <HAL_RCC_OscConfig+0x470>)
 8001ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad4:	4a38      	ldr	r2, [pc, #224]	@ (8001bb8 <HAL_RCC_OscConfig+0x470>)
 8001ad6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ada:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	699b      	ldr	r3, [r3, #24]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	f000 80a1 	beq.w	8001c28 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ae6:	4b34      	ldr	r3, [pc, #208]	@ (8001bb8 <HAL_RCC_OscConfig+0x470>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f003 030c 	and.w	r3, r3, #12
 8001aee:	2b08      	cmp	r3, #8
 8001af0:	d05c      	beq.n	8001bac <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	699b      	ldr	r3, [r3, #24]
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d141      	bne.n	8001b7e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001afa:	4b31      	ldr	r3, [pc, #196]	@ (8001bc0 <HAL_RCC_OscConfig+0x478>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b00:	f7ff fd30 	bl	8001564 <HAL_GetTick>
 8001b04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b06:	e008      	b.n	8001b1a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b08:	f7ff fd2c 	bl	8001564 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e087      	b.n	8001c2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b1a:	4b27      	ldr	r3, [pc, #156]	@ (8001bb8 <HAL_RCC_OscConfig+0x470>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d1f0      	bne.n	8001b08 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	69da      	ldr	r2, [r3, #28]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6a1b      	ldr	r3, [r3, #32]
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b34:	019b      	lsls	r3, r3, #6
 8001b36:	431a      	orrs	r2, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b3c:	085b      	lsrs	r3, r3, #1
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	041b      	lsls	r3, r3, #16
 8001b42:	431a      	orrs	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b48:	061b      	lsls	r3, r3, #24
 8001b4a:	491b      	ldr	r1, [pc, #108]	@ (8001bb8 <HAL_RCC_OscConfig+0x470>)
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b50:	4b1b      	ldr	r3, [pc, #108]	@ (8001bc0 <HAL_RCC_OscConfig+0x478>)
 8001b52:	2201      	movs	r2, #1
 8001b54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b56:	f7ff fd05 	bl	8001564 <HAL_GetTick>
 8001b5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b5c:	e008      	b.n	8001b70 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b5e:	f7ff fd01 	bl	8001564 <HAL_GetTick>
 8001b62:	4602      	mov	r2, r0
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d901      	bls.n	8001b70 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	e05c      	b.n	8001c2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b70:	4b11      	ldr	r3, [pc, #68]	@ (8001bb8 <HAL_RCC_OscConfig+0x470>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d0f0      	beq.n	8001b5e <HAL_RCC_OscConfig+0x416>
 8001b7c:	e054      	b.n	8001c28 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b7e:	4b10      	ldr	r3, [pc, #64]	@ (8001bc0 <HAL_RCC_OscConfig+0x478>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b84:	f7ff fcee 	bl	8001564 <HAL_GetTick>
 8001b88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b8a:	e008      	b.n	8001b9e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b8c:	f7ff fcea 	bl	8001564 <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e045      	b.n	8001c2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b9e:	4b06      	ldr	r3, [pc, #24]	@ (8001bb8 <HAL_RCC_OscConfig+0x470>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d1f0      	bne.n	8001b8c <HAL_RCC_OscConfig+0x444>
 8001baa:	e03d      	b.n	8001c28 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d107      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e038      	b.n	8001c2a <HAL_RCC_OscConfig+0x4e2>
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	40007000 	.word	0x40007000
 8001bc0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001bc4:	4b1b      	ldr	r3, [pc, #108]	@ (8001c34 <HAL_RCC_OscConfig+0x4ec>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	699b      	ldr	r3, [r3, #24]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d028      	beq.n	8001c24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d121      	bne.n	8001c24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d11a      	bne.n	8001c24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bee:	68fa      	ldr	r2, [r7, #12]
 8001bf0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001bfa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d111      	bne.n	8001c24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c0a:	085b      	lsrs	r3, r3, #1
 8001c0c:	3b01      	subs	r3, #1
 8001c0e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d107      	bne.n	8001c24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c1e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d001      	beq.n	8001c28 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e000      	b.n	8001c2a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3718      	adds	r7, #24
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40023800 	.word	0x40023800

08001c38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d101      	bne.n	8001c4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e0cc      	b.n	8001de6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c4c:	4b68      	ldr	r3, [pc, #416]	@ (8001df0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0307 	and.w	r3, r3, #7
 8001c54:	683a      	ldr	r2, [r7, #0]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d90c      	bls.n	8001c74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c5a:	4b65      	ldr	r3, [pc, #404]	@ (8001df0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c5c:	683a      	ldr	r2, [r7, #0]
 8001c5e:	b2d2      	uxtb	r2, r2
 8001c60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c62:	4b63      	ldr	r3, [pc, #396]	@ (8001df0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0307 	and.w	r3, r3, #7
 8001c6a:	683a      	ldr	r2, [r7, #0]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d001      	beq.n	8001c74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e0b8      	b.n	8001de6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d020      	beq.n	8001cc2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0304 	and.w	r3, r3, #4
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d005      	beq.n	8001c98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c8c:	4b59      	ldr	r3, [pc, #356]	@ (8001df4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	4a58      	ldr	r2, [pc, #352]	@ (8001df4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c92:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001c96:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0308 	and.w	r3, r3, #8
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d005      	beq.n	8001cb0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ca4:	4b53      	ldr	r3, [pc, #332]	@ (8001df4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	4a52      	ldr	r2, [pc, #328]	@ (8001df4 <HAL_RCC_ClockConfig+0x1bc>)
 8001caa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001cae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cb0:	4b50      	ldr	r3, [pc, #320]	@ (8001df4 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	494d      	ldr	r1, [pc, #308]	@ (8001df4 <HAL_RCC_ClockConfig+0x1bc>)
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d044      	beq.n	8001d58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d107      	bne.n	8001ce6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cd6:	4b47      	ldr	r3, [pc, #284]	@ (8001df4 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d119      	bne.n	8001d16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e07f      	b.n	8001de6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d003      	beq.n	8001cf6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cf2:	2b03      	cmp	r3, #3
 8001cf4:	d107      	bne.n	8001d06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cf6:	4b3f      	ldr	r3, [pc, #252]	@ (8001df4 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d109      	bne.n	8001d16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e06f      	b.n	8001de6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d06:	4b3b      	ldr	r3, [pc, #236]	@ (8001df4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d101      	bne.n	8001d16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e067      	b.n	8001de6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d16:	4b37      	ldr	r3, [pc, #220]	@ (8001df4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f023 0203 	bic.w	r2, r3, #3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	4934      	ldr	r1, [pc, #208]	@ (8001df4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d24:	4313      	orrs	r3, r2
 8001d26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d28:	f7ff fc1c 	bl	8001564 <HAL_GetTick>
 8001d2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d2e:	e00a      	b.n	8001d46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d30:	f7ff fc18 	bl	8001564 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e04f      	b.n	8001de6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d46:	4b2b      	ldr	r3, [pc, #172]	@ (8001df4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f003 020c 	and.w	r2, r3, #12
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d1eb      	bne.n	8001d30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d58:	4b25      	ldr	r3, [pc, #148]	@ (8001df0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0307 	and.w	r3, r3, #7
 8001d60:	683a      	ldr	r2, [r7, #0]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d20c      	bcs.n	8001d80 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d66:	4b22      	ldr	r3, [pc, #136]	@ (8001df0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d68:	683a      	ldr	r2, [r7, #0]
 8001d6a:	b2d2      	uxtb	r2, r2
 8001d6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d6e:	4b20      	ldr	r3, [pc, #128]	@ (8001df0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0307 	and.w	r3, r3, #7
 8001d76:	683a      	ldr	r2, [r7, #0]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d001      	beq.n	8001d80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e032      	b.n	8001de6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0304 	and.w	r3, r3, #4
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d008      	beq.n	8001d9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d8c:	4b19      	ldr	r3, [pc, #100]	@ (8001df4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	4916      	ldr	r1, [pc, #88]	@ (8001df4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0308 	and.w	r3, r3, #8
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d009      	beq.n	8001dbe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001daa:	4b12      	ldr	r3, [pc, #72]	@ (8001df4 <HAL_RCC_ClockConfig+0x1bc>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	00db      	lsls	r3, r3, #3
 8001db8:	490e      	ldr	r1, [pc, #56]	@ (8001df4 <HAL_RCC_ClockConfig+0x1bc>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001dbe:	f000 f821 	bl	8001e04 <HAL_RCC_GetSysClockFreq>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	4b0b      	ldr	r3, [pc, #44]	@ (8001df4 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	091b      	lsrs	r3, r3, #4
 8001dca:	f003 030f 	and.w	r3, r3, #15
 8001dce:	490a      	ldr	r1, [pc, #40]	@ (8001df8 <HAL_RCC_ClockConfig+0x1c0>)
 8001dd0:	5ccb      	ldrb	r3, [r1, r3]
 8001dd2:	fa22 f303 	lsr.w	r3, r2, r3
 8001dd6:	4a09      	ldr	r2, [pc, #36]	@ (8001dfc <HAL_RCC_ClockConfig+0x1c4>)
 8001dd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001dda:	4b09      	ldr	r3, [pc, #36]	@ (8001e00 <HAL_RCC_ClockConfig+0x1c8>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff fb7c 	bl	80014dc <HAL_InitTick>

  return HAL_OK;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	40023c00 	.word	0x40023c00
 8001df4:	40023800 	.word	0x40023800
 8001df8:	0800252c 	.word	0x0800252c
 8001dfc:	20000000 	.word	0x20000000
 8001e00:	20000004 	.word	0x20000004

08001e04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e08:	b090      	sub	sp, #64	@ 0x40
 8001e0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001e10:	2300      	movs	r3, #0
 8001e12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001e14:	2300      	movs	r3, #0
 8001e16:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e1c:	4b59      	ldr	r3, [pc, #356]	@ (8001f84 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f003 030c 	and.w	r3, r3, #12
 8001e24:	2b08      	cmp	r3, #8
 8001e26:	d00d      	beq.n	8001e44 <HAL_RCC_GetSysClockFreq+0x40>
 8001e28:	2b08      	cmp	r3, #8
 8001e2a:	f200 80a1 	bhi.w	8001f70 <HAL_RCC_GetSysClockFreq+0x16c>
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d002      	beq.n	8001e38 <HAL_RCC_GetSysClockFreq+0x34>
 8001e32:	2b04      	cmp	r3, #4
 8001e34:	d003      	beq.n	8001e3e <HAL_RCC_GetSysClockFreq+0x3a>
 8001e36:	e09b      	b.n	8001f70 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e38:	4b53      	ldr	r3, [pc, #332]	@ (8001f88 <HAL_RCC_GetSysClockFreq+0x184>)
 8001e3a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001e3c:	e09b      	b.n	8001f76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e3e:	4b53      	ldr	r3, [pc, #332]	@ (8001f8c <HAL_RCC_GetSysClockFreq+0x188>)
 8001e40:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001e42:	e098      	b.n	8001f76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e44:	4b4f      	ldr	r3, [pc, #316]	@ (8001f84 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001e4c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e4e:	4b4d      	ldr	r3, [pc, #308]	@ (8001f84 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d028      	beq.n	8001eac <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e5a:	4b4a      	ldr	r3, [pc, #296]	@ (8001f84 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	099b      	lsrs	r3, r3, #6
 8001e60:	2200      	movs	r2, #0
 8001e62:	623b      	str	r3, [r7, #32]
 8001e64:	627a      	str	r2, [r7, #36]	@ 0x24
 8001e66:	6a3b      	ldr	r3, [r7, #32]
 8001e68:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	4b47      	ldr	r3, [pc, #284]	@ (8001f8c <HAL_RCC_GetSysClockFreq+0x188>)
 8001e70:	fb03 f201 	mul.w	r2, r3, r1
 8001e74:	2300      	movs	r3, #0
 8001e76:	fb00 f303 	mul.w	r3, r0, r3
 8001e7a:	4413      	add	r3, r2
 8001e7c:	4a43      	ldr	r2, [pc, #268]	@ (8001f8c <HAL_RCC_GetSysClockFreq+0x188>)
 8001e7e:	fba0 1202 	umull	r1, r2, r0, r2
 8001e82:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001e84:	460a      	mov	r2, r1
 8001e86:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001e88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001e8a:	4413      	add	r3, r2
 8001e8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e90:	2200      	movs	r2, #0
 8001e92:	61bb      	str	r3, [r7, #24]
 8001e94:	61fa      	str	r2, [r7, #28]
 8001e96:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e9a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001e9e:	f7fe f9a1 	bl	80001e4 <__aeabi_uldivmod>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001eaa:	e053      	b.n	8001f54 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001eac:	4b35      	ldr	r3, [pc, #212]	@ (8001f84 <HAL_RCC_GetSysClockFreq+0x180>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	099b      	lsrs	r3, r3, #6
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	613b      	str	r3, [r7, #16]
 8001eb6:	617a      	str	r2, [r7, #20]
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001ebe:	f04f 0b00 	mov.w	fp, #0
 8001ec2:	4652      	mov	r2, sl
 8001ec4:	465b      	mov	r3, fp
 8001ec6:	f04f 0000 	mov.w	r0, #0
 8001eca:	f04f 0100 	mov.w	r1, #0
 8001ece:	0159      	lsls	r1, r3, #5
 8001ed0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ed4:	0150      	lsls	r0, r2, #5
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	460b      	mov	r3, r1
 8001eda:	ebb2 080a 	subs.w	r8, r2, sl
 8001ede:	eb63 090b 	sbc.w	r9, r3, fp
 8001ee2:	f04f 0200 	mov.w	r2, #0
 8001ee6:	f04f 0300 	mov.w	r3, #0
 8001eea:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001eee:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001ef2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001ef6:	ebb2 0408 	subs.w	r4, r2, r8
 8001efa:	eb63 0509 	sbc.w	r5, r3, r9
 8001efe:	f04f 0200 	mov.w	r2, #0
 8001f02:	f04f 0300 	mov.w	r3, #0
 8001f06:	00eb      	lsls	r3, r5, #3
 8001f08:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f0c:	00e2      	lsls	r2, r4, #3
 8001f0e:	4614      	mov	r4, r2
 8001f10:	461d      	mov	r5, r3
 8001f12:	eb14 030a 	adds.w	r3, r4, sl
 8001f16:	603b      	str	r3, [r7, #0]
 8001f18:	eb45 030b 	adc.w	r3, r5, fp
 8001f1c:	607b      	str	r3, [r7, #4]
 8001f1e:	f04f 0200 	mov.w	r2, #0
 8001f22:	f04f 0300 	mov.w	r3, #0
 8001f26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f2a:	4629      	mov	r1, r5
 8001f2c:	028b      	lsls	r3, r1, #10
 8001f2e:	4621      	mov	r1, r4
 8001f30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f34:	4621      	mov	r1, r4
 8001f36:	028a      	lsls	r2, r1, #10
 8001f38:	4610      	mov	r0, r2
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f3e:	2200      	movs	r2, #0
 8001f40:	60bb      	str	r3, [r7, #8]
 8001f42:	60fa      	str	r2, [r7, #12]
 8001f44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f48:	f7fe f94c 	bl	80001e4 <__aeabi_uldivmod>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	460b      	mov	r3, r1
 8001f50:	4613      	mov	r3, r2
 8001f52:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001f54:	4b0b      	ldr	r3, [pc, #44]	@ (8001f84 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	0c1b      	lsrs	r3, r3, #16
 8001f5a:	f003 0303 	and.w	r3, r3, #3
 8001f5e:	3301      	adds	r3, #1
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001f64:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f6c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001f6e:	e002      	b.n	8001f76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f70:	4b05      	ldr	r3, [pc, #20]	@ (8001f88 <HAL_RCC_GetSysClockFreq+0x184>)
 8001f72:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001f74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3740      	adds	r7, #64	@ 0x40
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f82:	bf00      	nop
 8001f84:	40023800 	.word	0x40023800
 8001f88:	00f42400 	.word	0x00f42400
 8001f8c:	017d7840 	.word	0x017d7840

08001f90 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 8001f90:	b10a      	cbz	r2, 8001f96 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 8001f92:	f000 ba4d 	b.w	8002430 <memcpy>
 8001f96:	4770      	bx	lr

08001f98 <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
 8001f98:	b10a      	cbz	r2, 8001f9e <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6>
 8001f9a:	f000 b9b1 	b.w	8002300 <memcmp>
 8001f9e:	4610      	mov	r0, r2
 8001fa0:	4770      	bx	lr

08001fa2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_S_allocateERS3_j>:
 8001fa2:	1e08      	subs	r0, r1, #0
 8001fa4:	b508      	push	{r3, lr}
 8001fa6:	da01      	bge.n	8001fac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_S_allocateERS3_j+0xa>
 8001fa8:	f000 f8d3 	bl	8002152 <_ZSt17__throw_bad_allocv>
 8001fac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001fb0:	f000 b8be 	b.w	8002130 <_Znwj>

08001fb4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>:
 8001fb4:	f850 3b08 	ldr.w	r3, [r0], #8
 8001fb8:	1a1b      	subs	r3, r3, r0
 8001fba:	4258      	negs	r0, r3
 8001fbc:	4158      	adcs	r0, r3
 8001fbe:	4770      	bx	lr

08001fc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8001fc0:	680b      	ldr	r3, [r1, #0]
 8001fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fc6:	b510      	push	{r4, lr}
 8001fc8:	d302      	bcc.n	8001fd0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8001fca:	480b      	ldr	r0, [pc, #44]	@ (8001ff8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x38>)
 8001fcc:	f000 f8c7 	bl	800215e <_ZSt20__throw_length_errorPKc>
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d90b      	bls.n	8001fec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8001fd4:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8001fd8:	ea4f 0442 	mov.w	r4, r2, lsl #1
 8001fdc:	d206      	bcs.n	8001fec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8001fde:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8001fe2:	bf2a      	itet	cs
 8001fe4:	f06f 4340 	mvncs.w	r3, #3221225472	@ 0xc0000000
 8001fe8:	600c      	strcc	r4, [r1, #0]
 8001fea:	600b      	strcs	r3, [r1, #0]
 8001fec:	6809      	ldr	r1, [r1, #0]
 8001fee:	3101      	adds	r1, #1
 8001ff0:	f7ff ffd7 	bl	8001fa2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_S_allocateERS3_j>
 8001ff4:	bd10      	pop	{r4, pc}
 8001ff6:	bf00      	nop
 8001ff8:	0800253c 	.word	0x0800253c

08001ffc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_destroyEj>:
 8001ffc:	6800      	ldr	r0, [r0, #0]
 8001ffe:	f000 b895 	b.w	800212c <_ZdlPv>

08002002 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8002002:	b510      	push	{r4, lr}
 8002004:	4604      	mov	r4, r0
 8002006:	f7ff ffd5 	bl	8001fb4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 800200a:	b918      	cbnz	r0, 8002014 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x12>
 800200c:	68a1      	ldr	r1, [r4, #8]
 800200e:	4620      	mov	r0, r4
 8002010:	f7ff fff4 	bl	8001ffc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_destroyEj>
 8002014:	bd10      	pop	{r4, pc}

08002016 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8002016:	2a01      	cmp	r2, #1
 8002018:	b410      	push	{r4}
 800201a:	d104      	bne.n	8002026 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 800201c:	780a      	ldrb	r2, [r1, #0]
 800201e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002022:	7002      	strb	r2, [r0, #0]
 8002024:	4770      	bx	lr
 8002026:	f85d 4b04 	ldr.w	r4, [sp], #4
 800202a:	f7ff bfb1 	b.w	8001f90 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

0800202e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 800202e:	b508      	push	{r3, lr}
 8002030:	1a52      	subs	r2, r2, r1
 8002032:	f7ff fff0 	bl	8002016 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8002036:	bd08      	pop	{r3, pc}

08002038 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8002038:	b508      	push	{r3, lr}
 800203a:	1a52      	subs	r2, r2, r1
 800203c:	f7ff ffeb 	bl	8002016 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8002040:	bd08      	pop	{r3, pc}

08002042 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8002042:	b510      	push	{r4, lr}
 8002044:	4604      	mov	r4, r0
 8002046:	f7ff ffdc 	bl	8002002 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800204a:	4620      	mov	r0, r4
 800204c:	bd10      	pop	{r4, pc}

0800204e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>:
 800204e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002050:	6847      	ldr	r7, [r0, #4]
 8002052:	4605      	mov	r5, r0
 8002054:	4608      	mov	r0, r1
 8002056:	460e      	mov	r6, r1
 8002058:	f7fe f8bc 	bl	80001d4 <strlen>
 800205c:	4287      	cmp	r7, r0
 800205e:	4604      	mov	r4, r0
 8002060:	463a      	mov	r2, r7
 8002062:	4631      	mov	r1, r6
 8002064:	bf28      	it	cs
 8002066:	4602      	movcs	r2, r0
 8002068:	6828      	ldr	r0, [r5, #0]
 800206a:	f7ff ff95 	bl	8001f98 <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 800206e:	b900      	cbnz	r0, 8002072 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc+0x24>
 8002070:	1b38      	subs	r0, r7, r4
 8002072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002074 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 8002074:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002076:	1a53      	subs	r3, r2, r1
 8002078:	2b0f      	cmp	r3, #15
 800207a:	4604      	mov	r4, r0
 800207c:	460d      	mov	r5, r1
 800207e:	4616      	mov	r6, r2
 8002080:	9301      	str	r3, [sp, #4]
 8002082:	d906      	bls.n	8002092 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x1e>
 8002084:	2200      	movs	r2, #0
 8002086:	a901      	add	r1, sp, #4
 8002088:	f7ff ff9a 	bl	8001fc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800208c:	9b01      	ldr	r3, [sp, #4]
 800208e:	6020      	str	r0, [r4, #0]
 8002090:	60a3      	str	r3, [r4, #8]
 8002092:	4632      	mov	r2, r6
 8002094:	4629      	mov	r1, r5
 8002096:	6820      	ldr	r0, [r4, #0]
 8002098:	f7ff ffc9 	bl	800202e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 800209c:	9b01      	ldr	r3, [sp, #4]
 800209e:	6822      	ldr	r2, [r4, #0]
 80020a0:	6063      	str	r3, [r4, #4]
 80020a2:	2100      	movs	r1, #0
 80020a4:	54d1      	strb	r1, [r2, r3]
 80020a6:	b002      	add	sp, #8
 80020a8:	bd70      	pop	{r4, r5, r6, pc}

080020aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 80020aa:	f100 0208 	add.w	r2, r0, #8
 80020ae:	b510      	push	{r4, lr}
 80020b0:	6002      	str	r2, [r0, #0]
 80020b2:	e9d1 1200 	ldrd	r1, r2, [r1]
 80020b6:	4604      	mov	r4, r0
 80020b8:	f04f 0300 	mov.w	r3, #0
 80020bc:	440a      	add	r2, r1
 80020be:	f7ff ffd9 	bl	8002074 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 80020c2:	4620      	mov	r0, r4
 80020c4:	bd10      	pop	{r4, pc}

080020c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 80020c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80020c8:	1a53      	subs	r3, r2, r1
 80020ca:	2b0f      	cmp	r3, #15
 80020cc:	4604      	mov	r4, r0
 80020ce:	460d      	mov	r5, r1
 80020d0:	4616      	mov	r6, r2
 80020d2:	9301      	str	r3, [sp, #4]
 80020d4:	d906      	bls.n	80020e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x1e>
 80020d6:	2200      	movs	r2, #0
 80020d8:	a901      	add	r1, sp, #4
 80020da:	f7ff ff71 	bl	8001fc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80020de:	9b01      	ldr	r3, [sp, #4]
 80020e0:	6020      	str	r0, [r4, #0]
 80020e2:	60a3      	str	r3, [r4, #8]
 80020e4:	4632      	mov	r2, r6
 80020e6:	4629      	mov	r1, r5
 80020e8:	6820      	ldr	r0, [r4, #0]
 80020ea:	f7ff ffa5 	bl	8002038 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 80020ee:	9b01      	ldr	r3, [sp, #4]
 80020f0:	6822      	ldr	r2, [r4, #0]
 80020f2:	6063      	str	r3, [r4, #4]
 80020f4:	2100      	movs	r1, #0
 80020f6:	54d1      	strb	r1, [r2, r3]
 80020f8:	b002      	add	sp, #8
 80020fa:	bd70      	pop	{r4, r5, r6, pc}

080020fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 80020fc:	b538      	push	{r3, r4, r5, lr}
 80020fe:	f100 0308 	add.w	r3, r0, #8
 8002102:	4604      	mov	r4, r0
 8002104:	6003      	str	r3, [r0, #0]
 8002106:	460d      	mov	r5, r1
 8002108:	b911      	cbnz	r1, 8002110 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x14>
 800210a:	4807      	ldr	r0, [pc, #28]	@ (8002128 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x2c>)
 800210c:	f000 f824 	bl	8002158 <_ZSt19__throw_logic_errorPKc>
 8002110:	4608      	mov	r0, r1
 8002112:	f7fe f85f 	bl	80001d4 <strlen>
 8002116:	f04f 0300 	mov.w	r3, #0
 800211a:	182a      	adds	r2, r5, r0
 800211c:	4629      	mov	r1, r5
 800211e:	4620      	mov	r0, r4
 8002120:	f7ff ffd1 	bl	80020c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8002124:	4620      	mov	r0, r4
 8002126:	bd38      	pop	{r3, r4, r5, pc}
 8002128:	08002554 	.word	0x08002554

0800212c <_ZdlPv>:
 800212c:	f000 b832 	b.w	8002194 <free>

08002130 <_Znwj>:
 8002130:	2801      	cmp	r0, #1
 8002132:	bf38      	it	cc
 8002134:	2001      	movcc	r0, #1
 8002136:	b510      	push	{r4, lr}
 8002138:	4604      	mov	r4, r0
 800213a:	4620      	mov	r0, r4
 800213c:	f000 f822 	bl	8002184 <malloc>
 8002140:	b100      	cbz	r0, 8002144 <_Znwj+0x14>
 8002142:	bd10      	pop	{r4, pc}
 8002144:	f000 f80e 	bl	8002164 <_ZSt15get_new_handlerv>
 8002148:	b908      	cbnz	r0, 800214e <_Znwj+0x1e>
 800214a:	f000 f813 	bl	8002174 <abort>
 800214e:	4780      	blx	r0
 8002150:	e7f3      	b.n	800213a <_Znwj+0xa>

08002152 <_ZSt17__throw_bad_allocv>:
 8002152:	b508      	push	{r3, lr}
 8002154:	f000 f80e 	bl	8002174 <abort>

08002158 <_ZSt19__throw_logic_errorPKc>:
 8002158:	b508      	push	{r3, lr}
 800215a:	f000 f80b 	bl	8002174 <abort>

0800215e <_ZSt20__throw_length_errorPKc>:
 800215e:	b508      	push	{r3, lr}
 8002160:	f000 f808 	bl	8002174 <abort>

08002164 <_ZSt15get_new_handlerv>:
 8002164:	4b02      	ldr	r3, [pc, #8]	@ (8002170 <_ZSt15get_new_handlerv+0xc>)
 8002166:	6818      	ldr	r0, [r3, #0]
 8002168:	f3bf 8f5b 	dmb	ish
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	20000138 	.word	0x20000138

08002174 <abort>:
 8002174:	b508      	push	{r3, lr}
 8002176:	2006      	movs	r0, #6
 8002178:	f000 f902 	bl	8002380 <raise>
 800217c:	2001      	movs	r0, #1
 800217e:	f7ff f90e 	bl	800139e <_exit>
	...

08002184 <malloc>:
 8002184:	4b02      	ldr	r3, [pc, #8]	@ (8002190 <malloc+0xc>)
 8002186:	4601      	mov	r1, r0
 8002188:	6818      	ldr	r0, [r3, #0]
 800218a:	f000 b82d 	b.w	80021e8 <_malloc_r>
 800218e:	bf00      	nop
 8002190:	2000000c 	.word	0x2000000c

08002194 <free>:
 8002194:	4b02      	ldr	r3, [pc, #8]	@ (80021a0 <free+0xc>)
 8002196:	4601      	mov	r1, r0
 8002198:	6818      	ldr	r0, [r3, #0]
 800219a:	f000 b957 	b.w	800244c <_free_r>
 800219e:	bf00      	nop
 80021a0:	2000000c 	.word	0x2000000c

080021a4 <sbrk_aligned>:
 80021a4:	b570      	push	{r4, r5, r6, lr}
 80021a6:	4e0f      	ldr	r6, [pc, #60]	@ (80021e4 <sbrk_aligned+0x40>)
 80021a8:	460c      	mov	r4, r1
 80021aa:	6831      	ldr	r1, [r6, #0]
 80021ac:	4605      	mov	r5, r0
 80021ae:	b911      	cbnz	r1, 80021b6 <sbrk_aligned+0x12>
 80021b0:	f000 f902 	bl	80023b8 <_sbrk_r>
 80021b4:	6030      	str	r0, [r6, #0]
 80021b6:	4621      	mov	r1, r4
 80021b8:	4628      	mov	r0, r5
 80021ba:	f000 f8fd 	bl	80023b8 <_sbrk_r>
 80021be:	1c43      	adds	r3, r0, #1
 80021c0:	d103      	bne.n	80021ca <sbrk_aligned+0x26>
 80021c2:	f04f 34ff 	mov.w	r4, #4294967295
 80021c6:	4620      	mov	r0, r4
 80021c8:	bd70      	pop	{r4, r5, r6, pc}
 80021ca:	1cc4      	adds	r4, r0, #3
 80021cc:	f024 0403 	bic.w	r4, r4, #3
 80021d0:	42a0      	cmp	r0, r4
 80021d2:	d0f8      	beq.n	80021c6 <sbrk_aligned+0x22>
 80021d4:	1a21      	subs	r1, r4, r0
 80021d6:	4628      	mov	r0, r5
 80021d8:	f000 f8ee 	bl	80023b8 <_sbrk_r>
 80021dc:	3001      	adds	r0, #1
 80021de:	d1f2      	bne.n	80021c6 <sbrk_aligned+0x22>
 80021e0:	e7ef      	b.n	80021c2 <sbrk_aligned+0x1e>
 80021e2:	bf00      	nop
 80021e4:	2000013c 	.word	0x2000013c

080021e8 <_malloc_r>:
 80021e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80021ec:	1ccd      	adds	r5, r1, #3
 80021ee:	f025 0503 	bic.w	r5, r5, #3
 80021f2:	3508      	adds	r5, #8
 80021f4:	2d0c      	cmp	r5, #12
 80021f6:	bf38      	it	cc
 80021f8:	250c      	movcc	r5, #12
 80021fa:	2d00      	cmp	r5, #0
 80021fc:	4606      	mov	r6, r0
 80021fe:	db01      	blt.n	8002204 <_malloc_r+0x1c>
 8002200:	42a9      	cmp	r1, r5
 8002202:	d904      	bls.n	800220e <_malloc_r+0x26>
 8002204:	230c      	movs	r3, #12
 8002206:	6033      	str	r3, [r6, #0]
 8002208:	2000      	movs	r0, #0
 800220a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800220e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80022e4 <_malloc_r+0xfc>
 8002212:	f000 f869 	bl	80022e8 <__malloc_lock>
 8002216:	f8d8 3000 	ldr.w	r3, [r8]
 800221a:	461c      	mov	r4, r3
 800221c:	bb44      	cbnz	r4, 8002270 <_malloc_r+0x88>
 800221e:	4629      	mov	r1, r5
 8002220:	4630      	mov	r0, r6
 8002222:	f7ff ffbf 	bl	80021a4 <sbrk_aligned>
 8002226:	1c43      	adds	r3, r0, #1
 8002228:	4604      	mov	r4, r0
 800222a:	d158      	bne.n	80022de <_malloc_r+0xf6>
 800222c:	f8d8 4000 	ldr.w	r4, [r8]
 8002230:	4627      	mov	r7, r4
 8002232:	2f00      	cmp	r7, #0
 8002234:	d143      	bne.n	80022be <_malloc_r+0xd6>
 8002236:	2c00      	cmp	r4, #0
 8002238:	d04b      	beq.n	80022d2 <_malloc_r+0xea>
 800223a:	6823      	ldr	r3, [r4, #0]
 800223c:	4639      	mov	r1, r7
 800223e:	4630      	mov	r0, r6
 8002240:	eb04 0903 	add.w	r9, r4, r3
 8002244:	f000 f8b8 	bl	80023b8 <_sbrk_r>
 8002248:	4581      	cmp	r9, r0
 800224a:	d142      	bne.n	80022d2 <_malloc_r+0xea>
 800224c:	6821      	ldr	r1, [r4, #0]
 800224e:	1a6d      	subs	r5, r5, r1
 8002250:	4629      	mov	r1, r5
 8002252:	4630      	mov	r0, r6
 8002254:	f7ff ffa6 	bl	80021a4 <sbrk_aligned>
 8002258:	3001      	adds	r0, #1
 800225a:	d03a      	beq.n	80022d2 <_malloc_r+0xea>
 800225c:	6823      	ldr	r3, [r4, #0]
 800225e:	442b      	add	r3, r5
 8002260:	6023      	str	r3, [r4, #0]
 8002262:	f8d8 3000 	ldr.w	r3, [r8]
 8002266:	685a      	ldr	r2, [r3, #4]
 8002268:	bb62      	cbnz	r2, 80022c4 <_malloc_r+0xdc>
 800226a:	f8c8 7000 	str.w	r7, [r8]
 800226e:	e00f      	b.n	8002290 <_malloc_r+0xa8>
 8002270:	6822      	ldr	r2, [r4, #0]
 8002272:	1b52      	subs	r2, r2, r5
 8002274:	d420      	bmi.n	80022b8 <_malloc_r+0xd0>
 8002276:	2a0b      	cmp	r2, #11
 8002278:	d917      	bls.n	80022aa <_malloc_r+0xc2>
 800227a:	1961      	adds	r1, r4, r5
 800227c:	42a3      	cmp	r3, r4
 800227e:	6025      	str	r5, [r4, #0]
 8002280:	bf18      	it	ne
 8002282:	6059      	strne	r1, [r3, #4]
 8002284:	6863      	ldr	r3, [r4, #4]
 8002286:	bf08      	it	eq
 8002288:	f8c8 1000 	streq.w	r1, [r8]
 800228c:	5162      	str	r2, [r4, r5]
 800228e:	604b      	str	r3, [r1, #4]
 8002290:	4630      	mov	r0, r6
 8002292:	f000 f82f 	bl	80022f4 <__malloc_unlock>
 8002296:	f104 000b 	add.w	r0, r4, #11
 800229a:	1d23      	adds	r3, r4, #4
 800229c:	f020 0007 	bic.w	r0, r0, #7
 80022a0:	1ac2      	subs	r2, r0, r3
 80022a2:	bf1c      	itt	ne
 80022a4:	1a1b      	subne	r3, r3, r0
 80022a6:	50a3      	strne	r3, [r4, r2]
 80022a8:	e7af      	b.n	800220a <_malloc_r+0x22>
 80022aa:	6862      	ldr	r2, [r4, #4]
 80022ac:	42a3      	cmp	r3, r4
 80022ae:	bf0c      	ite	eq
 80022b0:	f8c8 2000 	streq.w	r2, [r8]
 80022b4:	605a      	strne	r2, [r3, #4]
 80022b6:	e7eb      	b.n	8002290 <_malloc_r+0xa8>
 80022b8:	4623      	mov	r3, r4
 80022ba:	6864      	ldr	r4, [r4, #4]
 80022bc:	e7ae      	b.n	800221c <_malloc_r+0x34>
 80022be:	463c      	mov	r4, r7
 80022c0:	687f      	ldr	r7, [r7, #4]
 80022c2:	e7b6      	b.n	8002232 <_malloc_r+0x4a>
 80022c4:	461a      	mov	r2, r3
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	42a3      	cmp	r3, r4
 80022ca:	d1fb      	bne.n	80022c4 <_malloc_r+0xdc>
 80022cc:	2300      	movs	r3, #0
 80022ce:	6053      	str	r3, [r2, #4]
 80022d0:	e7de      	b.n	8002290 <_malloc_r+0xa8>
 80022d2:	230c      	movs	r3, #12
 80022d4:	6033      	str	r3, [r6, #0]
 80022d6:	4630      	mov	r0, r6
 80022d8:	f000 f80c 	bl	80022f4 <__malloc_unlock>
 80022dc:	e794      	b.n	8002208 <_malloc_r+0x20>
 80022de:	6005      	str	r5, [r0, #0]
 80022e0:	e7d6      	b.n	8002290 <_malloc_r+0xa8>
 80022e2:	bf00      	nop
 80022e4:	20000140 	.word	0x20000140

080022e8 <__malloc_lock>:
 80022e8:	4801      	ldr	r0, [pc, #4]	@ (80022f0 <__malloc_lock+0x8>)
 80022ea:	f000 b89f 	b.w	800242c <__retarget_lock_acquire_recursive>
 80022ee:	bf00      	nop
 80022f0:	20000280 	.word	0x20000280

080022f4 <__malloc_unlock>:
 80022f4:	4801      	ldr	r0, [pc, #4]	@ (80022fc <__malloc_unlock+0x8>)
 80022f6:	f000 b89a 	b.w	800242e <__retarget_lock_release_recursive>
 80022fa:	bf00      	nop
 80022fc:	20000280 	.word	0x20000280

08002300 <memcmp>:
 8002300:	b510      	push	{r4, lr}
 8002302:	3901      	subs	r1, #1
 8002304:	4402      	add	r2, r0
 8002306:	4290      	cmp	r0, r2
 8002308:	d101      	bne.n	800230e <memcmp+0xe>
 800230a:	2000      	movs	r0, #0
 800230c:	e005      	b.n	800231a <memcmp+0x1a>
 800230e:	7803      	ldrb	r3, [r0, #0]
 8002310:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8002314:	42a3      	cmp	r3, r4
 8002316:	d001      	beq.n	800231c <memcmp+0x1c>
 8002318:	1b18      	subs	r0, r3, r4
 800231a:	bd10      	pop	{r4, pc}
 800231c:	3001      	adds	r0, #1
 800231e:	e7f2      	b.n	8002306 <memcmp+0x6>

08002320 <memset>:
 8002320:	4402      	add	r2, r0
 8002322:	4603      	mov	r3, r0
 8002324:	4293      	cmp	r3, r2
 8002326:	d100      	bne.n	800232a <memset+0xa>
 8002328:	4770      	bx	lr
 800232a:	f803 1b01 	strb.w	r1, [r3], #1
 800232e:	e7f9      	b.n	8002324 <memset+0x4>

08002330 <_raise_r>:
 8002330:	291f      	cmp	r1, #31
 8002332:	b538      	push	{r3, r4, r5, lr}
 8002334:	4605      	mov	r5, r0
 8002336:	460c      	mov	r4, r1
 8002338:	d904      	bls.n	8002344 <_raise_r+0x14>
 800233a:	2316      	movs	r3, #22
 800233c:	6003      	str	r3, [r0, #0]
 800233e:	f04f 30ff 	mov.w	r0, #4294967295
 8002342:	bd38      	pop	{r3, r4, r5, pc}
 8002344:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8002346:	b112      	cbz	r2, 800234e <_raise_r+0x1e>
 8002348:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800234c:	b94b      	cbnz	r3, 8002362 <_raise_r+0x32>
 800234e:	4628      	mov	r0, r5
 8002350:	f000 f830 	bl	80023b4 <_getpid_r>
 8002354:	4622      	mov	r2, r4
 8002356:	4601      	mov	r1, r0
 8002358:	4628      	mov	r0, r5
 800235a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800235e:	f000 b817 	b.w	8002390 <_kill_r>
 8002362:	2b01      	cmp	r3, #1
 8002364:	d00a      	beq.n	800237c <_raise_r+0x4c>
 8002366:	1c59      	adds	r1, r3, #1
 8002368:	d103      	bne.n	8002372 <_raise_r+0x42>
 800236a:	2316      	movs	r3, #22
 800236c:	6003      	str	r3, [r0, #0]
 800236e:	2001      	movs	r0, #1
 8002370:	e7e7      	b.n	8002342 <_raise_r+0x12>
 8002372:	2100      	movs	r1, #0
 8002374:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8002378:	4620      	mov	r0, r4
 800237a:	4798      	blx	r3
 800237c:	2000      	movs	r0, #0
 800237e:	e7e0      	b.n	8002342 <_raise_r+0x12>

08002380 <raise>:
 8002380:	4b02      	ldr	r3, [pc, #8]	@ (800238c <raise+0xc>)
 8002382:	4601      	mov	r1, r0
 8002384:	6818      	ldr	r0, [r3, #0]
 8002386:	f7ff bfd3 	b.w	8002330 <_raise_r>
 800238a:	bf00      	nop
 800238c:	2000000c 	.word	0x2000000c

08002390 <_kill_r>:
 8002390:	b538      	push	{r3, r4, r5, lr}
 8002392:	4d07      	ldr	r5, [pc, #28]	@ (80023b0 <_kill_r+0x20>)
 8002394:	2300      	movs	r3, #0
 8002396:	4604      	mov	r4, r0
 8002398:	4608      	mov	r0, r1
 800239a:	4611      	mov	r1, r2
 800239c:	602b      	str	r3, [r5, #0]
 800239e:	f7fe ffee 	bl	800137e <_kill>
 80023a2:	1c43      	adds	r3, r0, #1
 80023a4:	d102      	bne.n	80023ac <_kill_r+0x1c>
 80023a6:	682b      	ldr	r3, [r5, #0]
 80023a8:	b103      	cbz	r3, 80023ac <_kill_r+0x1c>
 80023aa:	6023      	str	r3, [r4, #0]
 80023ac:	bd38      	pop	{r3, r4, r5, pc}
 80023ae:	bf00      	nop
 80023b0:	2000027c 	.word	0x2000027c

080023b4 <_getpid_r>:
 80023b4:	f7fe bfdb 	b.w	800136e <_getpid>

080023b8 <_sbrk_r>:
 80023b8:	b538      	push	{r3, r4, r5, lr}
 80023ba:	4d06      	ldr	r5, [pc, #24]	@ (80023d4 <_sbrk_r+0x1c>)
 80023bc:	2300      	movs	r3, #0
 80023be:	4604      	mov	r4, r0
 80023c0:	4608      	mov	r0, r1
 80023c2:	602b      	str	r3, [r5, #0]
 80023c4:	f7fe fff6 	bl	80013b4 <_sbrk>
 80023c8:	1c43      	adds	r3, r0, #1
 80023ca:	d102      	bne.n	80023d2 <_sbrk_r+0x1a>
 80023cc:	682b      	ldr	r3, [r5, #0]
 80023ce:	b103      	cbz	r3, 80023d2 <_sbrk_r+0x1a>
 80023d0:	6023      	str	r3, [r4, #0]
 80023d2:	bd38      	pop	{r3, r4, r5, pc}
 80023d4:	2000027c 	.word	0x2000027c

080023d8 <__errno>:
 80023d8:	4b01      	ldr	r3, [pc, #4]	@ (80023e0 <__errno+0x8>)
 80023da:	6818      	ldr	r0, [r3, #0]
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	2000000c 	.word	0x2000000c

080023e4 <__libc_init_array>:
 80023e4:	b570      	push	{r4, r5, r6, lr}
 80023e6:	4d0d      	ldr	r5, [pc, #52]	@ (800241c <__libc_init_array+0x38>)
 80023e8:	4c0d      	ldr	r4, [pc, #52]	@ (8002420 <__libc_init_array+0x3c>)
 80023ea:	1b64      	subs	r4, r4, r5
 80023ec:	10a4      	asrs	r4, r4, #2
 80023ee:	2600      	movs	r6, #0
 80023f0:	42a6      	cmp	r6, r4
 80023f2:	d109      	bne.n	8002408 <__libc_init_array+0x24>
 80023f4:	4d0b      	ldr	r5, [pc, #44]	@ (8002424 <__libc_init_array+0x40>)
 80023f6:	4c0c      	ldr	r4, [pc, #48]	@ (8002428 <__libc_init_array+0x44>)
 80023f8:	f000 f872 	bl	80024e0 <_init>
 80023fc:	1b64      	subs	r4, r4, r5
 80023fe:	10a4      	asrs	r4, r4, #2
 8002400:	2600      	movs	r6, #0
 8002402:	42a6      	cmp	r6, r4
 8002404:	d105      	bne.n	8002412 <__libc_init_array+0x2e>
 8002406:	bd70      	pop	{r4, r5, r6, pc}
 8002408:	f855 3b04 	ldr.w	r3, [r5], #4
 800240c:	4798      	blx	r3
 800240e:	3601      	adds	r6, #1
 8002410:	e7ee      	b.n	80023f0 <__libc_init_array+0xc>
 8002412:	f855 3b04 	ldr.w	r3, [r5], #4
 8002416:	4798      	blx	r3
 8002418:	3601      	adds	r6, #1
 800241a:	e7f2      	b.n	8002402 <__libc_init_array+0x1e>
 800241c:	08002590 	.word	0x08002590
 8002420:	08002590 	.word	0x08002590
 8002424:	08002590 	.word	0x08002590
 8002428:	08002594 	.word	0x08002594

0800242c <__retarget_lock_acquire_recursive>:
 800242c:	4770      	bx	lr

0800242e <__retarget_lock_release_recursive>:
 800242e:	4770      	bx	lr

08002430 <memcpy>:
 8002430:	440a      	add	r2, r1
 8002432:	4291      	cmp	r1, r2
 8002434:	f100 33ff 	add.w	r3, r0, #4294967295
 8002438:	d100      	bne.n	800243c <memcpy+0xc>
 800243a:	4770      	bx	lr
 800243c:	b510      	push	{r4, lr}
 800243e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002442:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002446:	4291      	cmp	r1, r2
 8002448:	d1f9      	bne.n	800243e <memcpy+0xe>
 800244a:	bd10      	pop	{r4, pc}

0800244c <_free_r>:
 800244c:	b538      	push	{r3, r4, r5, lr}
 800244e:	4605      	mov	r5, r0
 8002450:	2900      	cmp	r1, #0
 8002452:	d041      	beq.n	80024d8 <_free_r+0x8c>
 8002454:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002458:	1f0c      	subs	r4, r1, #4
 800245a:	2b00      	cmp	r3, #0
 800245c:	bfb8      	it	lt
 800245e:	18e4      	addlt	r4, r4, r3
 8002460:	f7ff ff42 	bl	80022e8 <__malloc_lock>
 8002464:	4a1d      	ldr	r2, [pc, #116]	@ (80024dc <_free_r+0x90>)
 8002466:	6813      	ldr	r3, [r2, #0]
 8002468:	b933      	cbnz	r3, 8002478 <_free_r+0x2c>
 800246a:	6063      	str	r3, [r4, #4]
 800246c:	6014      	str	r4, [r2, #0]
 800246e:	4628      	mov	r0, r5
 8002470:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002474:	f7ff bf3e 	b.w	80022f4 <__malloc_unlock>
 8002478:	42a3      	cmp	r3, r4
 800247a:	d908      	bls.n	800248e <_free_r+0x42>
 800247c:	6820      	ldr	r0, [r4, #0]
 800247e:	1821      	adds	r1, r4, r0
 8002480:	428b      	cmp	r3, r1
 8002482:	bf01      	itttt	eq
 8002484:	6819      	ldreq	r1, [r3, #0]
 8002486:	685b      	ldreq	r3, [r3, #4]
 8002488:	1809      	addeq	r1, r1, r0
 800248a:	6021      	streq	r1, [r4, #0]
 800248c:	e7ed      	b.n	800246a <_free_r+0x1e>
 800248e:	461a      	mov	r2, r3
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	b10b      	cbz	r3, 8002498 <_free_r+0x4c>
 8002494:	42a3      	cmp	r3, r4
 8002496:	d9fa      	bls.n	800248e <_free_r+0x42>
 8002498:	6811      	ldr	r1, [r2, #0]
 800249a:	1850      	adds	r0, r2, r1
 800249c:	42a0      	cmp	r0, r4
 800249e:	d10b      	bne.n	80024b8 <_free_r+0x6c>
 80024a0:	6820      	ldr	r0, [r4, #0]
 80024a2:	4401      	add	r1, r0
 80024a4:	1850      	adds	r0, r2, r1
 80024a6:	4283      	cmp	r3, r0
 80024a8:	6011      	str	r1, [r2, #0]
 80024aa:	d1e0      	bne.n	800246e <_free_r+0x22>
 80024ac:	6818      	ldr	r0, [r3, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	6053      	str	r3, [r2, #4]
 80024b2:	4408      	add	r0, r1
 80024b4:	6010      	str	r0, [r2, #0]
 80024b6:	e7da      	b.n	800246e <_free_r+0x22>
 80024b8:	d902      	bls.n	80024c0 <_free_r+0x74>
 80024ba:	230c      	movs	r3, #12
 80024bc:	602b      	str	r3, [r5, #0]
 80024be:	e7d6      	b.n	800246e <_free_r+0x22>
 80024c0:	6820      	ldr	r0, [r4, #0]
 80024c2:	1821      	adds	r1, r4, r0
 80024c4:	428b      	cmp	r3, r1
 80024c6:	bf04      	itt	eq
 80024c8:	6819      	ldreq	r1, [r3, #0]
 80024ca:	685b      	ldreq	r3, [r3, #4]
 80024cc:	6063      	str	r3, [r4, #4]
 80024ce:	bf04      	itt	eq
 80024d0:	1809      	addeq	r1, r1, r0
 80024d2:	6021      	streq	r1, [r4, #0]
 80024d4:	6054      	str	r4, [r2, #4]
 80024d6:	e7ca      	b.n	800246e <_free_r+0x22>
 80024d8:	bd38      	pop	{r3, r4, r5, pc}
 80024da:	bf00      	nop
 80024dc:	20000140 	.word	0x20000140

080024e0 <_init>:
 80024e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024e2:	bf00      	nop
 80024e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024e6:	bc08      	pop	{r3}
 80024e8:	469e      	mov	lr, r3
 80024ea:	4770      	bx	lr

080024ec <_fini>:
 80024ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024ee:	bf00      	nop
 80024f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024f2:	bc08      	pop	{r3}
 80024f4:	469e      	mov	lr, r3
 80024f6:	4770      	bx	lr
