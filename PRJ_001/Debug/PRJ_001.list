
PRJ_001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000303c  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  080031d0  080031d0  000041d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800326c  0800326c  00005080  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800326c  0800326c  0000426c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003274  08003274  00005080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003274  08003274  00004274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003278  08003278  00004278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  0800327c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000238  20000080  080032fc  00005080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b8  080032fc  000052b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ed23  00000000  00000000  000050b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002444  00000000  00000000  00013dd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000618  00000000  00000000  00016218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000045a  00000000  00000000  00016830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b688  00000000  00000000  00016c8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ab44  00000000  00000000  00032312  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096faf  00000000  00000000  0003ce56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d3e05  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fa8  00000000  00000000  000d3e48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000d6df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000080 	.word	0x20000080
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080031b8 	.word	0x080031b8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000084 	.word	0x20000084
 80001d0:	080031b8 	.word	0x080031b8

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_drsub>:
 80001e4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001e8:	e002      	b.n	80001f0 <__adddf3>
 80001ea:	bf00      	nop

080001ec <__aeabi_dsub>:
 80001ec:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001f0 <__adddf3>:
 80001f0:	b530      	push	{r4, r5, lr}
 80001f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fa:	ea94 0f05 	teq	r4, r5
 80001fe:	bf08      	it	eq
 8000200:	ea90 0f02 	teqeq	r0, r2
 8000204:	bf1f      	itttt	ne
 8000206:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000212:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000216:	f000 80e2 	beq.w	80003de <__adddf3+0x1ee>
 800021a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000222:	bfb8      	it	lt
 8000224:	426d      	neglt	r5, r5
 8000226:	dd0c      	ble.n	8000242 <__adddf3+0x52>
 8000228:	442c      	add	r4, r5
 800022a:	ea80 0202 	eor.w	r2, r0, r2
 800022e:	ea81 0303 	eor.w	r3, r1, r3
 8000232:	ea82 0000 	eor.w	r0, r2, r0
 8000236:	ea83 0101 	eor.w	r1, r3, r1
 800023a:	ea80 0202 	eor.w	r2, r0, r2
 800023e:	ea81 0303 	eor.w	r3, r1, r3
 8000242:	2d36      	cmp	r5, #54	@ 0x36
 8000244:	bf88      	it	hi
 8000246:	bd30      	pophi	{r4, r5, pc}
 8000248:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800024c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000250:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000254:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x70>
 800025a:	4240      	negs	r0, r0
 800025c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000260:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000264:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000268:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800026c:	d002      	beq.n	8000274 <__adddf3+0x84>
 800026e:	4252      	negs	r2, r2
 8000270:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000274:	ea94 0f05 	teq	r4, r5
 8000278:	f000 80a7 	beq.w	80003ca <__adddf3+0x1da>
 800027c:	f1a4 0401 	sub.w	r4, r4, #1
 8000280:	f1d5 0e20 	rsbs	lr, r5, #32
 8000284:	db0d      	blt.n	80002a2 <__adddf3+0xb2>
 8000286:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028a:	fa22 f205 	lsr.w	r2, r2, r5
 800028e:	1880      	adds	r0, r0, r2
 8000290:	f141 0100 	adc.w	r1, r1, #0
 8000294:	fa03 f20e 	lsl.w	r2, r3, lr
 8000298:	1880      	adds	r0, r0, r2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	4159      	adcs	r1, r3
 80002a0:	e00e      	b.n	80002c0 <__adddf3+0xd0>
 80002a2:	f1a5 0520 	sub.w	r5, r5, #32
 80002a6:	f10e 0e20 	add.w	lr, lr, #32
 80002aa:	2a01      	cmp	r2, #1
 80002ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b0:	bf28      	it	cs
 80002b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	18c0      	adds	r0, r0, r3
 80002bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002c4:	d507      	bpl.n	80002d6 <__adddf3+0xe6>
 80002c6:	f04f 0e00 	mov.w	lr, #0
 80002ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002da:	d31b      	bcc.n	8000314 <__adddf3+0x124>
 80002dc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002e0:	d30c      	bcc.n	80002fc <__adddf3+0x10c>
 80002e2:	0849      	lsrs	r1, r1, #1
 80002e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002ec:	f104 0401 	add.w	r4, r4, #1
 80002f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002f8:	f080 809a 	bcs.w	8000430 <__adddf3+0x240>
 80002fc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000300:	bf08      	it	eq
 8000302:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000306:	f150 0000 	adcs.w	r0, r0, #0
 800030a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030e:	ea41 0105 	orr.w	r1, r1, r5
 8000312:	bd30      	pop	{r4, r5, pc}
 8000314:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000318:	4140      	adcs	r0, r0
 800031a:	eb41 0101 	adc.w	r1, r1, r1
 800031e:	3c01      	subs	r4, #1
 8000320:	bf28      	it	cs
 8000322:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000326:	d2e9      	bcs.n	80002fc <__adddf3+0x10c>
 8000328:	f091 0f00 	teq	r1, #0
 800032c:	bf04      	itt	eq
 800032e:	4601      	moveq	r1, r0
 8000330:	2000      	moveq	r0, #0
 8000332:	fab1 f381 	clz	r3, r1
 8000336:	bf08      	it	eq
 8000338:	3320      	addeq	r3, #32
 800033a:	f1a3 030b 	sub.w	r3, r3, #11
 800033e:	f1b3 0220 	subs.w	r2, r3, #32
 8000342:	da0c      	bge.n	800035e <__adddf3+0x16e>
 8000344:	320c      	adds	r2, #12
 8000346:	dd08      	ble.n	800035a <__adddf3+0x16a>
 8000348:	f102 0c14 	add.w	ip, r2, #20
 800034c:	f1c2 020c 	rsb	r2, r2, #12
 8000350:	fa01 f00c 	lsl.w	r0, r1, ip
 8000354:	fa21 f102 	lsr.w	r1, r1, r2
 8000358:	e00c      	b.n	8000374 <__adddf3+0x184>
 800035a:	f102 0214 	add.w	r2, r2, #20
 800035e:	bfd8      	it	le
 8000360:	f1c2 0c20 	rsble	ip, r2, #32
 8000364:	fa01 f102 	lsl.w	r1, r1, r2
 8000368:	fa20 fc0c 	lsr.w	ip, r0, ip
 800036c:	bfdc      	itt	le
 800036e:	ea41 010c 	orrle.w	r1, r1, ip
 8000372:	4090      	lslle	r0, r2
 8000374:	1ae4      	subs	r4, r4, r3
 8000376:	bfa2      	ittt	ge
 8000378:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800037c:	4329      	orrge	r1, r5
 800037e:	bd30      	popge	{r4, r5, pc}
 8000380:	ea6f 0404 	mvn.w	r4, r4
 8000384:	3c1f      	subs	r4, #31
 8000386:	da1c      	bge.n	80003c2 <__adddf3+0x1d2>
 8000388:	340c      	adds	r4, #12
 800038a:	dc0e      	bgt.n	80003aa <__adddf3+0x1ba>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0220 	rsb	r2, r4, #32
 8000394:	fa20 f004 	lsr.w	r0, r0, r4
 8000398:	fa01 f302 	lsl.w	r3, r1, r2
 800039c:	ea40 0003 	orr.w	r0, r0, r3
 80003a0:	fa21 f304 	lsr.w	r3, r1, r4
 80003a4:	ea45 0103 	orr.w	r1, r5, r3
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	f1c4 040c 	rsb	r4, r4, #12
 80003ae:	f1c4 0220 	rsb	r2, r4, #32
 80003b2:	fa20 f002 	lsr.w	r0, r0, r2
 80003b6:	fa01 f304 	lsl.w	r3, r1, r4
 80003ba:	ea40 0003 	orr.w	r0, r0, r3
 80003be:	4629      	mov	r1, r5
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	fa21 f004 	lsr.w	r0, r1, r4
 80003c6:	4629      	mov	r1, r5
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	f094 0f00 	teq	r4, #0
 80003ce:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003d2:	bf06      	itte	eq
 80003d4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003d8:	3401      	addeq	r4, #1
 80003da:	3d01      	subne	r5, #1
 80003dc:	e74e      	b.n	800027c <__adddf3+0x8c>
 80003de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e2:	bf18      	it	ne
 80003e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e8:	d029      	beq.n	800043e <__adddf3+0x24e>
 80003ea:	ea94 0f05 	teq	r4, r5
 80003ee:	bf08      	it	eq
 80003f0:	ea90 0f02 	teqeq	r0, r2
 80003f4:	d005      	beq.n	8000402 <__adddf3+0x212>
 80003f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fa:	bf04      	itt	eq
 80003fc:	4619      	moveq	r1, r3
 80003fe:	4610      	moveq	r0, r2
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	ea91 0f03 	teq	r1, r3
 8000406:	bf1e      	ittt	ne
 8000408:	2100      	movne	r1, #0
 800040a:	2000      	movne	r0, #0
 800040c:	bd30      	popne	{r4, r5, pc}
 800040e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000412:	d105      	bne.n	8000420 <__adddf3+0x230>
 8000414:	0040      	lsls	r0, r0, #1
 8000416:	4149      	adcs	r1, r1
 8000418:	bf28      	it	cs
 800041a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000424:	bf3c      	itt	cc
 8000426:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800042a:	bd30      	popcc	{r4, r5, pc}
 800042c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000430:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000434:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000438:	f04f 0000 	mov.w	r0, #0
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000442:	bf1a      	itte	ne
 8000444:	4619      	movne	r1, r3
 8000446:	4610      	movne	r0, r2
 8000448:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800044c:	bf1c      	itt	ne
 800044e:	460b      	movne	r3, r1
 8000450:	4602      	movne	r2, r0
 8000452:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000456:	bf06      	itte	eq
 8000458:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800045c:	ea91 0f03 	teqeq	r1, r3
 8000460:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	bf00      	nop

08000468 <__aeabi_ui2d>:
 8000468:	f090 0f00 	teq	r0, #0
 800046c:	bf04      	itt	eq
 800046e:	2100      	moveq	r1, #0
 8000470:	4770      	bxeq	lr
 8000472:	b530      	push	{r4, r5, lr}
 8000474:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000478:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800047c:	f04f 0500 	mov.w	r5, #0
 8000480:	f04f 0100 	mov.w	r1, #0
 8000484:	e750      	b.n	8000328 <__adddf3+0x138>
 8000486:	bf00      	nop

08000488 <__aeabi_i2d>:
 8000488:	f090 0f00 	teq	r0, #0
 800048c:	bf04      	itt	eq
 800048e:	2100      	moveq	r1, #0
 8000490:	4770      	bxeq	lr
 8000492:	b530      	push	{r4, r5, lr}
 8000494:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000498:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004a0:	bf48      	it	mi
 80004a2:	4240      	negmi	r0, r0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e73e      	b.n	8000328 <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_f2d>:
 80004ac:	0042      	lsls	r2, r0, #1
 80004ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ba:	bf1f      	itttt	ne
 80004bc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004c0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004c4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004c8:	4770      	bxne	lr
 80004ca:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ce:	bf08      	it	eq
 80004d0:	4770      	bxeq	lr
 80004d2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004d6:	bf04      	itt	eq
 80004d8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004e8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004ec:	e71c      	b.n	8000328 <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_ul2d>:
 80004f0:	ea50 0201 	orrs.w	r2, r0, r1
 80004f4:	bf08      	it	eq
 80004f6:	4770      	bxeq	lr
 80004f8:	b530      	push	{r4, r5, lr}
 80004fa:	f04f 0500 	mov.w	r5, #0
 80004fe:	e00a      	b.n	8000516 <__aeabi_l2d+0x16>

08000500 <__aeabi_l2d>:
 8000500:	ea50 0201 	orrs.w	r2, r0, r1
 8000504:	bf08      	it	eq
 8000506:	4770      	bxeq	lr
 8000508:	b530      	push	{r4, r5, lr}
 800050a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800050e:	d502      	bpl.n	8000516 <__aeabi_l2d+0x16>
 8000510:	4240      	negs	r0, r0
 8000512:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000516:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800051a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800051e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000522:	f43f aed8 	beq.w	80002d6 <__adddf3+0xe6>
 8000526:	f04f 0203 	mov.w	r2, #3
 800052a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052e:	bf18      	it	ne
 8000530:	3203      	addne	r2, #3
 8000532:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000536:	bf18      	it	ne
 8000538:	3203      	addne	r2, #3
 800053a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053e:	f1c2 0320 	rsb	r3, r2, #32
 8000542:	fa00 fc03 	lsl.w	ip, r0, r3
 8000546:	fa20 f002 	lsr.w	r0, r0, r2
 800054a:	fa01 fe03 	lsl.w	lr, r1, r3
 800054e:	ea40 000e 	orr.w	r0, r0, lr
 8000552:	fa21 f102 	lsr.w	r1, r1, r2
 8000556:	4414      	add	r4, r2
 8000558:	e6bd      	b.n	80002d6 <__adddf3+0xe6>
 800055a:	bf00      	nop

0800055c <__aeabi_dmul>:
 800055c:	b570      	push	{r4, r5, r6, lr}
 800055e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000562:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000566:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056a:	bf1d      	ittte	ne
 800056c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000570:	ea94 0f0c 	teqne	r4, ip
 8000574:	ea95 0f0c 	teqne	r5, ip
 8000578:	f000 f8de 	bleq	8000738 <__aeabi_dmul+0x1dc>
 800057c:	442c      	add	r4, r5
 800057e:	ea81 0603 	eor.w	r6, r1, r3
 8000582:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000586:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058e:	bf18      	it	ne
 8000590:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000594:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000598:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800059c:	d038      	beq.n	8000610 <__aeabi_dmul+0xb4>
 800059e:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a2:	f04f 0500 	mov.w	r5, #0
 80005a6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005aa:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005ae:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b2:	f04f 0600 	mov.w	r6, #0
 80005b6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ba:	f09c 0f00 	teq	ip, #0
 80005be:	bf18      	it	ne
 80005c0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c4:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005c8:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005cc:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005d0:	d204      	bcs.n	80005dc <__aeabi_dmul+0x80>
 80005d2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d6:	416d      	adcs	r5, r5
 80005d8:	eb46 0606 	adc.w	r6, r6, r6
 80005dc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005ec:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f0:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005f4:	bf88      	it	hi
 80005f6:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005fa:	d81e      	bhi.n	800063a <__aeabi_dmul+0xde>
 80005fc:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	bd70      	pop	{r4, r5, r6, pc}
 8000610:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000614:	ea46 0101 	orr.w	r1, r6, r1
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	ea81 0103 	eor.w	r1, r1, r3
 8000620:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000624:	bfc2      	ittt	gt
 8000626:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062e:	bd70      	popgt	{r4, r5, r6, pc}
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f04f 0e00 	mov.w	lr, #0
 8000638:	3c01      	subs	r4, #1
 800063a:	f300 80ab 	bgt.w	8000794 <__aeabi_dmul+0x238>
 800063e:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000642:	bfde      	ittt	le
 8000644:	2000      	movle	r0, #0
 8000646:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800064a:	bd70      	pople	{r4, r5, r6, pc}
 800064c:	f1c4 0400 	rsb	r4, r4, #0
 8000650:	3c20      	subs	r4, #32
 8000652:	da35      	bge.n	80006c0 <__aeabi_dmul+0x164>
 8000654:	340c      	adds	r4, #12
 8000656:	dc1b      	bgt.n	8000690 <__aeabi_dmul+0x134>
 8000658:	f104 0414 	add.w	r4, r4, #20
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f305 	lsl.w	r3, r0, r5
 8000664:	fa20 f004 	lsr.w	r0, r0, r4
 8000668:	fa01 f205 	lsl.w	r2, r1, r5
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000674:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000678:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800067c:	fa21 f604 	lsr.w	r6, r1, r4
 8000680:	eb42 0106 	adc.w	r1, r2, r6
 8000684:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000688:	bf08      	it	eq
 800068a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068e:	bd70      	pop	{r4, r5, r6, pc}
 8000690:	f1c4 040c 	rsb	r4, r4, #12
 8000694:	f1c4 0520 	rsb	r5, r4, #32
 8000698:	fa00 f304 	lsl.w	r3, r0, r4
 800069c:	fa20 f005 	lsr.w	r0, r0, r5
 80006a0:	fa01 f204 	lsl.w	r2, r1, r4
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	f141 0100 	adc.w	r1, r1, #0
 80006b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b8:	bf08      	it	eq
 80006ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006be:	bd70      	pop	{r4, r5, r6, pc}
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f205 	lsl.w	r2, r0, r5
 80006c8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006cc:	fa20 f304 	lsr.w	r3, r0, r4
 80006d0:	fa01 f205 	lsl.w	r2, r1, r5
 80006d4:	ea43 0302 	orr.w	r3, r3, r2
 80006d8:	fa21 f004 	lsr.w	r0, r1, r4
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	fa21 f204 	lsr.w	r2, r1, r4
 80006e4:	ea20 0002 	bic.w	r0, r0, r2
 80006e8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f0:	bf08      	it	eq
 80006f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f6:	bd70      	pop	{r4, r5, r6, pc}
 80006f8:	f094 0f00 	teq	r4, #0
 80006fc:	d10f      	bne.n	800071e <__aeabi_dmul+0x1c2>
 80006fe:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000702:	0040      	lsls	r0, r0, #1
 8000704:	eb41 0101 	adc.w	r1, r1, r1
 8000708:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800070c:	bf08      	it	eq
 800070e:	3c01      	subeq	r4, #1
 8000710:	d0f7      	beq.n	8000702 <__aeabi_dmul+0x1a6>
 8000712:	ea41 0106 	orr.w	r1, r1, r6
 8000716:	f095 0f00 	teq	r5, #0
 800071a:	bf18      	it	ne
 800071c:	4770      	bxne	lr
 800071e:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000722:	0052      	lsls	r2, r2, #1
 8000724:	eb43 0303 	adc.w	r3, r3, r3
 8000728:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800072c:	bf08      	it	eq
 800072e:	3d01      	subeq	r5, #1
 8000730:	d0f7      	beq.n	8000722 <__aeabi_dmul+0x1c6>
 8000732:	ea43 0306 	orr.w	r3, r3, r6
 8000736:	4770      	bx	lr
 8000738:	ea94 0f0c 	teq	r4, ip
 800073c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000740:	bf18      	it	ne
 8000742:	ea95 0f0c 	teqne	r5, ip
 8000746:	d00c      	beq.n	8000762 <__aeabi_dmul+0x206>
 8000748:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074c:	bf18      	it	ne
 800074e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000752:	d1d1      	bne.n	80006f8 <__aeabi_dmul+0x19c>
 8000754:	ea81 0103 	eor.w	r1, r1, r3
 8000758:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800075c:	f04f 0000 	mov.w	r0, #0
 8000760:	bd70      	pop	{r4, r5, r6, pc}
 8000762:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000766:	bf06      	itte	eq
 8000768:	4610      	moveq	r0, r2
 800076a:	4619      	moveq	r1, r3
 800076c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000770:	d019      	beq.n	80007a6 <__aeabi_dmul+0x24a>
 8000772:	ea94 0f0c 	teq	r4, ip
 8000776:	d102      	bne.n	800077e <__aeabi_dmul+0x222>
 8000778:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800077c:	d113      	bne.n	80007a6 <__aeabi_dmul+0x24a>
 800077e:	ea95 0f0c 	teq	r5, ip
 8000782:	d105      	bne.n	8000790 <__aeabi_dmul+0x234>
 8000784:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000788:	bf1c      	itt	ne
 800078a:	4610      	movne	r0, r2
 800078c:	4619      	movne	r1, r3
 800078e:	d10a      	bne.n	80007a6 <__aeabi_dmul+0x24a>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007aa:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007ae:	bd70      	pop	{r4, r5, r6, pc}

080007b0 <__aeabi_ddiv>:
 80007b0:	b570      	push	{r4, r5, r6, lr}
 80007b2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007b6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007be:	bf1d      	ittte	ne
 80007c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c4:	ea94 0f0c 	teqne	r4, ip
 80007c8:	ea95 0f0c 	teqne	r5, ip
 80007cc:	f000 f8a7 	bleq	800091e <__aeabi_ddiv+0x16e>
 80007d0:	eba4 0405 	sub.w	r4, r4, r5
 80007d4:	ea81 0e03 	eor.w	lr, r1, r3
 80007d8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e0:	f000 8088 	beq.w	80008f4 <__aeabi_ddiv+0x144>
 80007e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e8:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007ec:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007fc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000800:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000804:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000808:	429d      	cmp	r5, r3
 800080a:	bf08      	it	eq
 800080c:	4296      	cmpeq	r6, r2
 800080e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000812:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000816:	d202      	bcs.n	800081e <__aeabi_ddiv+0x6e>
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	1ab6      	subs	r6, r6, r2
 8000820:	eb65 0503 	sbc.w	r5, r5, r3
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800082e:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000832:	ebb6 0e02 	subs.w	lr, r6, r2
 8000836:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083a:	bf22      	ittt	cs
 800083c:	1ab6      	subcs	r6, r6, r2
 800083e:	4675      	movcs	r5, lr
 8000840:	ea40 000c 	orrcs.w	r0, r0, ip
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	ebb6 0e02 	subs.w	lr, r6, r2
 800084e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000852:	bf22      	ittt	cs
 8000854:	1ab6      	subcs	r6, r6, r2
 8000856:	4675      	movcs	r5, lr
 8000858:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	ebb6 0e02 	subs.w	lr, r6, r2
 8000866:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086a:	bf22      	ittt	cs
 800086c:	1ab6      	subcs	r6, r6, r2
 800086e:	4675      	movcs	r5, lr
 8000870:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	ebb6 0e02 	subs.w	lr, r6, r2
 800087e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000882:	bf22      	ittt	cs
 8000884:	1ab6      	subcs	r6, r6, r2
 8000886:	4675      	movcs	r5, lr
 8000888:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800088c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000890:	d018      	beq.n	80008c4 <__aeabi_ddiv+0x114>
 8000892:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000896:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008aa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ae:	d1c0      	bne.n	8000832 <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b4:	d10b      	bne.n	80008ce <__aeabi_ddiv+0x11e>
 80008b6:	ea41 0100 	orr.w	r1, r1, r0
 80008ba:	f04f 0000 	mov.w	r0, #0
 80008be:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008c2:	e7b6      	b.n	8000832 <__aeabi_ddiv+0x82>
 80008c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008c8:	bf04      	itt	eq
 80008ca:	4301      	orreq	r1, r0
 80008cc:	2000      	moveq	r0, #0
 80008ce:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008d2:	bf88      	it	hi
 80008d4:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008d8:	f63f aeaf 	bhi.w	800063a <__aeabi_dmul+0xde>
 80008dc:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e0:	bf04      	itt	eq
 80008e2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ea:	f150 0000 	adcs.w	r0, r0, #0
 80008ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f2:	bd70      	pop	{r4, r5, r6, pc}
 80008f4:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008f8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008fc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000900:	bfc2      	ittt	gt
 8000902:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000906:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090a:	bd70      	popgt	{r4, r5, r6, pc}
 800090c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000910:	f04f 0e00 	mov.w	lr, #0
 8000914:	3c01      	subs	r4, #1
 8000916:	e690      	b.n	800063a <__aeabi_dmul+0xde>
 8000918:	ea45 0e06 	orr.w	lr, r5, r6
 800091c:	e68d      	b.n	800063a <__aeabi_dmul+0xde>
 800091e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000922:	ea94 0f0c 	teq	r4, ip
 8000926:	bf08      	it	eq
 8000928:	ea95 0f0c 	teqeq	r5, ip
 800092c:	f43f af3b 	beq.w	80007a6 <__aeabi_dmul+0x24a>
 8000930:	ea94 0f0c 	teq	r4, ip
 8000934:	d10a      	bne.n	800094c <__aeabi_ddiv+0x19c>
 8000936:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093a:	f47f af34 	bne.w	80007a6 <__aeabi_dmul+0x24a>
 800093e:	ea95 0f0c 	teq	r5, ip
 8000942:	f47f af25 	bne.w	8000790 <__aeabi_dmul+0x234>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e72c      	b.n	80007a6 <__aeabi_dmul+0x24a>
 800094c:	ea95 0f0c 	teq	r5, ip
 8000950:	d106      	bne.n	8000960 <__aeabi_ddiv+0x1b0>
 8000952:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000956:	f43f aefd 	beq.w	8000754 <__aeabi_dmul+0x1f8>
 800095a:	4610      	mov	r0, r2
 800095c:	4619      	mov	r1, r3
 800095e:	e722      	b.n	80007a6 <__aeabi_dmul+0x24a>
 8000960:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000964:	bf18      	it	ne
 8000966:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096a:	f47f aec5 	bne.w	80006f8 <__aeabi_dmul+0x19c>
 800096e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000972:	f47f af0d 	bne.w	8000790 <__aeabi_dmul+0x234>
 8000976:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097a:	f47f aeeb 	bne.w	8000754 <__aeabi_dmul+0x1f8>
 800097e:	e712      	b.n	80007a6 <__aeabi_dmul+0x24a>

08000980 <__aeabi_d2uiz>:
 8000980:	004a      	lsls	r2, r1, #1
 8000982:	d211      	bcs.n	80009a8 <__aeabi_d2uiz+0x28>
 8000984:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000988:	d211      	bcs.n	80009ae <__aeabi_d2uiz+0x2e>
 800098a:	d50d      	bpl.n	80009a8 <__aeabi_d2uiz+0x28>
 800098c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000990:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000994:	d40e      	bmi.n	80009b4 <__aeabi_d2uiz+0x34>
 8000996:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800099a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800099e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009a2:	fa23 f002 	lsr.w	r0, r3, r2
 80009a6:	4770      	bx	lr
 80009a8:	f04f 0000 	mov.w	r0, #0
 80009ac:	4770      	bx	lr
 80009ae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009b2:	d102      	bne.n	80009ba <__aeabi_d2uiz+0x3a>
 80009b4:	f04f 30ff 	mov.w	r0, #4294967295
 80009b8:	4770      	bx	lr
 80009ba:	f04f 0000 	mov.w	r0, #0
 80009be:	4770      	bx	lr

080009c0 <__aeabi_uldivmod>:
 80009c0:	b953      	cbnz	r3, 80009d8 <__aeabi_uldivmod+0x18>
 80009c2:	b94a      	cbnz	r2, 80009d8 <__aeabi_uldivmod+0x18>
 80009c4:	2900      	cmp	r1, #0
 80009c6:	bf08      	it	eq
 80009c8:	2800      	cmpeq	r0, #0
 80009ca:	bf1c      	itt	ne
 80009cc:	f04f 31ff 	movne.w	r1, #4294967295
 80009d0:	f04f 30ff 	movne.w	r0, #4294967295
 80009d4:	f000 b988 	b.w	8000ce8 <__aeabi_idiv0>
 80009d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80009dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009e0:	f000 f806 	bl	80009f0 <__udivmoddi4>
 80009e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009ec:	b004      	add	sp, #16
 80009ee:	4770      	bx	lr

080009f0 <__udivmoddi4>:
 80009f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009f4:	9d08      	ldr	r5, [sp, #32]
 80009f6:	468e      	mov	lr, r1
 80009f8:	4604      	mov	r4, r0
 80009fa:	4688      	mov	r8, r1
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d14a      	bne.n	8000a96 <__udivmoddi4+0xa6>
 8000a00:	428a      	cmp	r2, r1
 8000a02:	4617      	mov	r7, r2
 8000a04:	d962      	bls.n	8000acc <__udivmoddi4+0xdc>
 8000a06:	fab2 f682 	clz	r6, r2
 8000a0a:	b14e      	cbz	r6, 8000a20 <__udivmoddi4+0x30>
 8000a0c:	f1c6 0320 	rsb	r3, r6, #32
 8000a10:	fa01 f806 	lsl.w	r8, r1, r6
 8000a14:	fa20 f303 	lsr.w	r3, r0, r3
 8000a18:	40b7      	lsls	r7, r6
 8000a1a:	ea43 0808 	orr.w	r8, r3, r8
 8000a1e:	40b4      	lsls	r4, r6
 8000a20:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a24:	fa1f fc87 	uxth.w	ip, r7
 8000a28:	fbb8 f1fe 	udiv	r1, r8, lr
 8000a2c:	0c23      	lsrs	r3, r4, #16
 8000a2e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000a32:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a36:	fb01 f20c 	mul.w	r2, r1, ip
 8000a3a:	429a      	cmp	r2, r3
 8000a3c:	d909      	bls.n	8000a52 <__udivmoddi4+0x62>
 8000a3e:	18fb      	adds	r3, r7, r3
 8000a40:	f101 30ff 	add.w	r0, r1, #4294967295
 8000a44:	f080 80ea 	bcs.w	8000c1c <__udivmoddi4+0x22c>
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	f240 80e7 	bls.w	8000c1c <__udivmoddi4+0x22c>
 8000a4e:	3902      	subs	r1, #2
 8000a50:	443b      	add	r3, r7
 8000a52:	1a9a      	subs	r2, r3, r2
 8000a54:	b2a3      	uxth	r3, r4
 8000a56:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a5a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000a62:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a66:	459c      	cmp	ip, r3
 8000a68:	d909      	bls.n	8000a7e <__udivmoddi4+0x8e>
 8000a6a:	18fb      	adds	r3, r7, r3
 8000a6c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a70:	f080 80d6 	bcs.w	8000c20 <__udivmoddi4+0x230>
 8000a74:	459c      	cmp	ip, r3
 8000a76:	f240 80d3 	bls.w	8000c20 <__udivmoddi4+0x230>
 8000a7a:	443b      	add	r3, r7
 8000a7c:	3802      	subs	r0, #2
 8000a7e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a82:	eba3 030c 	sub.w	r3, r3, ip
 8000a86:	2100      	movs	r1, #0
 8000a88:	b11d      	cbz	r5, 8000a92 <__udivmoddi4+0xa2>
 8000a8a:	40f3      	lsrs	r3, r6
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	e9c5 3200 	strd	r3, r2, [r5]
 8000a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a96:	428b      	cmp	r3, r1
 8000a98:	d905      	bls.n	8000aa6 <__udivmoddi4+0xb6>
 8000a9a:	b10d      	cbz	r5, 8000aa0 <__udivmoddi4+0xb0>
 8000a9c:	e9c5 0100 	strd	r0, r1, [r5]
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	4608      	mov	r0, r1
 8000aa4:	e7f5      	b.n	8000a92 <__udivmoddi4+0xa2>
 8000aa6:	fab3 f183 	clz	r1, r3
 8000aaa:	2900      	cmp	r1, #0
 8000aac:	d146      	bne.n	8000b3c <__udivmoddi4+0x14c>
 8000aae:	4573      	cmp	r3, lr
 8000ab0:	d302      	bcc.n	8000ab8 <__udivmoddi4+0xc8>
 8000ab2:	4282      	cmp	r2, r0
 8000ab4:	f200 8105 	bhi.w	8000cc2 <__udivmoddi4+0x2d2>
 8000ab8:	1a84      	subs	r4, r0, r2
 8000aba:	eb6e 0203 	sbc.w	r2, lr, r3
 8000abe:	2001      	movs	r0, #1
 8000ac0:	4690      	mov	r8, r2
 8000ac2:	2d00      	cmp	r5, #0
 8000ac4:	d0e5      	beq.n	8000a92 <__udivmoddi4+0xa2>
 8000ac6:	e9c5 4800 	strd	r4, r8, [r5]
 8000aca:	e7e2      	b.n	8000a92 <__udivmoddi4+0xa2>
 8000acc:	2a00      	cmp	r2, #0
 8000ace:	f000 8090 	beq.w	8000bf2 <__udivmoddi4+0x202>
 8000ad2:	fab2 f682 	clz	r6, r2
 8000ad6:	2e00      	cmp	r6, #0
 8000ad8:	f040 80a4 	bne.w	8000c24 <__udivmoddi4+0x234>
 8000adc:	1a8a      	subs	r2, r1, r2
 8000ade:	0c03      	lsrs	r3, r0, #16
 8000ae0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ae4:	b280      	uxth	r0, r0
 8000ae6:	b2bc      	uxth	r4, r7
 8000ae8:	2101      	movs	r1, #1
 8000aea:	fbb2 fcfe 	udiv	ip, r2, lr
 8000aee:	fb0e 221c 	mls	r2, lr, ip, r2
 8000af2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000af6:	fb04 f20c 	mul.w	r2, r4, ip
 8000afa:	429a      	cmp	r2, r3
 8000afc:	d907      	bls.n	8000b0e <__udivmoddi4+0x11e>
 8000afe:	18fb      	adds	r3, r7, r3
 8000b00:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000b04:	d202      	bcs.n	8000b0c <__udivmoddi4+0x11c>
 8000b06:	429a      	cmp	r2, r3
 8000b08:	f200 80e0 	bhi.w	8000ccc <__udivmoddi4+0x2dc>
 8000b0c:	46c4      	mov	ip, r8
 8000b0e:	1a9b      	subs	r3, r3, r2
 8000b10:	fbb3 f2fe 	udiv	r2, r3, lr
 8000b14:	fb0e 3312 	mls	r3, lr, r2, r3
 8000b18:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000b1c:	fb02 f404 	mul.w	r4, r2, r4
 8000b20:	429c      	cmp	r4, r3
 8000b22:	d907      	bls.n	8000b34 <__udivmoddi4+0x144>
 8000b24:	18fb      	adds	r3, r7, r3
 8000b26:	f102 30ff 	add.w	r0, r2, #4294967295
 8000b2a:	d202      	bcs.n	8000b32 <__udivmoddi4+0x142>
 8000b2c:	429c      	cmp	r4, r3
 8000b2e:	f200 80ca 	bhi.w	8000cc6 <__udivmoddi4+0x2d6>
 8000b32:	4602      	mov	r2, r0
 8000b34:	1b1b      	subs	r3, r3, r4
 8000b36:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000b3a:	e7a5      	b.n	8000a88 <__udivmoddi4+0x98>
 8000b3c:	f1c1 0620 	rsb	r6, r1, #32
 8000b40:	408b      	lsls	r3, r1
 8000b42:	fa22 f706 	lsr.w	r7, r2, r6
 8000b46:	431f      	orrs	r7, r3
 8000b48:	fa0e f401 	lsl.w	r4, lr, r1
 8000b4c:	fa20 f306 	lsr.w	r3, r0, r6
 8000b50:	fa2e fe06 	lsr.w	lr, lr, r6
 8000b54:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000b58:	4323      	orrs	r3, r4
 8000b5a:	fa00 f801 	lsl.w	r8, r0, r1
 8000b5e:	fa1f fc87 	uxth.w	ip, r7
 8000b62:	fbbe f0f9 	udiv	r0, lr, r9
 8000b66:	0c1c      	lsrs	r4, r3, #16
 8000b68:	fb09 ee10 	mls	lr, r9, r0, lr
 8000b6c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000b70:	fb00 fe0c 	mul.w	lr, r0, ip
 8000b74:	45a6      	cmp	lr, r4
 8000b76:	fa02 f201 	lsl.w	r2, r2, r1
 8000b7a:	d909      	bls.n	8000b90 <__udivmoddi4+0x1a0>
 8000b7c:	193c      	adds	r4, r7, r4
 8000b7e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000b82:	f080 809c 	bcs.w	8000cbe <__udivmoddi4+0x2ce>
 8000b86:	45a6      	cmp	lr, r4
 8000b88:	f240 8099 	bls.w	8000cbe <__udivmoddi4+0x2ce>
 8000b8c:	3802      	subs	r0, #2
 8000b8e:	443c      	add	r4, r7
 8000b90:	eba4 040e 	sub.w	r4, r4, lr
 8000b94:	fa1f fe83 	uxth.w	lr, r3
 8000b98:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b9c:	fb09 4413 	mls	r4, r9, r3, r4
 8000ba0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ba4:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ba8:	45a4      	cmp	ip, r4
 8000baa:	d908      	bls.n	8000bbe <__udivmoddi4+0x1ce>
 8000bac:	193c      	adds	r4, r7, r4
 8000bae:	f103 3eff 	add.w	lr, r3, #4294967295
 8000bb2:	f080 8082 	bcs.w	8000cba <__udivmoddi4+0x2ca>
 8000bb6:	45a4      	cmp	ip, r4
 8000bb8:	d97f      	bls.n	8000cba <__udivmoddi4+0x2ca>
 8000bba:	3b02      	subs	r3, #2
 8000bbc:	443c      	add	r4, r7
 8000bbe:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000bc2:	eba4 040c 	sub.w	r4, r4, ip
 8000bc6:	fba0 ec02 	umull	lr, ip, r0, r2
 8000bca:	4564      	cmp	r4, ip
 8000bcc:	4673      	mov	r3, lr
 8000bce:	46e1      	mov	r9, ip
 8000bd0:	d362      	bcc.n	8000c98 <__udivmoddi4+0x2a8>
 8000bd2:	d05f      	beq.n	8000c94 <__udivmoddi4+0x2a4>
 8000bd4:	b15d      	cbz	r5, 8000bee <__udivmoddi4+0x1fe>
 8000bd6:	ebb8 0203 	subs.w	r2, r8, r3
 8000bda:	eb64 0409 	sbc.w	r4, r4, r9
 8000bde:	fa04 f606 	lsl.w	r6, r4, r6
 8000be2:	fa22 f301 	lsr.w	r3, r2, r1
 8000be6:	431e      	orrs	r6, r3
 8000be8:	40cc      	lsrs	r4, r1
 8000bea:	e9c5 6400 	strd	r6, r4, [r5]
 8000bee:	2100      	movs	r1, #0
 8000bf0:	e74f      	b.n	8000a92 <__udivmoddi4+0xa2>
 8000bf2:	fbb1 fcf2 	udiv	ip, r1, r2
 8000bf6:	0c01      	lsrs	r1, r0, #16
 8000bf8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000bfc:	b280      	uxth	r0, r0
 8000bfe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000c02:	463b      	mov	r3, r7
 8000c04:	4638      	mov	r0, r7
 8000c06:	463c      	mov	r4, r7
 8000c08:	46b8      	mov	r8, r7
 8000c0a:	46be      	mov	lr, r7
 8000c0c:	2620      	movs	r6, #32
 8000c0e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000c12:	eba2 0208 	sub.w	r2, r2, r8
 8000c16:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000c1a:	e766      	b.n	8000aea <__udivmoddi4+0xfa>
 8000c1c:	4601      	mov	r1, r0
 8000c1e:	e718      	b.n	8000a52 <__udivmoddi4+0x62>
 8000c20:	4610      	mov	r0, r2
 8000c22:	e72c      	b.n	8000a7e <__udivmoddi4+0x8e>
 8000c24:	f1c6 0220 	rsb	r2, r6, #32
 8000c28:	fa2e f302 	lsr.w	r3, lr, r2
 8000c2c:	40b7      	lsls	r7, r6
 8000c2e:	40b1      	lsls	r1, r6
 8000c30:	fa20 f202 	lsr.w	r2, r0, r2
 8000c34:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c38:	430a      	orrs	r2, r1
 8000c3a:	fbb3 f8fe 	udiv	r8, r3, lr
 8000c3e:	b2bc      	uxth	r4, r7
 8000c40:	fb0e 3318 	mls	r3, lr, r8, r3
 8000c44:	0c11      	lsrs	r1, r2, #16
 8000c46:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c4a:	fb08 f904 	mul.w	r9, r8, r4
 8000c4e:	40b0      	lsls	r0, r6
 8000c50:	4589      	cmp	r9, r1
 8000c52:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000c56:	b280      	uxth	r0, r0
 8000c58:	d93e      	bls.n	8000cd8 <__udivmoddi4+0x2e8>
 8000c5a:	1879      	adds	r1, r7, r1
 8000c5c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000c60:	d201      	bcs.n	8000c66 <__udivmoddi4+0x276>
 8000c62:	4589      	cmp	r9, r1
 8000c64:	d81f      	bhi.n	8000ca6 <__udivmoddi4+0x2b6>
 8000c66:	eba1 0109 	sub.w	r1, r1, r9
 8000c6a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c6e:	fb09 f804 	mul.w	r8, r9, r4
 8000c72:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c76:	b292      	uxth	r2, r2
 8000c78:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c7c:	4542      	cmp	r2, r8
 8000c7e:	d229      	bcs.n	8000cd4 <__udivmoddi4+0x2e4>
 8000c80:	18ba      	adds	r2, r7, r2
 8000c82:	f109 31ff 	add.w	r1, r9, #4294967295
 8000c86:	d2c4      	bcs.n	8000c12 <__udivmoddi4+0x222>
 8000c88:	4542      	cmp	r2, r8
 8000c8a:	d2c2      	bcs.n	8000c12 <__udivmoddi4+0x222>
 8000c8c:	f1a9 0102 	sub.w	r1, r9, #2
 8000c90:	443a      	add	r2, r7
 8000c92:	e7be      	b.n	8000c12 <__udivmoddi4+0x222>
 8000c94:	45f0      	cmp	r8, lr
 8000c96:	d29d      	bcs.n	8000bd4 <__udivmoddi4+0x1e4>
 8000c98:	ebbe 0302 	subs.w	r3, lr, r2
 8000c9c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ca0:	3801      	subs	r0, #1
 8000ca2:	46e1      	mov	r9, ip
 8000ca4:	e796      	b.n	8000bd4 <__udivmoddi4+0x1e4>
 8000ca6:	eba7 0909 	sub.w	r9, r7, r9
 8000caa:	4449      	add	r1, r9
 8000cac:	f1a8 0c02 	sub.w	ip, r8, #2
 8000cb0:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cb4:	fb09 f804 	mul.w	r8, r9, r4
 8000cb8:	e7db      	b.n	8000c72 <__udivmoddi4+0x282>
 8000cba:	4673      	mov	r3, lr
 8000cbc:	e77f      	b.n	8000bbe <__udivmoddi4+0x1ce>
 8000cbe:	4650      	mov	r0, sl
 8000cc0:	e766      	b.n	8000b90 <__udivmoddi4+0x1a0>
 8000cc2:	4608      	mov	r0, r1
 8000cc4:	e6fd      	b.n	8000ac2 <__udivmoddi4+0xd2>
 8000cc6:	443b      	add	r3, r7
 8000cc8:	3a02      	subs	r2, #2
 8000cca:	e733      	b.n	8000b34 <__udivmoddi4+0x144>
 8000ccc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cd0:	443b      	add	r3, r7
 8000cd2:	e71c      	b.n	8000b0e <__udivmoddi4+0x11e>
 8000cd4:	4649      	mov	r1, r9
 8000cd6:	e79c      	b.n	8000c12 <__udivmoddi4+0x222>
 8000cd8:	eba1 0109 	sub.w	r1, r1, r9
 8000cdc:	46c4      	mov	ip, r8
 8000cde:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ce2:	fb09 f804 	mul.w	r8, r9, r4
 8000ce6:	e7c4      	b.n	8000c72 <__udivmoddi4+0x282>

08000ce8 <__aeabi_idiv0>:
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop

08000cec <Clk_En>:
Pin_74H595 Pin_74H595_0;
Pin_74H595 Pin_74H595_1;
Pin_74H595 Pin_74H595_2;
Pin_74H595 Pin_74H595_3;

void Clk_En(uint8_t DS_GPIO_PIN_NUM){
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b08a      	sub	sp, #40	@ 0x28
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	71fb      	strb	r3, [r7, #7]
	Pin_74H595 *Pin_74H595_t;
	if (DS_GPIO_PIN_NUM == DS0){
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
 8000cf8:	2b01      	cmp	r3, #1
 8000cfa:	d102      	bne.n	8000d02 <Clk_En+0x16>
		Pin_74H595_t = &Pin_74H595_0;
 8000cfc:	4b34      	ldr	r3, [pc, #208]	@ (8000dd0 <Clk_En+0xe4>)
 8000cfe:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d00:	e010      	b.n	8000d24 <Clk_En+0x38>
	}
	else if (DS_GPIO_PIN_NUM == DS1){
 8000d02:	79fb      	ldrb	r3, [r7, #7]
 8000d04:	2b03      	cmp	r3, #3
 8000d06:	d102      	bne.n	8000d0e <Clk_En+0x22>
		Pin_74H595_t = &Pin_74H595_1;
 8000d08:	4b32      	ldr	r3, [pc, #200]	@ (8000dd4 <Clk_En+0xe8>)
 8000d0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d0c:	e00a      	b.n	8000d24 <Clk_En+0x38>
	}
	else if (DS_GPIO_PIN_NUM == DS2){
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
 8000d10:	2b05      	cmp	r3, #5
 8000d12:	d102      	bne.n	8000d1a <Clk_En+0x2e>
		Pin_74H595_t = &Pin_74H595_2;
 8000d14:	4b30      	ldr	r3, [pc, #192]	@ (8000dd8 <Clk_En+0xec>)
 8000d16:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d18:	e004      	b.n	8000d24 <Clk_En+0x38>
	}
	else if (DS_GPIO_PIN_NUM == DS3){
 8000d1a:	79fb      	ldrb	r3, [r7, #7]
 8000d1c:	2b07      	cmp	r3, #7
 8000d1e:	d101      	bne.n	8000d24 <Clk_En+0x38>
		Pin_74H595_t = &Pin_74H595_3;
 8000d20:	4b2e      	ldr	r3, [pc, #184]	@ (8000ddc <Clk_En+0xf0>)
 8000d22:	627b      	str	r3, [r7, #36]	@ 0x24
	}
	GPIO_WriteToOutPutPin(Pin_74H595_t->SH_CP.pGPIOx, Pin_74H595_t->SH_CP.GPIO_Pin_Config.GPIO_PinNumber, High);
 8000d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d26:	6858      	ldr	r0, [r3, #4]
 8000d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d2a:	891b      	ldrh	r3, [r3, #8]
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	2201      	movs	r2, #1
 8000d30:	4619      	mov	r1, r3
 8000d32:	f000 fcb1 	bl	8001698 <GPIO_WriteToOutPutPin>
	delay_ms(1);
 8000d36:	2300      	movs	r3, #0
 8000d38:	623b      	str	r3, [r7, #32]
 8000d3a:	e018      	b.n	8000d6e <Clk_En+0x82>
 8000d3c:	4b28      	ldr	r3, [pc, #160]	@ (8000de0 <Clk_En+0xf4>)
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	613b      	str	r3, [r7, #16]
 8000d42:	f001 f8ed 	bl	8001f20 <RCC_GetSystemClock>
 8000d46:	4603      	mov	r3, r0
 8000d48:	4a26      	ldr	r2, [pc, #152]	@ (8000de4 <Clk_En+0xf8>)
 8000d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d4e:	0c9b      	lsrs	r3, r3, #18
 8000d50:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000d54:	fb02 f303 	mul.w	r3, r2, r3
 8000d58:	60fb      	str	r3, [r7, #12]
 8000d5a:	4b21      	ldr	r3, [pc, #132]	@ (8000de0 <Clk_En+0xf4>)
 8000d5c:	685a      	ldr	r2, [r3, #4]
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	68fa      	ldr	r2, [r7, #12]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	d8f8      	bhi.n	8000d5a <Clk_En+0x6e>
 8000d68:	6a3b      	ldr	r3, [r7, #32]
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	623b      	str	r3, [r7, #32]
 8000d6e:	6a3b      	ldr	r3, [r7, #32]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d0e3      	beq.n	8000d3c <Clk_En+0x50>
	GPIO_WriteToOutPutPin(Pin_74H595_t->SH_CP.pGPIOx, Pin_74H595_t->SH_CP.GPIO_Pin_Config.GPIO_PinNumber, Low);
 8000d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d76:	6858      	ldr	r0, [r3, #4]
 8000d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d7a:	891b      	ldrh	r3, [r3, #8]
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	2200      	movs	r2, #0
 8000d80:	4619      	mov	r1, r3
 8000d82:	f000 fc89 	bl	8001698 <GPIO_WriteToOutPutPin>
	delay_ms(1);
 8000d86:	2300      	movs	r3, #0
 8000d88:	61fb      	str	r3, [r7, #28]
 8000d8a:	e018      	b.n	8000dbe <Clk_En+0xd2>
 8000d8c:	4b14      	ldr	r3, [pc, #80]	@ (8000de0 <Clk_En+0xf4>)
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	61bb      	str	r3, [r7, #24]
 8000d92:	f001 f8c5 	bl	8001f20 <RCC_GetSystemClock>
 8000d96:	4603      	mov	r3, r0
 8000d98:	4a12      	ldr	r2, [pc, #72]	@ (8000de4 <Clk_En+0xf8>)
 8000d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d9e:	0c9b      	lsrs	r3, r3, #18
 8000da0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000da4:	fb02 f303 	mul.w	r3, r2, r3
 8000da8:	617b      	str	r3, [r7, #20]
 8000daa:	4b0d      	ldr	r3, [pc, #52]	@ (8000de0 <Clk_En+0xf4>)
 8000dac:	685a      	ldr	r2, [r3, #4]
 8000dae:	69bb      	ldr	r3, [r7, #24]
 8000db0:	1ad3      	subs	r3, r2, r3
 8000db2:	697a      	ldr	r2, [r7, #20]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d8f8      	bhi.n	8000daa <Clk_En+0xbe>
 8000db8:	69fb      	ldr	r3, [r7, #28]
 8000dba:	3301      	adds	r3, #1
 8000dbc:	61fb      	str	r3, [r7, #28]
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d0e3      	beq.n	8000d8c <Clk_En+0xa0>
}
 8000dc4:	bf00      	nop
 8000dc6:	bf00      	nop
 8000dc8:	3728      	adds	r7, #40	@ 0x28
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	2000009c 	.word	0x2000009c
 8000dd4:	200000c4 	.word	0x200000c4
 8000dd8:	200000ec 	.word	0x200000ec
 8000ddc:	20000114 	.word	0x20000114
 8000de0:	e0001000 	.word	0xe0001000
 8000de4:	431bde83 	.word	0x431bde83

08000de8 <Write_data>:

void Write_data(uint8_t data, uint8_t DS_GPIO_PIN_NUM, uint8_t MSBorLSB){
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	71fb      	strb	r3, [r7, #7]
 8000df2:	460b      	mov	r3, r1
 8000df4:	71bb      	strb	r3, [r7, #6]
 8000df6:	4613      	mov	r3, r2
 8000df8:	717b      	strb	r3, [r7, #5]
	Pin_74H595 *Pin_74H595_t;
	if (DS_GPIO_PIN_NUM == DS0){
 8000dfa:	79bb      	ldrb	r3, [r7, #6]
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d102      	bne.n	8000e06 <Write_data+0x1e>
		Pin_74H595_t = &Pin_74H595_0;
 8000e00:	4b3b      	ldr	r3, [pc, #236]	@ (8000ef0 <Write_data+0x108>)
 8000e02:	617b      	str	r3, [r7, #20]
 8000e04:	e010      	b.n	8000e28 <Write_data+0x40>
	}
	else if (DS_GPIO_PIN_NUM == DS1){
 8000e06:	79bb      	ldrb	r3, [r7, #6]
 8000e08:	2b03      	cmp	r3, #3
 8000e0a:	d102      	bne.n	8000e12 <Write_data+0x2a>
		Pin_74H595_t = &Pin_74H595_1;
 8000e0c:	4b39      	ldr	r3, [pc, #228]	@ (8000ef4 <Write_data+0x10c>)
 8000e0e:	617b      	str	r3, [r7, #20]
 8000e10:	e00a      	b.n	8000e28 <Write_data+0x40>
	}
	else if (DS_GPIO_PIN_NUM == DS2){
 8000e12:	79bb      	ldrb	r3, [r7, #6]
 8000e14:	2b05      	cmp	r3, #5
 8000e16:	d102      	bne.n	8000e1e <Write_data+0x36>
		Pin_74H595_t = &Pin_74H595_2;
 8000e18:	4b37      	ldr	r3, [pc, #220]	@ (8000ef8 <Write_data+0x110>)
 8000e1a:	617b      	str	r3, [r7, #20]
 8000e1c:	e004      	b.n	8000e28 <Write_data+0x40>
	}
	else if (DS_GPIO_PIN_NUM == DS3){
 8000e1e:	79bb      	ldrb	r3, [r7, #6]
 8000e20:	2b07      	cmp	r3, #7
 8000e22:	d101      	bne.n	8000e28 <Write_data+0x40>
		Pin_74H595_t = &Pin_74H595_3;
 8000e24:	4b35      	ldr	r3, [pc, #212]	@ (8000efc <Write_data+0x114>)
 8000e26:	617b      	str	r3, [r7, #20]
	}
	if (MSBorLSB == LSB){
 8000e28:	797b      	ldrb	r3, [r7, #5]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d12c      	bne.n	8000e88 <Write_data+0xa0>
		for(int i = 7; i >= 0; i--){
 8000e2e:	2307      	movs	r3, #7
 8000e30:	613b      	str	r3, [r7, #16]
 8000e32:	e021      	b.n	8000e78 <Write_data+0x90>
			if((data >> i) & 0x01){
 8000e34:	79fa      	ldrb	r2, [r7, #7]
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	fa42 f303 	asr.w	r3, r2, r3
 8000e3c:	f003 0301 	and.w	r3, r3, #1
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d009      	beq.n	8000e58 <Write_data+0x70>
				GPIO_WriteToOutPutPin(Pin_74H595_t->DS.pGPIOx, Pin_74H595_t->DS.GPIO_Pin_Config.GPIO_PinNumber, High);
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	6918      	ldr	r0, [r3, #16]
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	8a9b      	ldrh	r3, [r3, #20]
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	2201      	movs	r2, #1
 8000e50:	4619      	mov	r1, r3
 8000e52:	f000 fc21 	bl	8001698 <GPIO_WriteToOutPutPin>
 8000e56:	e008      	b.n	8000e6a <Write_data+0x82>
			}else{
				GPIO_WriteToOutPutPin(Pin_74H595_t->DS.pGPIOx, Pin_74H595_t->DS.GPIO_Pin_Config.GPIO_PinNumber, Low);
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	6918      	ldr	r0, [r3, #16]
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	8a9b      	ldrh	r3, [r3, #20]
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	2200      	movs	r2, #0
 8000e64:	4619      	mov	r1, r3
 8000e66:	f000 fc17 	bl	8001698 <GPIO_WriteToOutPutPin>
			}
			Clk_En(DS_GPIO_PIN_NUM);
 8000e6a:	79bb      	ldrb	r3, [r7, #6]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff ff3d 	bl	8000cec <Clk_En>
		for(int i = 7; i >= 0; i--){
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	3b01      	subs	r3, #1
 8000e76:	613b      	str	r3, [r7, #16]
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	dada      	bge.n	8000e34 <Write_data+0x4c>
		}
		Latch_En(DS_GPIO_PIN_NUM);
 8000e7e:	79bb      	ldrb	r3, [r7, #6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f000 f83d 	bl	8000f00 <Latch_En>
			}
			Clk_En(DS_GPIO_PIN_NUM);
		}
		Latch_En(DS_GPIO_PIN_NUM);
	}
}
 8000e86:	e02e      	b.n	8000ee6 <Write_data+0xfe>
	else if (MSBorLSB == MSB){
 8000e88:	797b      	ldrb	r3, [r7, #5]
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d12b      	bne.n	8000ee6 <Write_data+0xfe>
		for(int i = 0; i < 8; i++){
 8000e8e:	2300      	movs	r3, #0
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	e021      	b.n	8000ed8 <Write_data+0xf0>
			if((data >> i) & 0x01){
 8000e94:	79fa      	ldrb	r2, [r7, #7]
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	fa42 f303 	asr.w	r3, r2, r3
 8000e9c:	f003 0301 	and.w	r3, r3, #1
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d009      	beq.n	8000eb8 <Write_data+0xd0>
				GPIO_WriteToOutPutPin(Pin_74H595_t->DS.pGPIOx, Pin_74H595_t->DS.GPIO_Pin_Config.GPIO_PinNumber, High);
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	6918      	ldr	r0, [r3, #16]
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	8a9b      	ldrh	r3, [r3, #20]
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	2201      	movs	r2, #1
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	f000 fbf1 	bl	8001698 <GPIO_WriteToOutPutPin>
 8000eb6:	e008      	b.n	8000eca <Write_data+0xe2>
				GPIO_WriteToOutPutPin(Pin_74H595_t->DS.pGPIOx, Pin_74H595_t->DS.GPIO_Pin_Config.GPIO_PinNumber, Low);
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	6918      	ldr	r0, [r3, #16]
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	8a9b      	ldrh	r3, [r3, #20]
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	f000 fbe7 	bl	8001698 <GPIO_WriteToOutPutPin>
			Clk_En(DS_GPIO_PIN_NUM);
 8000eca:	79bb      	ldrb	r3, [r7, #6]
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff ff0d 	bl	8000cec <Clk_En>
		for(int i = 0; i < 8; i++){
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	2b07      	cmp	r3, #7
 8000edc:	ddda      	ble.n	8000e94 <Write_data+0xac>
		Latch_En(DS_GPIO_PIN_NUM);
 8000ede:	79bb      	ldrb	r3, [r7, #6]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f000 f80d 	bl	8000f00 <Latch_En>
}
 8000ee6:	bf00      	nop
 8000ee8:	3718      	adds	r7, #24
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	2000009c 	.word	0x2000009c
 8000ef4:	200000c4 	.word	0x200000c4
 8000ef8:	200000ec 	.word	0x200000ec
 8000efc:	20000114 	.word	0x20000114

08000f00 <Latch_En>:

void Latch_En(uint8_t DS_GPIO_PIN_NUM){
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b08a      	sub	sp, #40	@ 0x28
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	71fb      	strb	r3, [r7, #7]
	Pin_74H595 *Pin_74H595_t;
	if (DS_GPIO_PIN_NUM == DS0){
 8000f0a:	79fb      	ldrb	r3, [r7, #7]
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d102      	bne.n	8000f16 <Latch_En+0x16>
		Pin_74H595_t = &Pin_74H595_0;
 8000f10:	4b34      	ldr	r3, [pc, #208]	@ (8000fe4 <Latch_En+0xe4>)
 8000f12:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f14:	e010      	b.n	8000f38 <Latch_En+0x38>
	}
	else if (DS_GPIO_PIN_NUM == DS1){
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	2b03      	cmp	r3, #3
 8000f1a:	d102      	bne.n	8000f22 <Latch_En+0x22>
		Pin_74H595_t = &Pin_74H595_1;
 8000f1c:	4b32      	ldr	r3, [pc, #200]	@ (8000fe8 <Latch_En+0xe8>)
 8000f1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f20:	e00a      	b.n	8000f38 <Latch_En+0x38>
	}
	else if (DS_GPIO_PIN_NUM == DS2){
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	2b05      	cmp	r3, #5
 8000f26:	d102      	bne.n	8000f2e <Latch_En+0x2e>
		Pin_74H595_t = &Pin_74H595_2;
 8000f28:	4b30      	ldr	r3, [pc, #192]	@ (8000fec <Latch_En+0xec>)
 8000f2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f2c:	e004      	b.n	8000f38 <Latch_En+0x38>
	}
	else if (DS_GPIO_PIN_NUM == DS3){
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	2b07      	cmp	r3, #7
 8000f32:	d101      	bne.n	8000f38 <Latch_En+0x38>
		Pin_74H595_t = &Pin_74H595_3;
 8000f34:	4b2e      	ldr	r3, [pc, #184]	@ (8000ff0 <Latch_En+0xf0>)
 8000f36:	627b      	str	r3, [r7, #36]	@ 0x24
	}
	GPIO_WriteToOutPutPin(Pin_74H595_t->ST_CP.pGPIOx, Pin_74H595_t->ST_CP.GPIO_Pin_Config.GPIO_PinNumber, High);
 8000f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f3a:	69d8      	ldr	r0, [r3, #28]
 8000f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f3e:	8c1b      	ldrh	r3, [r3, #32]
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	2201      	movs	r2, #1
 8000f44:	4619      	mov	r1, r3
 8000f46:	f000 fba7 	bl	8001698 <GPIO_WriteToOutPutPin>
	delay_ms(5);
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	623b      	str	r3, [r7, #32]
 8000f4e:	e018      	b.n	8000f82 <Latch_En+0x82>
 8000f50:	4b28      	ldr	r3, [pc, #160]	@ (8000ff4 <Latch_En+0xf4>)
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	613b      	str	r3, [r7, #16]
 8000f56:	f000 ffe3 	bl	8001f20 <RCC_GetSystemClock>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	4a26      	ldr	r2, [pc, #152]	@ (8000ff8 <Latch_En+0xf8>)
 8000f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f62:	0c9b      	lsrs	r3, r3, #18
 8000f64:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000f68:	fb02 f303 	mul.w	r3, r2, r3
 8000f6c:	60fb      	str	r3, [r7, #12]
 8000f6e:	4b21      	ldr	r3, [pc, #132]	@ (8000ff4 <Latch_En+0xf4>)
 8000f70:	685a      	ldr	r2, [r3, #4]
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	1ad3      	subs	r3, r2, r3
 8000f76:	68fa      	ldr	r2, [r7, #12]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d8f8      	bhi.n	8000f6e <Latch_En+0x6e>
 8000f7c:	6a3b      	ldr	r3, [r7, #32]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	623b      	str	r3, [r7, #32]
 8000f82:	6a3b      	ldr	r3, [r7, #32]
 8000f84:	2b04      	cmp	r3, #4
 8000f86:	d9e3      	bls.n	8000f50 <Latch_En+0x50>
	GPIO_WriteToOutPutPin(Pin_74H595_t->ST_CP.pGPIOx, Pin_74H595_t->ST_CP.GPIO_Pin_Config.GPIO_PinNumber, Low);
 8000f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f8a:	69d8      	ldr	r0, [r3, #28]
 8000f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f8e:	8c1b      	ldrh	r3, [r3, #32]
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	2200      	movs	r2, #0
 8000f94:	4619      	mov	r1, r3
 8000f96:	f000 fb7f 	bl	8001698 <GPIO_WriteToOutPutPin>
	delay_ms(5);
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	61fb      	str	r3, [r7, #28]
 8000f9e:	e018      	b.n	8000fd2 <Latch_En+0xd2>
 8000fa0:	4b14      	ldr	r3, [pc, #80]	@ (8000ff4 <Latch_En+0xf4>)
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	61bb      	str	r3, [r7, #24]
 8000fa6:	f000 ffbb 	bl	8001f20 <RCC_GetSystemClock>
 8000faa:	4603      	mov	r3, r0
 8000fac:	4a12      	ldr	r2, [pc, #72]	@ (8000ff8 <Latch_En+0xf8>)
 8000fae:	fba2 2303 	umull	r2, r3, r2, r3
 8000fb2:	0c9b      	lsrs	r3, r3, #18
 8000fb4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000fb8:	fb02 f303 	mul.w	r3, r2, r3
 8000fbc:	617b      	str	r3, [r7, #20]
 8000fbe:	4b0d      	ldr	r3, [pc, #52]	@ (8000ff4 <Latch_En+0xf4>)
 8000fc0:	685a      	ldr	r2, [r3, #4]
 8000fc2:	69bb      	ldr	r3, [r7, #24]
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	697a      	ldr	r2, [r7, #20]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d8f8      	bhi.n	8000fbe <Latch_En+0xbe>
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	61fb      	str	r3, [r7, #28]
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	2b04      	cmp	r3, #4
 8000fd6:	d9e3      	bls.n	8000fa0 <Latch_En+0xa0>
}
 8000fd8:	bf00      	nop
 8000fda:	bf00      	nop
 8000fdc:	3728      	adds	r7, #40	@ 0x28
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	2000009c 	.word	0x2000009c
 8000fe8:	200000c4 	.word	0x200000c4
 8000fec:	200000ec 	.word	0x200000ec
 8000ff0:	20000114 	.word	0x20000114
 8000ff4:	e0001000 	.word	0xe0001000
 8000ff8:	431bde83 	.word	0x431bde83

08000ffc <Set_74HC595>:

Pin_74H595 Set_74HC595(Pin_74H595 *Pin_74H595_t, uint8_t DS_GPIO_PIN_NUM, uint8_t ST_CP_GPIO_PIN_NUM){
 8000ffc:	b5b0      	push	{r4, r5, r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	4611      	mov	r1, r2
 8001008:	461a      	mov	r2, r3
 800100a:	460b      	mov	r3, r1
 800100c:	71fb      	strb	r3, [r7, #7]
 800100e:	4613      	mov	r3, r2
 8001010:	71bb      	strb	r3, [r7, #6]
	GPIOE_PCLK_EN;
 8001012:	4b30      	ldr	r3, [pc, #192]	@ (80010d4 <Set_74HC595+0xd8>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001016:	4a2f      	ldr	r2, [pc, #188]	@ (80010d4 <Set_74HC595+0xd8>)
 8001018:	f043 0310 	orr.w	r3, r3, #16
 800101c:	6313      	str	r3, [r2, #48]	@ 0x30
	Pin_74H595_t->SH_CP.pGPIOx = GPIOE;
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	4a2d      	ldr	r2, [pc, #180]	@ (80010d8 <Set_74HC595+0xdc>)
 8001022:	605a      	str	r2, [r3, #4]
	Pin_74H595_t->SH_CP.GPIO_Pin_Config.GPIO_PinNumber = GPIO_PIN_NUM_0;
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	2200      	movs	r2, #0
 8001028:	811a      	strh	r2, [r3, #8]
	Pin_74H595_t->SH_CP.GPIO_Pin_Config.GPIO_PinMode = GPIO_MODER_OUTPUT;
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	2201      	movs	r2, #1
 800102e:	729a      	strb	r2, [r3, #10]
	Pin_74H595_t->SH_CP.GPIO_Pin_Config.GPIO_PinOPType = GPIO_OTYPER_PP;
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	2200      	movs	r2, #0
 8001034:	735a      	strb	r2, [r3, #13]
	Pin_74H595_t->SH_CP.GPIO_Pin_Config.GPIO_PinSpeed = GPIO_OSPEEDR_HIGH;
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	2202      	movs	r2, #2
 800103a:	72da      	strb	r2, [r3, #11]
	Pin_74H595_t->SH_CP.GPIO_Pin_Config.GPIO_PinPuPdControl = GPIO_PUPDR_PU;
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	2201      	movs	r2, #1
 8001040:	731a      	strb	r2, [r3, #12]
	GPIO_Init_Pin(&(Pin_74H595_t->SH_CP));
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	3304      	adds	r3, #4
 8001046:	4618      	mov	r0, r3
 8001048:	f000 fa20 	bl	800148c <GPIO_Init_Pin>

	Pin_74H595_t->DS.pGPIOx = GPIOE;
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	4a22      	ldr	r2, [pc, #136]	@ (80010d8 <Set_74HC595+0xdc>)
 8001050:	611a      	str	r2, [r3, #16]
	Pin_74H595_t->DS.GPIO_Pin_Config.GPIO_PinNumber = DS_GPIO_PIN_NUM;
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	b29a      	uxth	r2, r3
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	829a      	strh	r2, [r3, #20]
	Pin_74H595_t->DS.GPIO_Pin_Config.GPIO_PinMode = GPIO_MODER_OUTPUT;
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	2201      	movs	r2, #1
 800105e:	759a      	strb	r2, [r3, #22]
	Pin_74H595_t->DS.GPIO_Pin_Config.GPIO_PinOPType = GPIO_OTYPER_PP;
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	2200      	movs	r2, #0
 8001064:	765a      	strb	r2, [r3, #25]
	Pin_74H595_t->DS.GPIO_Pin_Config.GPIO_PinSpeed = GPIO_OSPEEDR_HIGH;
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	2202      	movs	r2, #2
 800106a:	75da      	strb	r2, [r3, #23]
	Pin_74H595_t->DS.GPIO_Pin_Config.GPIO_PinPuPdControl = GPIO_PUPDR_PU;
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	2201      	movs	r2, #1
 8001070:	761a      	strb	r2, [r3, #24]
	GPIO_Init_Pin(&(Pin_74H595_t->DS));
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	3310      	adds	r3, #16
 8001076:	4618      	mov	r0, r3
 8001078:	f000 fa08 	bl	800148c <GPIO_Init_Pin>

	Pin_74H595_t->ST_CP.pGPIOx = GPIOE;
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	4a16      	ldr	r2, [pc, #88]	@ (80010d8 <Set_74HC595+0xdc>)
 8001080:	61da      	str	r2, [r3, #28]
	Pin_74H595_t->ST_CP.GPIO_Pin_Config.GPIO_PinNumber = ST_CP_GPIO_PIN_NUM;
 8001082:	79bb      	ldrb	r3, [r7, #6]
 8001084:	b29a      	uxth	r2, r3
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	841a      	strh	r2, [r3, #32]
	Pin_74H595_t->ST_CP.GPIO_Pin_Config.GPIO_PinMode = GPIO_MODER_OUTPUT;
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	2201      	movs	r2, #1
 800108e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	Pin_74H595_t->ST_CP.GPIO_Pin_Config.GPIO_PinOPType = GPIO_OTYPER_PP;
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	2200      	movs	r2, #0
 8001096:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	Pin_74H595_t->ST_CP.GPIO_Pin_Config.GPIO_PinSpeed = GPIO_OSPEEDR_HIGH;
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	2202      	movs	r2, #2
 800109e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	Pin_74H595_t->ST_CP.GPIO_Pin_Config.GPIO_PinPuPdControl = GPIO_PUPDR_PU;
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	2201      	movs	r2, #1
 80010a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	GPIO_Init_Pin(&(Pin_74H595_t->ST_CP));
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	331c      	adds	r3, #28
 80010ae:	4618      	mov	r0, r3
 80010b0:	f000 f9ec 	bl	800148c <GPIO_Init_Pin>

	return *Pin_74H595_t;
 80010b4:	68fa      	ldr	r2, [r7, #12]
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	4614      	mov	r4, r2
 80010ba:	461d      	mov	r5, r3
 80010bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010c4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80010c8:	e884 0003 	stmia.w	r4, {r0, r1}
}
 80010cc:	68f8      	ldr	r0, [r7, #12]
 80010ce:	3710      	adds	r7, #16
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bdb0      	pop	{r4, r5, r7, pc}
 80010d4:	40023800 	.word	0x40023800
 80010d8:	40021000 	.word	0x40021000

080010dc <init_74HC595>:

void init_74HC595(uint8_t DS_GPIO_PIN_NUM){
 80010dc:	b5b0      	push	{r4, r5, r7, lr}
 80010de:	b08c      	sub	sp, #48	@ 0x30
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (DS_GPIO_PIN_NUM == DS0){
 80010e8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d112      	bne.n	8001116 <init_74HC595+0x3a>
		Pin_74H595_0 = Set_74HC595(&Pin_74H595_0, DS_GPIO_PIN_NUM, ST_CP0);
 80010f0:	4c2d      	ldr	r4, [pc, #180]	@ (80011a8 <init_74HC595+0xcc>)
 80010f2:	4638      	mov	r0, r7
 80010f4:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80010f8:	2302      	movs	r3, #2
 80010fa:	492b      	ldr	r1, [pc, #172]	@ (80011a8 <init_74HC595+0xcc>)
 80010fc:	f7ff ff7e 	bl	8000ffc <Set_74HC595>
 8001100:	4625      	mov	r5, r4
 8001102:	463c      	mov	r4, r7
 8001104:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001106:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001108:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800110a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800110c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001110:	e885 0003 	stmia.w	r5, {r0, r1}
		Pin_74H595_2 = Set_74HC595(&Pin_74H595_2, DS_GPIO_PIN_NUM, ST_CP2);
	}
	else if (DS_GPIO_PIN_NUM == DS3){
		Pin_74H595_2 = Set_74HC595(&Pin_74H595_3, DS_GPIO_PIN_NUM, ST_CP3);
	}
}
 8001114:	e043      	b.n	800119e <init_74HC595+0xc2>
	else if (DS_GPIO_PIN_NUM == DS1){
 8001116:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800111a:	2b03      	cmp	r3, #3
 800111c:	d112      	bne.n	8001144 <init_74HC595+0x68>
		Pin_74H595_1 = Set_74HC595(&Pin_74H595_1, DS_GPIO_PIN_NUM, ST_CP1);
 800111e:	4c23      	ldr	r4, [pc, #140]	@ (80011ac <init_74HC595+0xd0>)
 8001120:	4638      	mov	r0, r7
 8001122:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001126:	2304      	movs	r3, #4
 8001128:	4920      	ldr	r1, [pc, #128]	@ (80011ac <init_74HC595+0xd0>)
 800112a:	f7ff ff67 	bl	8000ffc <Set_74HC595>
 800112e:	4625      	mov	r5, r4
 8001130:	463c      	mov	r4, r7
 8001132:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001134:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001136:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001138:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800113a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800113e:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8001142:	e02c      	b.n	800119e <init_74HC595+0xc2>
	else if (DS_GPIO_PIN_NUM == DS2){
 8001144:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001148:	2b05      	cmp	r3, #5
 800114a:	d112      	bne.n	8001172 <init_74HC595+0x96>
		Pin_74H595_2 = Set_74HC595(&Pin_74H595_2, DS_GPIO_PIN_NUM, ST_CP2);
 800114c:	4c18      	ldr	r4, [pc, #96]	@ (80011b0 <init_74HC595+0xd4>)
 800114e:	4638      	mov	r0, r7
 8001150:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001154:	2306      	movs	r3, #6
 8001156:	4916      	ldr	r1, [pc, #88]	@ (80011b0 <init_74HC595+0xd4>)
 8001158:	f7ff ff50 	bl	8000ffc <Set_74HC595>
 800115c:	4625      	mov	r5, r4
 800115e:	463c      	mov	r4, r7
 8001160:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001162:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001164:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001166:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001168:	e894 0003 	ldmia.w	r4, {r0, r1}
 800116c:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8001170:	e015      	b.n	800119e <init_74HC595+0xc2>
	else if (DS_GPIO_PIN_NUM == DS3){
 8001172:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001176:	2b07      	cmp	r3, #7
 8001178:	d111      	bne.n	800119e <init_74HC595+0xc2>
		Pin_74H595_2 = Set_74HC595(&Pin_74H595_3, DS_GPIO_PIN_NUM, ST_CP3);
 800117a:	4c0d      	ldr	r4, [pc, #52]	@ (80011b0 <init_74HC595+0xd4>)
 800117c:	4638      	mov	r0, r7
 800117e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001182:	2308      	movs	r3, #8
 8001184:	490b      	ldr	r1, [pc, #44]	@ (80011b4 <init_74HC595+0xd8>)
 8001186:	f7ff ff39 	bl	8000ffc <Set_74HC595>
 800118a:	4625      	mov	r5, r4
 800118c:	463c      	mov	r4, r7
 800118e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001190:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001192:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001194:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001196:	e894 0003 	ldmia.w	r4, {r0, r1}
 800119a:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800119e:	bf00      	nop
 80011a0:	3730      	adds	r7, #48	@ 0x30
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bdb0      	pop	{r4, r5, r7, pc}
 80011a6:	bf00      	nop
 80011a8:	2000009c 	.word	0x2000009c
 80011ac:	200000c4 	.word	0x200000c4
 80011b0:	200000ec 	.word	0x200000ec
 80011b4:	20000114 	.word	0x20000114

080011b8 <_ZN6DeviceC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

#include "Device.h"



Device::Device(std::string name){
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	6039      	str	r1, [r7, #0]
	if (name.compare("Living Room") == 0){
 80011c2:	4929      	ldr	r1, [pc, #164]	@ (8001268 <_ZN6DeviceC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xb0>)
 80011c4:	6838      	ldr	r0, [r7, #0]
 80011c6:	f001 fdae 	bl	8002d26 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	bf0c      	ite	eq
 80011d0:	2301      	moveq	r3, #1
 80011d2:	2300      	movne	r3, #0
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d009      	beq.n	80011ee <_ZN6DeviceC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x36>
		id = em_LV_R;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2202      	movs	r2, #2
 80011de:	701a      	strb	r2, [r3, #0]
		id_74HC[0] = DS0;	// For led
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2201      	movs	r2, #1
 80011e4:	705a      	strb	r2, [r3, #1]
		id_74HC[1] = DS3;	// For LCD
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2207      	movs	r2, #7
 80011ea:	709a      	strb	r2, [r3, #2]
 80011ec:	e024      	b.n	8001238 <_ZN6DeviceC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x80>
	}
	else if (name.compare("Kitchen Room") == 0){
 80011ee:	491f      	ldr	r1, [pc, #124]	@ (800126c <_ZN6DeviceC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xb4>)
 80011f0:	6838      	ldr	r0, [r7, #0]
 80011f2:	f001 fd98 	bl	8002d26 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	bf0c      	ite	eq
 80011fc:	2301      	moveq	r3, #1
 80011fe:	2300      	movne	r3, #0
 8001200:	b2db      	uxtb	r3, r3
 8001202:	2b00      	cmp	r3, #0
 8001204:	d006      	beq.n	8001214 <_ZN6DeviceC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x5c>
		id = em_KC_R;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2203      	movs	r2, #3
 800120a:	701a      	strb	r2, [r3, #0]
		id_74HC[0] = DS1;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2203      	movs	r2, #3
 8001210:	705a      	strb	r2, [r3, #1]
 8001212:	e011      	b.n	8001238 <_ZN6DeviceC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x80>
	}

	else if (name.compare("Bed Room") == 0){
 8001214:	4916      	ldr	r1, [pc, #88]	@ (8001270 <_ZN6DeviceC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xb8>)
 8001216:	6838      	ldr	r0, [r7, #0]
 8001218:	f001 fd85 	bl	8002d26 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	bf0c      	ite	eq
 8001222:	2301      	moveq	r3, #1
 8001224:	2300      	movne	r3, #0
 8001226:	b2db      	uxtb	r3, r3
 8001228:	2b00      	cmp	r3, #0
 800122a:	d005      	beq.n	8001238 <_ZN6DeviceC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x80>
		id = em_B_R;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2204      	movs	r2, #4
 8001230:	701a      	strb	r2, [r3, #0]
		id_74HC[0] = DS2;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2205      	movs	r2, #5
 8001236:	705a      	strb	r2, [r3, #1]
	}

	// For shift IC
	for (uint8_t i = 0; i < sizeof(id_74HC); i++){
 8001238:	2300      	movs	r3, #0
 800123a:	73fb      	strb	r3, [r7, #15]
 800123c:	e009      	b.n	8001252 <_ZN6DeviceC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x9a>
		init_74HC595(id_74HC[i]);
 800123e:	7bfb      	ldrb	r3, [r7, #15]
 8001240:	687a      	ldr	r2, [r7, #4]
 8001242:	4413      	add	r3, r2
 8001244:	785b      	ldrb	r3, [r3, #1]
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff ff48 	bl	80010dc <init_74HC595>
	for (uint8_t i = 0; i < sizeof(id_74HC); i++){
 800124c:	7bfb      	ldrb	r3, [r7, #15]
 800124e:	3301      	adds	r3, #1
 8001250:	73fb      	strb	r3, [r7, #15]
 8001252:	7bfb      	ldrb	r3, [r7, #15]
 8001254:	2b04      	cmp	r3, #4
 8001256:	d9f2      	bls.n	800123e <_ZN6DeviceC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x86>
//		lcd_init();
//		i2c_lcd_init();
	}
//	start_dht();
//	Read_DHT();
	Config_Pin();
 8001258:	f000 fb44 	bl	80018e4 <Config_Pin>

}
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	4618      	mov	r0, r3
 8001260:	3710      	adds	r7, #16
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	080031d0 	.word	0x080031d0
 800126c:	080031dc 	.word	0x080031dc
 8001270:	080031ec 	.word	0x080031ec

08001274 <_ZN6Device9TurnOnLedEh>:
	GPIOC_PCLK_DIS;
	GPIOD_PCLK_DIS;
	GPIOE_PCLK_DIS;
}

void Device::TurnOnLed(uint8_t data){
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	460b      	mov	r3, r1
 800127e:	70fb      	strb	r3, [r7, #3]
	Write_data(data, id_74HC[0], MSB);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	7859      	ldrb	r1, [r3, #1]
 8001284:	78fb      	ldrb	r3, [r7, #3]
 8001286:	2201      	movs	r2, #1
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff fdad 	bl	8000de8 <Write_data>
}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <GPIO_Init>:
        else if(pGPIOx == GPIOD) GPIOD_PCLK_DIS;
    }
}

//Init and Denit
void GPIO_Init(GPIO_Handle_t *pGPIOHandel){
 8001296:	b480      	push	{r7}
 8001298:	b085      	sub	sp, #20
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
	for (int Pin_Number = 0; Pin_Number < GPIO_PIN_15; Pin_Number++){
 800129e:	2300      	movs	r3, #0
 80012a0:	60fb      	str	r3, [r7, #12]
 80012a2:	e0e7      	b.n	8001474 <GPIO_Init+0x1de>
		if ((pGPIOHandel->GPIO_Pin_Config.GPIO_PinNumber >> Pin_Number) & 0x1){
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	889b      	ldrh	r3, [r3, #4]
 80012a8:	461a      	mov	r2, r3
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	fa42 f303 	asr.w	r3, r2, r3
 80012b0:	f003 0301 	and.w	r3, r3, #1
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	f000 80da 	beq.w	800146e <GPIO_Init+0x1d8>
//			 1.Configgure mode GPIO pin
			uint32_t temp = 0;
 80012ba:	2300      	movs	r3, #0
 80012bc:	60bb      	str	r3, [r7, #8]
			if(pGPIOHandel->GPIO_Pin_Config.GPIO_PinMode <= GPIO_MODER_ANALOG){
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	799b      	ldrb	r3, [r3, #6]
 80012c2:	2b03      	cmp	r3, #3
 80012c4:	d81d      	bhi.n	8001302 <GPIO_Init+0x6c>
				temp = pGPIOHandel->GPIO_Pin_Config.GPIO_PinMode << (2* Pin_Number);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	799b      	ldrb	r3, [r3, #6]
 80012ca:	461a      	mov	r2, r3
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	60bb      	str	r3, [r7, #8]
				pGPIOHandel->pGPIOx->MODER &= ~(3 << (2* Pin_Number));
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	2103      	movs	r1, #3
 80012e2:	fa01 f303 	lsl.w	r3, r1, r3
 80012e6:	43db      	mvns	r3, r3
 80012e8:	4619      	mov	r1, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	400a      	ands	r2, r1
 80012f0:	601a      	str	r2, [r3, #0]
				pGPIOHandel->pGPIOx->MODER |= temp;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	6819      	ldr	r1, [r3, #0]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	68ba      	ldr	r2, [r7, #8]
 80012fe:	430a      	orrs	r2, r1
 8001300:	601a      	str	r2, [r3, #0]
			}
			else{
				// Interrupt
			}
			temp = 0;
 8001302:	2300      	movs	r3, #0
 8001304:	60bb      	str	r3, [r7, #8]
			// 2.Configure speed
			if(pGPIOHandel->GPIO_Pin_Config.GPIO_PinSpeed <= GPIO_OSPEEDR_VERYHIGH){
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	79db      	ldrb	r3, [r3, #7]
 800130a:	2b03      	cmp	r3, #3
 800130c:	d81d      	bhi.n	800134a <GPIO_Init+0xb4>
				temp = pGPIOHandel->GPIO_Pin_Config.GPIO_PinSpeed << (2* Pin_Number);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	79db      	ldrb	r3, [r3, #7]
 8001312:	461a      	mov	r2, r3
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	60bb      	str	r3, [r7, #8]
				pGPIOHandel->pGPIOx->OSPEEDR &= ~(3 << (2* Pin_Number));
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	689a      	ldr	r2, [r3, #8]
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	2103      	movs	r1, #3
 800132a:	fa01 f303 	lsl.w	r3, r1, r3
 800132e:	43db      	mvns	r3, r3
 8001330:	4619      	mov	r1, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	400a      	ands	r2, r1
 8001338:	609a      	str	r2, [r3, #8]
				pGPIOHandel->pGPIOx->OSPEEDR |= temp;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	6899      	ldr	r1, [r3, #8]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	68ba      	ldr	r2, [r7, #8]
 8001346:	430a      	orrs	r2, r1
 8001348:	609a      	str	r2, [r3, #8]
			}
			else{
			   // Interrupt
			}
			temp = 0;
 800134a:	2300      	movs	r3, #0
 800134c:	60bb      	str	r3, [r7, #8]

			// 3.Configure pupd setting
			if(pGPIOHandel->GPIO_Pin_Config.GPIO_PinPuPdControl <= GPIO_PUPDR_RESERVED){
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	7a1b      	ldrb	r3, [r3, #8]
 8001352:	2b03      	cmp	r3, #3
 8001354:	d81d      	bhi.n	8001392 <GPIO_Init+0xfc>
				temp = pGPIOHandel->GPIO_Pin_Config.GPIO_PinPuPdControl << (2* Pin_Number);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	7a1b      	ldrb	r3, [r3, #8]
 800135a:	461a      	mov	r2, r3
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	60bb      	str	r3, [r7, #8]
				pGPIOHandel->pGPIOx->PUPDR &= ~(3 << (2* Pin_Number));
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	68da      	ldr	r2, [r3, #12]
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	2103      	movs	r1, #3
 8001372:	fa01 f303 	lsl.w	r3, r1, r3
 8001376:	43db      	mvns	r3, r3
 8001378:	4619      	mov	r1, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	400a      	ands	r2, r1
 8001380:	60da      	str	r2, [r3, #12]
				pGPIOHandel->pGPIOx->PUPDR |= temp;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	68d9      	ldr	r1, [r3, #12]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	68ba      	ldr	r2, [r7, #8]
 800138e:	430a      	orrs	r2, r1
 8001390:	60da      	str	r2, [r3, #12]
			}
			else{
				// Interrupt
			}
			temp = 0;
 8001392:	2300      	movs	r3, #0
 8001394:	60bb      	str	r3, [r7, #8]
			// 4.Configure otype
			if(pGPIOHandel->GPIO_Pin_Config.GPIO_PinOPType <= GPIO_OTYPER_OD){
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	7a5b      	ldrb	r3, [r3, #9]
 800139a:	2b01      	cmp	r3, #1
 800139c:	d81b      	bhi.n	80013d6 <GPIO_Init+0x140>
				temp = pGPIOHandel->GPIO_Pin_Config.GPIO_PinOPType << Pin_Number;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	7a5b      	ldrb	r3, [r3, #9]
 80013a2:	461a      	mov	r2, r3
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	60bb      	str	r3, [r7, #8]
				pGPIOHandel->pGPIOx->OTYPER &= ~(1 << Pin_Number);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	685a      	ldr	r2, [r3, #4]
 80013b2:	2101      	movs	r1, #1
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ba:	43db      	mvns	r3, r3
 80013bc:	4619      	mov	r1, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	400a      	ands	r2, r1
 80013c4:	605a      	str	r2, [r3, #4]
				pGPIOHandel->pGPIOx->OTYPER |= temp;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	6859      	ldr	r1, [r3, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	68ba      	ldr	r2, [r7, #8]
 80013d2:	430a      	orrs	r2, r1
 80013d4:	605a      	str	r2, [r3, #4]
			}
			else{
				// Interrupt
			}
			temp = 0;
 80013d6:	2300      	movs	r3, #0
 80013d8:	60bb      	str	r3, [r7, #8]
			// 5.Configure alt func mode
			if (pGPIOHandel->GPIO_Pin_Config.GPIO_PinAltFunMode_High <= GPIO_AFRH_AF15){
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	7a9b      	ldrb	r3, [r3, #10]
 80013de:	2b0f      	cmp	r3, #15
 80013e0:	d81f      	bhi.n	8001422 <GPIO_Init+0x18c>
				temp = pGPIOHandel->GPIO_Pin_Config.GPIO_PinAltFunMode_High << (4 * (Pin_Number - 8));
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	7a9b      	ldrb	r3, [r3, #10]
 80013e6:	461a      	mov	r2, r3
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	3b08      	subs	r3, #8
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	60bb      	str	r3, [r7, #8]
				pGPIOHandel->pGPIOx->AFRH &= ~(4 << (4 * (Pin_Number - 8)));
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	3b08      	subs	r3, #8
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	2104      	movs	r1, #4
 8001402:	fa01 f303 	lsl.w	r3, r1, r3
 8001406:	43db      	mvns	r3, r3
 8001408:	4619      	mov	r1, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	400a      	ands	r2, r1
 8001410:	625a      	str	r2, [r3, #36]	@ 0x24
				pGPIOHandel->pGPIOx->AFRH |= temp;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	68ba      	ldr	r2, [r7, #8]
 800141e:	430a      	orrs	r2, r1
 8001420:	625a      	str	r2, [r3, #36]	@ 0x24
			}

			temp = 0;
 8001422:	2300      	movs	r3, #0
 8001424:	60bb      	str	r3, [r7, #8]
			if (pGPIOHandel->GPIO_Pin_Config.GPIO_PinAltFunMode_Low <= GPIO_AFRL_AF15){
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	7adb      	ldrb	r3, [r3, #11]
 800142a:	2b0f      	cmp	r3, #15
 800142c:	d81d      	bhi.n	800146a <GPIO_Init+0x1d4>
				temp = pGPIOHandel->GPIO_Pin_Config.GPIO_PinAltFunMode_Low << (4 * (Pin_Number));
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	7adb      	ldrb	r3, [r3, #11]
 8001432:	461a      	mov	r2, r3
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	60bb      	str	r3, [r7, #8]
				pGPIOHandel->pGPIOx->AFRL &= ~(4 << (4 * Pin_Number));
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	6a1a      	ldr	r2, [r3, #32]
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	2104      	movs	r1, #4
 800144a:	fa01 f303 	lsl.w	r3, r1, r3
 800144e:	43db      	mvns	r3, r3
 8001450:	4619      	mov	r1, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	400a      	ands	r2, r1
 8001458:	621a      	str	r2, [r3, #32]
				pGPIOHandel->pGPIOx->AFRL |= temp;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	6a19      	ldr	r1, [r3, #32]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	68ba      	ldr	r2, [r7, #8]
 8001466:	430a      	orrs	r2, r1
 8001468:	621a      	str	r2, [r3, #32]
			}
			temp = 0;
 800146a:	2300      	movs	r3, #0
 800146c:	60bb      	str	r3, [r7, #8]
	for (int Pin_Number = 0; Pin_Number < GPIO_PIN_15; Pin_Number++){
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	3301      	adds	r3, #1
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800147a:	f6ff af13 	blt.w	80012a4 <GPIO_Init+0xe>
		}
	}
}
 800147e:	bf00      	nop
 8001480:	bf00      	nop
 8001482:	3714      	adds	r7, #20
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <GPIO_Init_Pin>:


void GPIO_Init_Pin(GPIO_Handle_t *pGPIOHandel){	// Exactly Timer config
 800148c:	b480      	push	{r7}
 800148e:	b085      	sub	sp, #20
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 8001494:	2300      	movs	r3, #0
 8001496:	60fb      	str	r3, [r7, #12]
	if(pGPIOHandel->GPIO_Pin_Config.GPIO_PinMode <= GPIO_MODER_ANALOG){
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	799b      	ldrb	r3, [r3, #6]
 800149c:	2b03      	cmp	r3, #3
 800149e:	d81f      	bhi.n	80014e0 <GPIO_Init_Pin+0x54>
		temp = pGPIOHandel->GPIO_Pin_Config.GPIO_PinMode << (2* pGPIOHandel->GPIO_Pin_Config.GPIO_PinNumber);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	799b      	ldrb	r3, [r3, #6]
 80014a4:	461a      	mov	r2, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	889b      	ldrh	r3, [r3, #4]
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	60fb      	str	r3, [r7, #12]
		pGPIOHandel->pGPIOx->MODER &= ~(3 << (2* pGPIOHandel->GPIO_Pin_Config.GPIO_PinNumber));
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	889b      	ldrh	r3, [r3, #4]
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	2103      	movs	r1, #3
 80014c0:	fa01 f303 	lsl.w	r3, r1, r3
 80014c4:	43db      	mvns	r3, r3
 80014c6:	4619      	mov	r1, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	400a      	ands	r2, r1
 80014ce:	601a      	str	r2, [r3, #0]
		pGPIOHandel->pGPIOx->MODER |= temp;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	6819      	ldr	r1, [r3, #0]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	68fa      	ldr	r2, [r7, #12]
 80014dc:	430a      	orrs	r2, r1
 80014de:	601a      	str	r2, [r3, #0]
	}
	else{
		// Interrupt
	}
	temp = 0;
 80014e0:	2300      	movs	r3, #0
 80014e2:	60fb      	str	r3, [r7, #12]
	// 2.Configure speed
	if(pGPIOHandel->GPIO_Pin_Config.GPIO_PinSpeed <= GPIO_OSPEEDR_VERYHIGH){
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	79db      	ldrb	r3, [r3, #7]
 80014e8:	2b03      	cmp	r3, #3
 80014ea:	d81f      	bhi.n	800152c <GPIO_Init_Pin+0xa0>
		temp = pGPIOHandel->GPIO_Pin_Config.GPIO_PinSpeed << (2* pGPIOHandel->GPIO_Pin_Config.GPIO_PinNumber);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	79db      	ldrb	r3, [r3, #7]
 80014f0:	461a      	mov	r2, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	889b      	ldrh	r3, [r3, #4]
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	60fb      	str	r3, [r7, #12]
		pGPIOHandel->pGPIOx->OSPEEDR &= ~(3 << (2* pGPIOHandel->GPIO_Pin_Config.GPIO_PinNumber));
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	689a      	ldr	r2, [r3, #8]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	889b      	ldrh	r3, [r3, #4]
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	2103      	movs	r1, #3
 800150c:	fa01 f303 	lsl.w	r3, r1, r3
 8001510:	43db      	mvns	r3, r3
 8001512:	4619      	mov	r1, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	400a      	ands	r2, r1
 800151a:	609a      	str	r2, [r3, #8]
		pGPIOHandel->pGPIOx->OSPEEDR |= temp;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	6899      	ldr	r1, [r3, #8]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	68fa      	ldr	r2, [r7, #12]
 8001528:	430a      	orrs	r2, r1
 800152a:	609a      	str	r2, [r3, #8]
	}
	else{
	   // Interrupt
	}
	temp = 0;
 800152c:	2300      	movs	r3, #0
 800152e:	60fb      	str	r3, [r7, #12]

	// 3.Configure pupd setting
	if(pGPIOHandel->GPIO_Pin_Config.GPIO_PinPuPdControl <= GPIO_PUPDR_RESERVED){
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	7a1b      	ldrb	r3, [r3, #8]
 8001534:	2b03      	cmp	r3, #3
 8001536:	d81f      	bhi.n	8001578 <GPIO_Init_Pin+0xec>
		temp = pGPIOHandel->GPIO_Pin_Config.GPIO_PinPuPdControl << (2* pGPIOHandel->GPIO_Pin_Config.GPIO_PinNumber);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	7a1b      	ldrb	r3, [r3, #8]
 800153c:	461a      	mov	r2, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	889b      	ldrh	r3, [r3, #4]
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	60fb      	str	r3, [r7, #12]
		pGPIOHandel->pGPIOx->PUPDR &= ~(3 << (2* pGPIOHandel->GPIO_Pin_Config.GPIO_PinNumber));
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	68da      	ldr	r2, [r3, #12]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	889b      	ldrh	r3, [r3, #4]
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	2103      	movs	r1, #3
 8001558:	fa01 f303 	lsl.w	r3, r1, r3
 800155c:	43db      	mvns	r3, r3
 800155e:	4619      	mov	r1, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	400a      	ands	r2, r1
 8001566:	60da      	str	r2, [r3, #12]
		pGPIOHandel->pGPIOx->PUPDR |= temp;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	68d9      	ldr	r1, [r3, #12]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	68fa      	ldr	r2, [r7, #12]
 8001574:	430a      	orrs	r2, r1
 8001576:	60da      	str	r2, [r3, #12]
	}
	else{
		// Interrupt
	}
	temp = 0;
 8001578:	2300      	movs	r3, #0
 800157a:	60fb      	str	r3, [r7, #12]
	// 4.Configure otype
	if(pGPIOHandel->GPIO_Pin_Config.GPIO_PinOPType <= GPIO_OTYPER_OD){
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	7a5b      	ldrb	r3, [r3, #9]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d81d      	bhi.n	80015c0 <GPIO_Init_Pin+0x134>
		temp = pGPIOHandel->GPIO_Pin_Config.GPIO_PinOPType << pGPIOHandel->GPIO_Pin_Config.GPIO_PinNumber;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	7a5b      	ldrb	r3, [r3, #9]
 8001588:	461a      	mov	r2, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	889b      	ldrh	r3, [r3, #4]
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	60fb      	str	r3, [r7, #12]
		pGPIOHandel->pGPIOx->OTYPER &= ~(1 << pGPIOHandel->GPIO_Pin_Config.GPIO_PinNumber);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	685a      	ldr	r2, [r3, #4]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	889b      	ldrh	r3, [r3, #4]
 800159e:	4619      	mov	r1, r3
 80015a0:	2301      	movs	r3, #1
 80015a2:	408b      	lsls	r3, r1
 80015a4:	43db      	mvns	r3, r3
 80015a6:	4619      	mov	r1, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	400a      	ands	r2, r1
 80015ae:	605a      	str	r2, [r3, #4]
		pGPIOHandel->pGPIOx->OTYPER |= temp;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	6859      	ldr	r1, [r3, #4]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	68fa      	ldr	r2, [r7, #12]
 80015bc:	430a      	orrs	r2, r1
 80015be:	605a      	str	r2, [r3, #4]
	}
	else{
		// Interrupt
	}
	temp = 0;
 80015c0:	2300      	movs	r3, #0
 80015c2:	60fb      	str	r3, [r7, #12]
	// 5.Configure alt func mode
	if (pGPIOHandel->GPIO_Pin_Config.GPIO_PinAltFunMode_High <= GPIO_AFRH_AF15){
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	7a9b      	ldrb	r3, [r3, #10]
 80015c8:	2b0f      	cmp	r3, #15
 80015ca:	d821      	bhi.n	8001610 <GPIO_Init_Pin+0x184>
		temp = pGPIOHandel->GPIO_Pin_Config.GPIO_PinAltFunMode_High << (4 * (pGPIOHandel->GPIO_Pin_Config.GPIO_PinNumber - 8));
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	7a9b      	ldrb	r3, [r3, #10]
 80015d0:	461a      	mov	r2, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	889b      	ldrh	r3, [r3, #4]
 80015d6:	3b08      	subs	r3, #8
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	fa02 f303 	lsl.w	r3, r2, r3
 80015de:	60fb      	str	r3, [r7, #12]
		pGPIOHandel->pGPIOx->AFRH &= ~(4 << (4 * (pGPIOHandel->GPIO_Pin_Config.GPIO_PinNumber - 8)));
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	889b      	ldrh	r3, [r3, #4]
 80015ea:	3b08      	subs	r3, #8
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	2104      	movs	r1, #4
 80015f0:	fa01 f303 	lsl.w	r3, r1, r3
 80015f4:	43db      	mvns	r3, r3
 80015f6:	4619      	mov	r1, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	400a      	ands	r2, r1
 80015fe:	625a      	str	r2, [r3, #36]	@ 0x24
		pGPIOHandel->pGPIOx->AFRH |= temp;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	68fa      	ldr	r2, [r7, #12]
 800160c:	430a      	orrs	r2, r1
 800160e:	625a      	str	r2, [r3, #36]	@ 0x24
	}

	temp = 0;
 8001610:	2300      	movs	r3, #0
 8001612:	60fb      	str	r3, [r7, #12]
	if (pGPIOHandel->GPIO_Pin_Config.GPIO_PinAltFunMode_Low <= GPIO_AFRL_AF15){
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	7adb      	ldrb	r3, [r3, #11]
 8001618:	2b0f      	cmp	r3, #15
 800161a:	d81f      	bhi.n	800165c <GPIO_Init_Pin+0x1d0>
		temp = pGPIOHandel->GPIO_Pin_Config.GPIO_PinAltFunMode_Low << (4 * (pGPIOHandel->GPIO_Pin_Config.GPIO_PinNumber));
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	7adb      	ldrb	r3, [r3, #11]
 8001620:	461a      	mov	r2, r3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	889b      	ldrh	r3, [r3, #4]
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	60fb      	str	r3, [r7, #12]
		pGPIOHandel->pGPIOx->AFRL &= ~(4 << (4 * pGPIOHandel->GPIO_Pin_Config.GPIO_PinNumber));
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	6a1a      	ldr	r2, [r3, #32]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	889b      	ldrh	r3, [r3, #4]
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	2104      	movs	r1, #4
 800163c:	fa01 f303 	lsl.w	r3, r1, r3
 8001640:	43db      	mvns	r3, r3
 8001642:	4619      	mov	r1, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	400a      	ands	r2, r1
 800164a:	621a      	str	r2, [r3, #32]
		pGPIOHandel->pGPIOx->AFRL |= temp;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	6a19      	ldr	r1, [r3, #32]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	68fa      	ldr	r2, [r7, #12]
 8001658:	430a      	orrs	r2, r1
 800165a:	621a      	str	r2, [r3, #32]
	}
	temp = 0;
 800165c:	2300      	movs	r3, #0
 800165e:	60fb      	str	r3, [r7, #12]
}
 8001660:	bf00      	nop
 8001662:	3714      	adds	r7, #20
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <GPIO_ReadFromInputPin>:
    else if(pGPIOx == GPIOC) GPIOC_REG_RST();
    else if(pGPIOx == GPIOD) GPIOC_REG_RST();
}

// Data read and write
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIO, uint8_t GPIO_PinNumber){
 800166c:	b480      	push	{r7}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	460b      	mov	r3, r1
 8001676:	70fb      	strb	r3, [r7, #3]
    uint8_t value;
    value = (uint8_t)((pGPIO->IDR >> GPIO_PinNumber) & 0x00000001);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	691a      	ldr	r2, [r3, #16]
 800167c:	78fb      	ldrb	r3, [r7, #3]
 800167e:	fa22 f303 	lsr.w	r3, r2, r3
 8001682:	b2db      	uxtb	r3, r3
 8001684:	f003 0301 	and.w	r3, r3, #1
 8001688:	73fb      	strb	r3, [r7, #15]
    return value;
 800168a:	7bfb      	ldrb	r3, [r7, #15]
}
 800168c:	4618      	mov	r0, r3
 800168e:	3714      	adds	r7, #20
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <GPIO_WriteToOutPutPin>:
    uint16_t value;
    value = (uint16_t)(pGPIOx->IDR);
    return value;
}

void GPIO_WriteToOutPutPin(GPIO_RegDef_t *pGPIOx, uint8_t GPIO_PinNumber, uint8_t Status){
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	460b      	mov	r3, r1
 80016a2:	70fb      	strb	r3, [r7, #3]
 80016a4:	4613      	mov	r3, r2
 80016a6:	70bb      	strb	r3, [r7, #2]
    if(Status == GPIO_PIN_SET){
 80016a8:	78bb      	ldrb	r3, [r7, #2]
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d109      	bne.n	80016c2 <GPIO_WriteToOutPutPin+0x2a>
        pGPIOx->ODR |= (1 << GPIO_PinNumber);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	695b      	ldr	r3, [r3, #20]
 80016b2:	78fa      	ldrb	r2, [r7, #3]
 80016b4:	2101      	movs	r1, #1
 80016b6:	fa01 f202 	lsl.w	r2, r1, r2
 80016ba:	431a      	orrs	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	615a      	str	r2, [r3, #20]
    }
    else{
        pGPIOx->ODR &= ~(1 << GPIO_PinNumber);
    }
}
 80016c0:	e009      	b.n	80016d6 <GPIO_WriteToOutPutPin+0x3e>
        pGPIOx->ODR &= ~(1 << GPIO_PinNumber);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	695b      	ldr	r3, [r3, #20]
 80016c6:	78fa      	ldrb	r2, [r7, #3]
 80016c8:	2101      	movs	r1, #1
 80016ca:	fa01 f202 	lsl.w	r2, r1, r2
 80016ce:	43d2      	mvns	r2, r2
 80016d0:	401a      	ands	r2, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	615a      	str	r2, [r3, #20]
}
 80016d6:	bf00      	nop
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
	...

080016e4 <Config_GPIO_USART>:
#include"USART.h"

static void Config_GPIO_USART();
static uint8_t USART_GetFlagStatus(USART_RegDef_t *pUARTx,uint32_t FlagName);
// Enable GPIO for I2C
static void Config_GPIO_USART(){
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
	GPIOA_PCLK_EN;
 80016ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001724 <Config_GPIO_USART+0x40>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ee:	4a0d      	ldr	r2, [pc, #52]	@ (8001724 <Config_GPIO_USART+0x40>)
 80016f0:	f043 0301 	orr.w	r3, r3, #1
 80016f4:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIO_Handle_t TX_RX;	// PA2, PA3
	TX_RX.pGPIOx = GPIOA;
 80016f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001728 <Config_GPIO_USART+0x44>)
 80016f8:	607b      	str	r3, [r7, #4]
	TX_RX.GPIO_Pin_Config.GPIO_PinNumber = PIN_NUM_2 | PIN_NUM_3;
 80016fa:	230c      	movs	r3, #12
 80016fc:	813b      	strh	r3, [r7, #8]
	TX_RX.GPIO_Pin_Config.GPIO_PinMode = GPIO_MODER_ALTFM;
 80016fe:	2302      	movs	r3, #2
 8001700:	72bb      	strb	r3, [r7, #10]
	TX_RX.GPIO_Pin_Config.GPIO_PinOPType = GPIO_OTYPER_PP;
 8001702:	2300      	movs	r3, #0
 8001704:	737b      	strb	r3, [r7, #13]
	TX_RX.GPIO_Pin_Config.GPIO_PinSpeed = GPIO_OSPEEDR_HIGH;
 8001706:	2302      	movs	r3, #2
 8001708:	72fb      	strb	r3, [r7, #11]
	TX_RX.GPIO_Pin_Config.GPIO_PinPuPdControl = GPIO_PUPDR_NOPUPD;
 800170a:	2300      	movs	r3, #0
 800170c:	733b      	strb	r3, [r7, #12]
	TX_RX.GPIO_Pin_Config.GPIO_PinAltFunMode_Low = GPIO_AFRL_AF7;
 800170e:	2307      	movs	r3, #7
 8001710:	73fb      	strb	r3, [r7, #15]
	GPIO_Init(&TX_RX);
 8001712:	1d3b      	adds	r3, r7, #4
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff fdbe 	bl	8001296 <GPIO_Init>
}
 800171a:	bf00      	nop
 800171c:	3710      	adds	r7, #16
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40023800 	.word	0x40023800
 8001728:	40020000 	.word	0x40020000

0800172c <USART_Init>:

void USART_Init(USART_Handle_t *pUSARTHandle)
{
 800172c:	b5b0      	push	{r4, r5, r7, lr}
 800172e:	b088      	sub	sp, #32
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
	//Config GPIO
	Config_GPIO_USART();
 8001734:	f7ff ffd6 	bl	80016e4 <Config_GPIO_USART>
	// Enable USART
	USART2_PLCK_EN;
 8001738:	4b42      	ldr	r3, [pc, #264]	@ (8001844 <USART_Init+0x118>)
 800173a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800173c:	4a41      	ldr	r2, [pc, #260]	@ (8001844 <USART_Init+0x118>)
 800173e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001742:	6413      	str	r3, [r2, #64]	@ 0x40

	// Enable USART (TE, RE, UE)
	pUSARTHandle->pUSARTx->CR1 = 0x00;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2200      	movs	r2, #0
 800174a:	60da      	str	r2, [r3, #12]
	pUSARTHandle->pUSARTx->CR1 |= (1<<13);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	68da      	ldr	r2, [r3, #12]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800175a:	60da      	str	r2, [r3, #12]

	pUSARTHandle->pUSARTx->CR1 |= (1<<2);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	68da      	ldr	r2, [r3, #12]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f042 0204 	orr.w	r2, r2, #4
 800176a:	60da      	str	r2, [r3, #12]
	pUSARTHandle->pUSARTx->CR1 |= (1<<3);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	68da      	ldr	r2, [r3, #12]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f042 0208 	orr.w	r2, r2, #8
 800177a:	60da      	str	r2, [r3, #12]

	//pUSARTHandle->pUSARTx->CR1 |= (M<<12);  // M =0; 8 bit word length

	// Set Baud rate
	uint32_t pclk1 = RCC_GetPCLK1Value();
 800177c:	f000 fb7e 	bl	8001e7c <RCC_GetPCLK1Value>
 8001780:	61f8      	str	r0, [r7, #28]

	if (pUSARTHandle->USART_Config.USART_Baud > 0){
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d057      	beq.n	800183a <USART_Init+0x10e>
	    uint8_t over8 = (pUSARTHandle->pUSARTx->CR1 >> 15) & 0x1;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	0bdb      	lsrs	r3, r3, #15
 8001792:	b2db      	uxtb	r3, r3
 8001794:	f003 0301 	and.w	r3, r3, #1
 8001798:	76fb      	strb	r3, [r7, #27]
	    uint8_t div = over8 ? 8 : 16;
 800179a:	7efb      	ldrb	r3, [r7, #27]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <USART_Init+0x78>
 80017a0:	2308      	movs	r3, #8
 80017a2:	e000      	b.n	80017a6 <USART_Init+0x7a>
 80017a4:	2310      	movs	r3, #16
 80017a6:	76bb      	strb	r3, [r7, #26]

	    double usartdiv = (double)pclk1 / (div * pUSARTHandle->USART_Config.USART_Baud);
 80017a8:	69f8      	ldr	r0, [r7, #28]
 80017aa:	f7fe fe5d 	bl	8000468 <__aeabi_ui2d>
 80017ae:	4604      	mov	r4, r0
 80017b0:	460d      	mov	r5, r1
 80017b2:	7ebb      	ldrb	r3, [r7, #26]
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	6892      	ldr	r2, [r2, #8]
 80017b8:	fb02 f303 	mul.w	r3, r2, r3
 80017bc:	4618      	mov	r0, r3
 80017be:	f7fe fe53 	bl	8000468 <__aeabi_ui2d>
 80017c2:	4602      	mov	r2, r0
 80017c4:	460b      	mov	r3, r1
 80017c6:	4620      	mov	r0, r4
 80017c8:	4629      	mov	r1, r5
 80017ca:	f7fe fff1 	bl	80007b0 <__aeabi_ddiv>
 80017ce:	4602      	mov	r2, r0
 80017d0:	460b      	mov	r3, r1
 80017d2:	e9c7 2304 	strd	r2, r3, [r7, #16]
	    uint32_t mantissa = (uint32_t)usartdiv;
 80017d6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80017da:	f7ff f8d1 	bl	8000980 <__aeabi_d2uiz>
 80017de:	4603      	mov	r3, r0
 80017e0:	60fb      	str	r3, [r7, #12]
	    uint32_t fraction = (uint32_t)((usartdiv - mantissa) * ((over8) ? 8 : 16));
 80017e2:	68f8      	ldr	r0, [r7, #12]
 80017e4:	f7fe fe40 	bl	8000468 <__aeabi_ui2d>
 80017e8:	4602      	mov	r2, r0
 80017ea:	460b      	mov	r3, r1
 80017ec:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80017f0:	f7fe fcfc 	bl	80001ec <__aeabi_dsub>
 80017f4:	4602      	mov	r2, r0
 80017f6:	460b      	mov	r3, r1
 80017f8:	4614      	mov	r4, r2
 80017fa:	461d      	mov	r5, r3
 80017fc:	7efb      	ldrb	r3, [r7, #27]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d003      	beq.n	800180a <USART_Init+0xde>
 8001802:	f04f 0000 	mov.w	r0, #0
 8001806:	4910      	ldr	r1, [pc, #64]	@ (8001848 <USART_Init+0x11c>)
 8001808:	e002      	b.n	8001810 <USART_Init+0xe4>
 800180a:	f04f 0000 	mov.w	r0, #0
 800180e:	490f      	ldr	r1, [pc, #60]	@ (800184c <USART_Init+0x120>)
 8001810:	4622      	mov	r2, r4
 8001812:	462b      	mov	r3, r5
 8001814:	f7fe fea2 	bl	800055c <__aeabi_dmul>
 8001818:	4602      	mov	r2, r0
 800181a:	460b      	mov	r3, r1
 800181c:	4610      	mov	r0, r2
 800181e:	4619      	mov	r1, r3
 8001820:	f7ff f8ae 	bl	8000980 <__aeabi_d2uiz>
 8001824:	4603      	mov	r3, r0
 8001826:	60bb      	str	r3, [r7, #8]

	    pUSARTHandle->pUSARTx->BRR = (mantissa << 4) | (fraction & 0xF);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	0119      	lsls	r1, r3, #4
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	f003 020f 	and.w	r2, r3, #15
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	430a      	orrs	r2, r1
 8001838:	609a      	str	r2, [r3, #8]
	}
}
 800183a:	bf00      	nop
 800183c:	3720      	adds	r7, #32
 800183e:	46bd      	mov	sp, r7
 8001840:	bdb0      	pop	{r4, r5, r7, pc}
 8001842:	bf00      	nop
 8001844:	40023800 	.word	0x40023800
 8001848:	40200000 	.word	0x40200000
 800184c:	40300000 	.word	0x40300000

08001850 <USART_SendChar>:

void USART_SendChar(USART_RegDef_t *pUARTx, uint8_t data){
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	460b      	mov	r3, r1
 800185a:	70fb      	strb	r3, [r7, #3]
	while(!(USART_GetFlagStatus(pUARTx, USART_FLAG_TxE)));
 800185c:	bf00      	nop
 800185e:	2180      	movs	r1, #128	@ 0x80
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f000 f82a 	bl	80018ba <USART_GetFlagStatus>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d0f8      	beq.n	800185e <USART_SendChar+0xe>
	pUARTx->DR = data;
 800186c:	78fa      	ldrb	r2, [r7, #3]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	605a      	str	r2, [r3, #4]
	while(!(USART_GetFlagStatus(pUARTx, USART_FLAG_TC)));
 8001872:	bf00      	nop
 8001874:	2140      	movs	r1, #64	@ 0x40
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f000 f81f 	bl	80018ba <USART_GetFlagStatus>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d0f8      	beq.n	8001874 <USART_SendChar+0x24>
}
 8001882:	bf00      	nop
 8001884:	bf00      	nop
 8001886:	3708      	adds	r7, #8
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}

0800188c <UART_SendString>:

void UART_SendString(USART_RegDef_t *pUARTx, const char *str){
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
	while(*str){
 8001896:	e007      	b.n	80018a8 <UART_SendString+0x1c>
		USART_SendChar(pUARTx, *str++);
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	1c5a      	adds	r2, r3, #1
 800189c:	603a      	str	r2, [r7, #0]
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	4619      	mov	r1, r3
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f7ff ffd4 	bl	8001850 <USART_SendChar>
	while(*str){
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d1f3      	bne.n	8001898 <UART_SendString+0xc>
	}
}
 80018b0:	bf00      	nop
 80018b2:	bf00      	nop
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <USART_GetFlagStatus>:
uint8_t UART_ReceiveChar(USART_RegDef_t *pUARTx){
	while(!(USART_GetFlagStatus(pUARTx, USART_FLAG_RXNE)));
	return (uint8_t)pUARTx->DR;
}

static uint8_t USART_GetFlagStatus(USART_RegDef_t *pUARTx,uint32_t FlagName){
 80018ba:	b480      	push	{r7}
 80018bc:	b083      	sub	sp, #12
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
 80018c2:	6039      	str	r1, [r7, #0]
    if(pUARTx->SR & FlagName){
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	4013      	ands	r3, r2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <USART_GetFlagStatus+0x1a>
        return Flag_Set;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e000      	b.n	80018d6 <USART_GetFlagStatus+0x1c>
    }
    return Flag_Reset;
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
	...

080018e4 <Config_Pin>:
	{'4', '5', '6', 'B'},
	{'7', '8', '9', 'C'},
	{'*', '0', '#', 'D'},
};

void Config_Pin(){
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
	GPIOD_PCLK_EN;
 80018ea:	4b37      	ldr	r3, [pc, #220]	@ (80019c8 <Config_Pin+0xe4>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ee:	4a36      	ldr	r2, [pc, #216]	@ (80019c8 <Config_Pin+0xe4>)
 80018f0:	f043 0308 	orr.w	r3, r3, #8
 80018f4:	6313      	str	r3, [r2, #48]	@ 0x30
	Key_Pin_R.pGPIOx = GPIOD;
 80018f6:	4b35      	ldr	r3, [pc, #212]	@ (80019cc <Config_Pin+0xe8>)
 80018f8:	4a35      	ldr	r2, [pc, #212]	@ (80019d0 <Config_Pin+0xec>)
 80018fa:	601a      	str	r2, [r3, #0]
	Key_Pin_R.GPIO_Pin_Config.GPIO_PinNumber = \
 80018fc:	4b33      	ldr	r3, [pc, #204]	@ (80019cc <Config_Pin+0xe8>)
 80018fe:	220f      	movs	r2, #15
 8001900:	809a      	strh	r2, [r3, #4]
	PIN_NUM_0 | PIN_NUM_1 | PIN_NUM_2 | PIN_NUM_3;
	Key_Pin_R.GPIO_Pin_Config.GPIO_PinMode = GPIO_MODER_OUTPUT;
 8001902:	4b32      	ldr	r3, [pc, #200]	@ (80019cc <Config_Pin+0xe8>)
 8001904:	2201      	movs	r2, #1
 8001906:	719a      	strb	r2, [r3, #6]
	Key_Pin_R.GPIO_Pin_Config.GPIO_PinOPType = GPIO_OTYPER_PP;
 8001908:	4b30      	ldr	r3, [pc, #192]	@ (80019cc <Config_Pin+0xe8>)
 800190a:	2200      	movs	r2, #0
 800190c:	725a      	strb	r2, [r3, #9]
	Key_Pin_R.GPIO_Pin_Config.GPIO_PinSpeed = GPIO_OSPEEDR_LOW;
 800190e:	4b2f      	ldr	r3, [pc, #188]	@ (80019cc <Config_Pin+0xe8>)
 8001910:	2200      	movs	r2, #0
 8001912:	71da      	strb	r2, [r3, #7]
	Key_Pin_R.GPIO_Pin_Config.GPIO_PinPuPdControl = GPIO_PUPDR_PU;
 8001914:	4b2d      	ldr	r3, [pc, #180]	@ (80019cc <Config_Pin+0xe8>)
 8001916:	2201      	movs	r2, #1
 8001918:	721a      	strb	r2, [r3, #8]
	GPIO_Init(&Key_Pin_R);
 800191a:	482c      	ldr	r0, [pc, #176]	@ (80019cc <Config_Pin+0xe8>)
 800191c:	f7ff fcbb 	bl	8001296 <GPIO_Init>

	Key_Pin_C.pGPIOx = GPIOD;
 8001920:	4b2c      	ldr	r3, [pc, #176]	@ (80019d4 <Config_Pin+0xf0>)
 8001922:	4a2b      	ldr	r2, [pc, #172]	@ (80019d0 <Config_Pin+0xec>)
 8001924:	601a      	str	r2, [r3, #0]
	Key_Pin_C.GPIO_Pin_Config.GPIO_PinNumber = \
 8001926:	4b2b      	ldr	r3, [pc, #172]	@ (80019d4 <Config_Pin+0xf0>)
 8001928:	22f0      	movs	r2, #240	@ 0xf0
 800192a:	809a      	strh	r2, [r3, #4]
	PIN_NUM_4 | PIN_NUM_5 | PIN_NUM_6 | PIN_NUM_7;
	Key_Pin_C.GPIO_Pin_Config.GPIO_PinMode = GPIO_MODER_INPUT;
 800192c:	4b29      	ldr	r3, [pc, #164]	@ (80019d4 <Config_Pin+0xf0>)
 800192e:	2200      	movs	r2, #0
 8001930:	719a      	strb	r2, [r3, #6]
	Key_Pin_C.GPIO_Pin_Config.GPIO_PinOPType = GPIO_OTYPER_PP;
 8001932:	4b28      	ldr	r3, [pc, #160]	@ (80019d4 <Config_Pin+0xf0>)
 8001934:	2200      	movs	r2, #0
 8001936:	725a      	strb	r2, [r3, #9]
	Key_Pin_C.GPIO_Pin_Config.GPIO_PinSpeed = GPIO_OSPEEDR_LOW;
 8001938:	4b26      	ldr	r3, [pc, #152]	@ (80019d4 <Config_Pin+0xf0>)
 800193a:	2200      	movs	r2, #0
 800193c:	71da      	strb	r2, [r3, #7]
	Key_Pin_C.GPIO_Pin_Config.GPIO_PinPuPdControl = GPIO_PUPDR_PU;
 800193e:	4b25      	ldr	r3, [pc, #148]	@ (80019d4 <Config_Pin+0xf0>)
 8001940:	2201      	movs	r2, #1
 8001942:	721a      	strb	r2, [r3, #8]

	GPIO_Init(&Key_Pin_C);
 8001944:	4823      	ldr	r0, [pc, #140]	@ (80019d4 <Config_Pin+0xf0>)
 8001946:	f7ff fca6 	bl	8001296 <GPIO_Init>

	usart.pUSARTx = USART2;
 800194a:	4b23      	ldr	r3, [pc, #140]	@ (80019d8 <Config_Pin+0xf4>)
 800194c:	4a23      	ldr	r2, [pc, #140]	@ (80019dc <Config_Pin+0xf8>)
 800194e:	601a      	str	r2, [r3, #0]
	usart.USART_Config.USART_Baud = USART_STD_BAUD_9600;
 8001950:	4b21      	ldr	r3, [pc, #132]	@ (80019d8 <Config_Pin+0xf4>)
 8001952:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001956:	609a      	str	r2, [r3, #8]
	USART_Init(&usart);
 8001958:	481f      	ldr	r0, [pc, #124]	@ (80019d8 <Config_Pin+0xf4>)
 800195a:	f7ff fee7 	bl	800172c <USART_Init>




	while (1){
		if(ReadKey()){
 800195e:	f000 f847 	bl	80019f0 <ReadKey>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d0fa      	beq.n	800195e <Config_Pin+0x7a>
			UART_SendString(USART2, "Key : ");
 8001968:	491d      	ldr	r1, [pc, #116]	@ (80019e0 <Config_Pin+0xfc>)
 800196a:	481c      	ldr	r0, [pc, #112]	@ (80019dc <Config_Pin+0xf8>)
 800196c:	f7ff ff8e 	bl	800188c <UART_SendString>
			USART_SendChar(USART2, ReadKey());
 8001970:	f000 f83e 	bl	80019f0 <ReadKey>
 8001974:	4603      	mov	r3, r0
 8001976:	4619      	mov	r1, r3
 8001978:	4818      	ldr	r0, [pc, #96]	@ (80019dc <Config_Pin+0xf8>)
 800197a:	f7ff ff69 	bl	8001850 <USART_SendChar>
			UART_SendString(USART2, "\r\n");
 800197e:	4919      	ldr	r1, [pc, #100]	@ (80019e4 <Config_Pin+0x100>)
 8001980:	4816      	ldr	r0, [pc, #88]	@ (80019dc <Config_Pin+0xf8>)
 8001982:	f7ff ff83 	bl	800188c <UART_SendString>
			delay_ms(200);
 8001986:	2300      	movs	r3, #0
 8001988:	60fb      	str	r3, [r7, #12]
 800198a:	e018      	b.n	80019be <Config_Pin+0xda>
 800198c:	4b16      	ldr	r3, [pc, #88]	@ (80019e8 <Config_Pin+0x104>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	60bb      	str	r3, [r7, #8]
 8001992:	f000 fac5 	bl	8001f20 <RCC_GetSystemClock>
 8001996:	4603      	mov	r3, r0
 8001998:	4a14      	ldr	r2, [pc, #80]	@ (80019ec <Config_Pin+0x108>)
 800199a:	fba2 2303 	umull	r2, r3, r2, r3
 800199e:	0c9b      	lsrs	r3, r3, #18
 80019a0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80019a4:	fb02 f303 	mul.w	r3, r2, r3
 80019a8:	607b      	str	r3, [r7, #4]
 80019aa:	4b0f      	ldr	r3, [pc, #60]	@ (80019e8 <Config_Pin+0x104>)
 80019ac:	685a      	ldr	r2, [r3, #4]
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d8f8      	bhi.n	80019aa <Config_Pin+0xc6>
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	3301      	adds	r3, #1
 80019bc:	60fb      	str	r3, [r7, #12]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2bc7      	cmp	r3, #199	@ 0xc7
 80019c2:	d9e3      	bls.n	800198c <Config_Pin+0xa8>
		if(ReadKey()){
 80019c4:	e7cb      	b.n	800195e <Config_Pin+0x7a>
 80019c6:	bf00      	nop
 80019c8:	40023800 	.word	0x40023800
 80019cc:	2000013c 	.word	0x2000013c
 80019d0:	40020c00 	.word	0x40020c00
 80019d4:	20000148 	.word	0x20000148
 80019d8:	20000154 	.word	0x20000154
 80019dc:	40004400 	.word	0x40004400
 80019e0:	080031f8 	.word	0x080031f8
 80019e4:	08003200 	.word	0x08003200
 80019e8:	e0001000 	.word	0xe0001000
 80019ec:	431bde83 	.word	0x431bde83

080019f0 <ReadKey>:
		}
	}
}

char ReadKey(){
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
	//	Read col for R1
	GPIO_WriteToOutPutPin(Key_Pin_R.pGPIOx, R1, Low);
 80019f6:	4b78      	ldr	r3, [pc, #480]	@ (8001bd8 <ReadKey+0x1e8>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2200      	movs	r2, #0
 80019fc:	2100      	movs	r1, #0
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff fe4a 	bl	8001698 <GPIO_WriteToOutPutPin>
	GPIO_WriteToOutPutPin(Key_Pin_R.pGPIOx, R2, High);
 8001a04:	4b74      	ldr	r3, [pc, #464]	@ (8001bd8 <ReadKey+0x1e8>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2201      	movs	r2, #1
 8001a0a:	2101      	movs	r1, #1
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff fe43 	bl	8001698 <GPIO_WriteToOutPutPin>
	GPIO_WriteToOutPutPin(Key_Pin_R.pGPIOx, R3, High);
 8001a12:	4b71      	ldr	r3, [pc, #452]	@ (8001bd8 <ReadKey+0x1e8>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2201      	movs	r2, #1
 8001a18:	2102      	movs	r1, #2
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7ff fe3c 	bl	8001698 <GPIO_WriteToOutPutPin>
	GPIO_WriteToOutPutPin(Key_Pin_R.pGPIOx, R4, High);
 8001a20:	4b6d      	ldr	r3, [pc, #436]	@ (8001bd8 <ReadKey+0x1e8>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2201      	movs	r2, #1
 8001a26:	2103      	movs	r1, #3
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff fe35 	bl	8001698 <GPIO_WriteToOutPutPin>

	for (int8_t i = 0; i < KeyCol; i++){
 8001a2e:	2300      	movs	r3, #0
 8001a30:	71fb      	strb	r3, [r7, #7]
 8001a32:	e016      	b.n	8001a62 <ReadKey+0x72>
		if(!GPIO_ReadFromInputPin(Key_Pin_C.pGPIOx, (C1 + i))){
 8001a34:	4b69      	ldr	r3, [pc, #420]	@ (8001bdc <ReadKey+0x1ec>)
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	79fb      	ldrb	r3, [r7, #7]
 8001a3a:	3304      	adds	r3, #4
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	4619      	mov	r1, r3
 8001a40:	4610      	mov	r0, r2
 8001a42:	f7ff fe13 	bl	800166c <GPIO_ReadFromInputPin>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d104      	bne.n	8001a56 <ReadKey+0x66>
			return KeyMap[R1][i];
 8001a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a50:	4a63      	ldr	r2, [pc, #396]	@ (8001be0 <ReadKey+0x1f0>)
 8001a52:	5cd3      	ldrb	r3, [r2, r3]
 8001a54:	e0bb      	b.n	8001bce <ReadKey+0x1de>
	for (int8_t i = 0; i < KeyCol; i++){
 8001a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	71fb      	strb	r3, [r7, #7]
 8001a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a66:	2b03      	cmp	r3, #3
 8001a68:	dde4      	ble.n	8001a34 <ReadKey+0x44>
		}
	}

	//	Read col for R2
	GPIO_WriteToOutPutPin(Key_Pin_R.pGPIOx, R1, High);
 8001a6a:	4b5b      	ldr	r3, [pc, #364]	@ (8001bd8 <ReadKey+0x1e8>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	2100      	movs	r1, #0
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff fe10 	bl	8001698 <GPIO_WriteToOutPutPin>
	GPIO_WriteToOutPutPin(Key_Pin_R.pGPIOx, R2, Low);
 8001a78:	4b57      	ldr	r3, [pc, #348]	@ (8001bd8 <ReadKey+0x1e8>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	2101      	movs	r1, #1
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff fe09 	bl	8001698 <GPIO_WriteToOutPutPin>
	GPIO_WriteToOutPutPin(Key_Pin_R.pGPIOx, R3, High);
 8001a86:	4b54      	ldr	r3, [pc, #336]	@ (8001bd8 <ReadKey+0x1e8>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	2102      	movs	r1, #2
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff fe02 	bl	8001698 <GPIO_WriteToOutPutPin>
	GPIO_WriteToOutPutPin(Key_Pin_R.pGPIOx, R4, High);
 8001a94:	4b50      	ldr	r3, [pc, #320]	@ (8001bd8 <ReadKey+0x1e8>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2201      	movs	r2, #1
 8001a9a:	2103      	movs	r1, #3
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff fdfb 	bl	8001698 <GPIO_WriteToOutPutPin>

	for (int8_t i = 0; i < KeyCol; i++){
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	71bb      	strb	r3, [r7, #6]
 8001aa6:	e017      	b.n	8001ad8 <ReadKey+0xe8>
		if(!GPIO_ReadFromInputPin(Key_Pin_C.pGPIOx, (C1 + i))){
 8001aa8:	4b4c      	ldr	r3, [pc, #304]	@ (8001bdc <ReadKey+0x1ec>)
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	79bb      	ldrb	r3, [r7, #6]
 8001aae:	3304      	adds	r3, #4
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4610      	mov	r0, r2
 8001ab6:	f7ff fdd9 	bl	800166c <GPIO_ReadFromInputPin>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d105      	bne.n	8001acc <ReadKey+0xdc>
			return KeyMap[R2][i];
 8001ac0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001ac4:	4a46      	ldr	r2, [pc, #280]	@ (8001be0 <ReadKey+0x1f0>)
 8001ac6:	4413      	add	r3, r2
 8001ac8:	791b      	ldrb	r3, [r3, #4]
 8001aca:	e080      	b.n	8001bce <ReadKey+0x1de>
	for (int8_t i = 0; i < KeyCol; i++){
 8001acc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	71bb      	strb	r3, [r7, #6]
 8001ad8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001adc:	2b03      	cmp	r3, #3
 8001ade:	dde3      	ble.n	8001aa8 <ReadKey+0xb8>
		}
	}

	//	Read col for R3
	GPIO_WriteToOutPutPin(Key_Pin_R.pGPIOx, R1, High);
 8001ae0:	4b3d      	ldr	r3, [pc, #244]	@ (8001bd8 <ReadKey+0x1e8>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff fdd5 	bl	8001698 <GPIO_WriteToOutPutPin>
	GPIO_WriteToOutPutPin(Key_Pin_R.pGPIOx, R2, High);
 8001aee:	4b3a      	ldr	r3, [pc, #232]	@ (8001bd8 <ReadKey+0x1e8>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2201      	movs	r2, #1
 8001af4:	2101      	movs	r1, #1
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff fdce 	bl	8001698 <GPIO_WriteToOutPutPin>
	GPIO_WriteToOutPutPin(Key_Pin_R.pGPIOx, R3, Low);
 8001afc:	4b36      	ldr	r3, [pc, #216]	@ (8001bd8 <ReadKey+0x1e8>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2200      	movs	r2, #0
 8001b02:	2102      	movs	r1, #2
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff fdc7 	bl	8001698 <GPIO_WriteToOutPutPin>
	GPIO_WriteToOutPutPin(Key_Pin_R.pGPIOx, R4, High);
 8001b0a:	4b33      	ldr	r3, [pc, #204]	@ (8001bd8 <ReadKey+0x1e8>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	2103      	movs	r1, #3
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff fdc0 	bl	8001698 <GPIO_WriteToOutPutPin>

	for (int8_t i = 0; i < KeyCol; i++){
 8001b18:	2300      	movs	r3, #0
 8001b1a:	717b      	strb	r3, [r7, #5]
 8001b1c:	e017      	b.n	8001b4e <ReadKey+0x15e>
		if(!GPIO_ReadFromInputPin(Key_Pin_C.pGPIOx, (C1 + i))){
 8001b1e:	4b2f      	ldr	r3, [pc, #188]	@ (8001bdc <ReadKey+0x1ec>)
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	797b      	ldrb	r3, [r7, #5]
 8001b24:	3304      	adds	r3, #4
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4610      	mov	r0, r2
 8001b2c:	f7ff fd9e 	bl	800166c <GPIO_ReadFromInputPin>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d105      	bne.n	8001b42 <ReadKey+0x152>
			return KeyMap[R3][i];
 8001b36:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001b3a:	4a29      	ldr	r2, [pc, #164]	@ (8001be0 <ReadKey+0x1f0>)
 8001b3c:	4413      	add	r3, r2
 8001b3e:	7a1b      	ldrb	r3, [r3, #8]
 8001b40:	e045      	b.n	8001bce <ReadKey+0x1de>
	for (int8_t i = 0; i < KeyCol; i++){
 8001b42:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	3301      	adds	r3, #1
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	717b      	strb	r3, [r7, #5]
 8001b4e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001b52:	2b03      	cmp	r3, #3
 8001b54:	dde3      	ble.n	8001b1e <ReadKey+0x12e>
		}
	}

	//	Read col for R4
	GPIO_WriteToOutPutPin(Key_Pin_R.pGPIOx, R1, High);
 8001b56:	4b20      	ldr	r3, [pc, #128]	@ (8001bd8 <ReadKey+0x1e8>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff fd9a 	bl	8001698 <GPIO_WriteToOutPutPin>
	GPIO_WriteToOutPutPin(Key_Pin_R.pGPIOx, R2, High);
 8001b64:	4b1c      	ldr	r3, [pc, #112]	@ (8001bd8 <ReadKey+0x1e8>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	2101      	movs	r1, #1
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff fd93 	bl	8001698 <GPIO_WriteToOutPutPin>
	GPIO_WriteToOutPutPin(Key_Pin_R.pGPIOx, R3, High);
 8001b72:	4b19      	ldr	r3, [pc, #100]	@ (8001bd8 <ReadKey+0x1e8>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2201      	movs	r2, #1
 8001b78:	2102      	movs	r1, #2
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff fd8c 	bl	8001698 <GPIO_WriteToOutPutPin>
	GPIO_WriteToOutPutPin(Key_Pin_R.pGPIOx, R4, Low);
 8001b80:	4b15      	ldr	r3, [pc, #84]	@ (8001bd8 <ReadKey+0x1e8>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2200      	movs	r2, #0
 8001b86:	2103      	movs	r1, #3
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff fd85 	bl	8001698 <GPIO_WriteToOutPutPin>

	for (int8_t i = 0; i < KeyCol; i++){
 8001b8e:	2300      	movs	r3, #0
 8001b90:	713b      	strb	r3, [r7, #4]
 8001b92:	e017      	b.n	8001bc4 <ReadKey+0x1d4>
		if(!GPIO_ReadFromInputPin(Key_Pin_C.pGPIOx, (C1 + i))){
 8001b94:	4b11      	ldr	r3, [pc, #68]	@ (8001bdc <ReadKey+0x1ec>)
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	793b      	ldrb	r3, [r7, #4]
 8001b9a:	3304      	adds	r3, #4
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4610      	mov	r0, r2
 8001ba2:	f7ff fd63 	bl	800166c <GPIO_ReadFromInputPin>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d105      	bne.n	8001bb8 <ReadKey+0x1c8>
			return KeyMap[R4][i];
 8001bac:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001bb0:	4a0b      	ldr	r2, [pc, #44]	@ (8001be0 <ReadKey+0x1f0>)
 8001bb2:	4413      	add	r3, r2
 8001bb4:	7b1b      	ldrb	r3, [r3, #12]
 8001bb6:	e00a      	b.n	8001bce <ReadKey+0x1de>
	for (int8_t i = 0; i < KeyCol; i++){
 8001bb8:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	713b      	strb	r3, [r7, #4]
 8001bc4:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001bc8:	2b03      	cmp	r3, #3
 8001bca:	dde3      	ble.n	8001b94 <ReadKey+0x1a4>
		}
	}
	return 0;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	2000013c 	.word	0x2000013c
 8001bdc:	20000148 	.word	0x20000148
 8001be0:	20000000 	.word	0x20000000

08001be4 <_ZN4RoomC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
#include "Device.h"

class Room : public Device {
private:
public:
    Room(std::string name) : Device(name) {}
 8001be4:	b590      	push	{r4, r7, lr}
 8001be6:	b089      	sub	sp, #36	@ 0x24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
 8001bee:	687c      	ldr	r4, [r7, #4]
 8001bf0:	f107 0308 	add.w	r3, r7, #8
 8001bf4:	6839      	ldr	r1, [r7, #0]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f001 f8c3 	bl	8002d82 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8001bfc:	f107 0308 	add.w	r3, r7, #8
 8001c00:	4619      	mov	r1, r3
 8001c02:	4620      	mov	r0, r4
 8001c04:	f7ff fad8 	bl	80011b8 <_ZN6DeviceC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001c08:	f107 0308 	add.w	r3, r7, #8
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f001 f884 	bl	8002d1a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4618      	mov	r0, r3
 8001c16:	3724      	adds	r7, #36	@ 0x24
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd90      	pop	{r4, r7, pc}

08001c1c <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b094      	sub	sp, #80	@ 0x50
 8001c20:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c22:	f000 faa5 	bl	8002170 <HAL_Init>
  /* USER CODE BEGIN Init */
  DWT_Init();
 8001c26:	f000 f99d 	bl	8001f64 <DWT_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c2a:	f000 f8a3 	bl	8001d74 <_Z18SystemClock_Configv>
 8001c2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c32:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize all configured peripherals */


  /* USER CODE BEGIN 2 */
	Room LVR("Living Room");
 8001c34:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8001c38:	f107 030c 	add.w	r3, r7, #12
 8001c3c:	494a      	ldr	r1, [pc, #296]	@ (8001d68 <main+0x14c>)
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f001 f8c8 	bl	8002dd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001c44:	f107 020c 	add.w	r2, r7, #12
 8001c48:	1d3b      	adds	r3, r7, #4
 8001c4a:	4611      	mov	r1, r2
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff ffc9 	bl	8001be4 <_ZN4RoomC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001c52:	f107 030c 	add.w	r3, r7, #12
 8001c56:	4618      	mov	r0, r3
 8001c58:	f001 f85f 	bl	8002d1a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

      __attribute__((__always_inline__))
#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8001c5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c60:	4618      	mov	r0, r3
 8001c62:	f000 f8f7 	bl	8001e54 <_ZNSt15__new_allocatorIcED1Ev>
//	Room KTR("Kitchen Room");
//	Room BR("Bed Room");
	LVR.TurnOnLed(Room::em_Led1);
 8001c66:	1d3b      	adds	r3, r7, #4
 8001c68:	2180      	movs	r1, #128	@ 0x80
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff fb02 	bl	8001274 <_ZN6Device9TurnOnLedEh>
	delay_ms(1000);
 8001c70:	2300      	movs	r3, #0
 8001c72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c74:	e01d      	b.n	8001cb2 <main+0x96>
 8001c76:	4b3d      	ldr	r3, [pc, #244]	@ (8001d6c <main+0x150>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	633b      	str	r3, [r7, #48]	@ 0x30
 8001c7c:	f000 f950 	bl	8001f20 <RCC_GetSystemClock>
 8001c80:	4603      	mov	r3, r0
 8001c82:	4a3b      	ldr	r2, [pc, #236]	@ (8001d70 <main+0x154>)
 8001c84:	fba2 2303 	umull	r2, r3, r2, r3
 8001c88:	0c9b      	lsrs	r3, r3, #18
 8001c8a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001c8e:	fb02 f303 	mul.w	r3, r2, r3
 8001c92:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c94:	4b35      	ldr	r3, [pc, #212]	@ (8001d6c <main+0x150>)
 8001c96:	685a      	ldr	r2, [r3, #4]
 8001c98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	bf8c      	ite	hi
 8001ca2:	2301      	movhi	r3, #1
 8001ca4:	2300      	movls	r3, #0
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d1f3      	bne.n	8001c94 <main+0x78>
 8001cac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001cae:	3301      	adds	r3, #1
 8001cb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001cb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001cb4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001cb8:	d3dd      	bcc.n	8001c76 <main+0x5a>
	LVR.TurnOnLed(Room::em_Led2);
 8001cba:	1d3b      	adds	r3, r7, #4
 8001cbc:	2140      	movs	r1, #64	@ 0x40
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff fad8 	bl	8001274 <_ZN6Device9TurnOnLedEh>
	delay_ms(1000);
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001cc8:	e01d      	b.n	8001d06 <main+0xea>
 8001cca:	4b28      	ldr	r3, [pc, #160]	@ (8001d6c <main+0x150>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001cd0:	f000 f926 	bl	8001f20 <RCC_GetSystemClock>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	4a26      	ldr	r2, [pc, #152]	@ (8001d70 <main+0x154>)
 8001cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8001cdc:	0c9b      	lsrs	r3, r3, #18
 8001cde:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001ce2:	fb02 f303 	mul.w	r3, r2, r3
 8001ce6:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ce8:	4b20      	ldr	r3, [pc, #128]	@ (8001d6c <main+0x150>)
 8001cea:	685a      	ldr	r2, [r3, #4]
 8001cec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	bf8c      	ite	hi
 8001cf6:	2301      	movhi	r3, #1
 8001cf8:	2300      	movls	r3, #0
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d1f3      	bne.n	8001ce8 <main+0xcc>
 8001d00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d02:	3301      	adds	r3, #1
 8001d04:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001d06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d08:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001d0c:	d3dd      	bcc.n	8001cca <main+0xae>
	LVR.TurnOnLed(Room::em_Led3);
 8001d0e:	1d3b      	adds	r3, r7, #4
 8001d10:	2120      	movs	r1, #32
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7ff faae 	bl	8001274 <_ZN6Device9TurnOnLedEh>
	delay_ms(1000);
 8001d18:	2300      	movs	r3, #0
 8001d1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8001d1c:	e01d      	b.n	8001d5a <main+0x13e>
 8001d1e:	4b13      	ldr	r3, [pc, #76]	@ (8001d6c <main+0x150>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	643b      	str	r3, [r7, #64]	@ 0x40
 8001d24:	f000 f8fc 	bl	8001f20 <RCC_GetSystemClock>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	4a11      	ldr	r2, [pc, #68]	@ (8001d70 <main+0x154>)
 8001d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d30:	0c9b      	lsrs	r3, r3, #18
 8001d32:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001d36:	fb02 f303 	mul.w	r3, r2, r3
 8001d3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001d3c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d6c <main+0x150>)
 8001d3e:	685a      	ldr	r2, [r3, #4]
 8001d40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001d46:	429a      	cmp	r2, r3
 8001d48:	bf8c      	ite	hi
 8001d4a:	2301      	movhi	r3, #1
 8001d4c:	2300      	movls	r3, #0
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d1f3      	bne.n	8001d3c <main+0x120>
 8001d54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d56:	3301      	adds	r3, #1
 8001d58:	647b      	str	r3, [r7, #68]	@ 0x44
 8001d5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d5c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001d60:	d3dd      	bcc.n	8001d1e <main+0x102>
//	LED.GPIO_Pin_Config.GPIO_PinSpeed = GPIO_OSPEEDR_LOW;
//	LED.GPIO_Pin_Config.GPIO_PinPuPdControl = GPIO_PUPDR_NOPUPD;
//	GPIO_Init(&LED);
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001d62:	bf00      	nop
 8001d64:	e7fd      	b.n	8001d62 <main+0x146>
 8001d66:	bf00      	nop
 8001d68:	08003204 	.word	0x08003204
 8001d6c:	e0001000 	.word	0xe0001000
 8001d70:	431bde83 	.word	0x431bde83

08001d74 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b094      	sub	sp, #80	@ 0x50
 8001d78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d7a:	f107 0320 	add.w	r3, r7, #32
 8001d7e:	2230      	movs	r2, #48	@ 0x30
 8001d80:	2100      	movs	r1, #0
 8001d82:	4618      	mov	r0, r3
 8001d84:	f001 f938 	bl	8002ff8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d88:	f107 030c 	add.w	r3, r7, #12
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	605a      	str	r2, [r3, #4]
 8001d92:	609a      	str	r2, [r3, #8]
 8001d94:	60da      	str	r2, [r3, #12]
 8001d96:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d98:	2300      	movs	r3, #0
 8001d9a:	60bb      	str	r3, [r7, #8]
 8001d9c:	4b28      	ldr	r3, [pc, #160]	@ (8001e40 <_Z18SystemClock_Configv+0xcc>)
 8001d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da0:	4a27      	ldr	r2, [pc, #156]	@ (8001e40 <_Z18SystemClock_Configv+0xcc>)
 8001da2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001da6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001da8:	4b25      	ldr	r3, [pc, #148]	@ (8001e40 <_Z18SystemClock_Configv+0xcc>)
 8001daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001db0:	60bb      	str	r3, [r7, #8]
 8001db2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001db4:	2300      	movs	r3, #0
 8001db6:	607b      	str	r3, [r7, #4]
 8001db8:	4b22      	ldr	r3, [pc, #136]	@ (8001e44 <_Z18SystemClock_Configv+0xd0>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001dc0:	4a20      	ldr	r2, [pc, #128]	@ (8001e44 <_Z18SystemClock_Configv+0xd0>)
 8001dc2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001dc6:	6013      	str	r3, [r2, #0]
 8001dc8:	4b1e      	ldr	r3, [pc, #120]	@ (8001e44 <_Z18SystemClock_Configv+0xd0>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001dd0:	607b      	str	r3, [r7, #4]
 8001dd2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ddc:	2310      	movs	r3, #16
 8001dde:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001de0:	2300      	movs	r3, #0
 8001de2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001de4:	f107 0320 	add.w	r3, r7, #32
 8001de8:	4618      	mov	r0, r3
 8001dea:	f000 fb19 	bl	8002420 <HAL_RCC_OscConfig>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	bf14      	ite	ne
 8001df4:	2301      	movne	r3, #1
 8001df6:	2300      	moveq	r3, #0
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <_Z18SystemClock_Configv+0x8e>
  {
    Error_Handler();
 8001dfe:	f000 f823 	bl	8001e48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e02:	230f      	movs	r3, #15
 8001e04:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001e06:	2300      	movs	r3, #0
 8001e08:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e12:	2300      	movs	r3, #0
 8001e14:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001e16:	f107 030c 	add.w	r3, r7, #12
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f000 fd77 	bl	8002910 <HAL_RCC_ClockConfig>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	bf14      	ite	ne
 8001e28:	2301      	movne	r3, #1
 8001e2a:	2300      	moveq	r3, #0
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <_Z18SystemClock_Configv+0xc2>
  {
    Error_Handler();
 8001e32:	f000 f809 	bl	8001e48 <Error_Handler>
  }
}
 8001e36:	bf00      	nop
 8001e38:	3750      	adds	r7, #80	@ 0x50
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	40023800 	.word	0x40023800
 8001e44:	40007000 	.word	0x40007000

08001e48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e4c:	b672      	cpsid	i
}
 8001e4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e50:	bf00      	nop
 8001e52:	e7fd      	b.n	8001e50 <Error_Handler+0x8>

08001e54 <_ZNSt15__new_allocatorIcED1Ev>:
#if __cplusplus >= 201103L
      __new_allocator& operator=(const __new_allocator&) = default;
#endif

#if __cplusplus <= 201703L
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr

08001e6a <Get_Output_CLK>:

uint16_t AHB_Prescaler[8] = {2,4,8,16,64,128,256,512};
uint8_t APB1_Prescaler[4] = {2,4,8,16};
uint8_t APB2_Prescaler[4] = {2,4,8,16};

uint32_t Get_Output_CLK(){
 8001e6a:	b480      	push	{r7}
 8001e6c:	af00      	add	r7, sp, #0
    return 0;
 8001e6e:	2300      	movs	r3, #0
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
	...

08001e7c <RCC_GetPCLK1Value>:
uint32_t RCC_GetPCLK1Value(void){
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
    uint32_t pclk1, SystemClk;
    uint8_t clksrc, temp, ahbp, apb1;
    clksrc = (RCC->CFGR >> 2) & 0x3;
 8001e82:	4b22      	ldr	r3, [pc, #136]	@ (8001f0c <RCC_GetPCLK1Value+0x90>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	089b      	lsrs	r3, r3, #2
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	f003 0303 	and.w	r3, r3, #3
 8001e8e:	727b      	strb	r3, [r7, #9]
    if(clksrc == 0){
 8001e90:	7a7b      	ldrb	r3, [r7, #9]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d102      	bne.n	8001e9c <RCC_GetPCLK1Value+0x20>
        SystemClk = 16000000; // HSI = 16MHz
 8001e96:	4b1e      	ldr	r3, [pc, #120]	@ (8001f10 <RCC_GetPCLK1Value+0x94>)
 8001e98:	60fb      	str	r3, [r7, #12]
 8001e9a:	e00b      	b.n	8001eb4 <RCC_GetPCLK1Value+0x38>
    }
    else if(clksrc == 1){
 8001e9c:	7a7b      	ldrb	r3, [r7, #9]
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d102      	bne.n	8001ea8 <RCC_GetPCLK1Value+0x2c>
        SystemClk = 8000000; // HSE optional
 8001ea2:	4b1c      	ldr	r3, [pc, #112]	@ (8001f14 <RCC_GetPCLK1Value+0x98>)
 8001ea4:	60fb      	str	r3, [r7, #12]
 8001ea6:	e005      	b.n	8001eb4 <RCC_GetPCLK1Value+0x38>
    }
    else if(clksrc == 2){
 8001ea8:	7a7b      	ldrb	r3, [r7, #9]
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d102      	bne.n	8001eb4 <RCC_GetPCLK1Value+0x38>
        SystemClk = Get_Output_CLK();
 8001eae:	f7ff ffdc 	bl	8001e6a <Get_Output_CLK>
 8001eb2:	60f8      	str	r0, [r7, #12]
    }

    // AHB
    temp = (RCC->CFGR >> 4) & 0xFF;
 8001eb4:	4b15      	ldr	r3, [pc, #84]	@ (8001f0c <RCC_GetPCLK1Value+0x90>)
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	091b      	lsrs	r3, r3, #4
 8001eba:	723b      	strb	r3, [r7, #8]
    if(temp < 8){
 8001ebc:	7a3b      	ldrb	r3, [r7, #8]
 8001ebe:	2b07      	cmp	r3, #7
 8001ec0:	d802      	bhi.n	8001ec8 <RCC_GetPCLK1Value+0x4c>
        ahbp = 1;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	72fb      	strb	r3, [r7, #11]
 8001ec6:	e005      	b.n	8001ed4 <RCC_GetPCLK1Value+0x58>
    }
    else {
        ahbp = AHB_Prescaler[temp - 8];
 8001ec8:	7a3b      	ldrb	r3, [r7, #8]
 8001eca:	3b08      	subs	r3, #8
 8001ecc:	4a12      	ldr	r2, [pc, #72]	@ (8001f18 <RCC_GetPCLK1Value+0x9c>)
 8001ece:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ed2:	72fb      	strb	r3, [r7, #11]
    }

    // APB1
    temp = (RCC->CFGR >> 10) & 0xFF;
 8001ed4:	4b0d      	ldr	r3, [pc, #52]	@ (8001f0c <RCC_GetPCLK1Value+0x90>)
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	0a9b      	lsrs	r3, r3, #10
 8001eda:	723b      	strb	r3, [r7, #8]
    if(temp < 4){
 8001edc:	7a3b      	ldrb	r3, [r7, #8]
 8001ede:	2b03      	cmp	r3, #3
 8001ee0:	d802      	bhi.n	8001ee8 <RCC_GetPCLK1Value+0x6c>
        apb1 = 1;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	72bb      	strb	r3, [r7, #10]
 8001ee6:	e004      	b.n	8001ef2 <RCC_GetPCLK1Value+0x76>
    }
    else {
    	apb1 = APB1_Prescaler[temp - 4];
 8001ee8:	7a3b      	ldrb	r3, [r7, #8]
 8001eea:	3b04      	subs	r3, #4
 8001eec:	4a0b      	ldr	r2, [pc, #44]	@ (8001f1c <RCC_GetPCLK1Value+0xa0>)
 8001eee:	5cd3      	ldrb	r3, [r2, r3]
 8001ef0:	72bb      	strb	r3, [r7, #10]
    }

    pclk1 = (SystemClk/ahbp) / apb1;
 8001ef2:	7afb      	ldrb	r3, [r7, #11]
 8001ef4:	68fa      	ldr	r2, [r7, #12]
 8001ef6:	fbb2 f2f3 	udiv	r2, r2, r3
 8001efa:	7abb      	ldrb	r3, [r7, #10]
 8001efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f00:	607b      	str	r3, [r7, #4]
    return pclk1;
 8001f02:	687b      	ldr	r3, [r7, #4]
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3710      	adds	r7, #16
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	40023800 	.word	0x40023800
 8001f10:	00f42400 	.word	0x00f42400
 8001f14:	007a1200 	.word	0x007a1200
 8001f18:	20000010 	.word	0x20000010
 8001f1c:	20000020 	.word	0x20000020

08001f20 <RCC_GetSystemClock>:
    pclk2 = (SystemClk/ahbp) / apb2;
    return pclk2;
}

// Delay Function
uint32_t RCC_GetSystemClock(void) {
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
    uint8_t clksrc = (RCC->CFGR >> 2) & 0x3;
 8001f26:	4b0c      	ldr	r3, [pc, #48]	@ (8001f58 <RCC_GetSystemClock+0x38>)
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	089b      	lsrs	r3, r3, #2
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	f003 0303 	and.w	r3, r3, #3
 8001f32:	71fb      	strb	r3, [r7, #7]
    if (clksrc == 0) return 16000000U;     // HSI
 8001f34:	79fb      	ldrb	r3, [r7, #7]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d101      	bne.n	8001f3e <RCC_GetSystemClock+0x1e>
 8001f3a:	4b08      	ldr	r3, [pc, #32]	@ (8001f5c <RCC_GetSystemClock+0x3c>)
 8001f3c:	e007      	b.n	8001f4e <RCC_GetSystemClock+0x2e>
    if (clksrc == 1) return 8000000U;      // HSE
 8001f3e:	79fb      	ldrb	r3, [r7, #7]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d101      	bne.n	8001f48 <RCC_GetSystemClock+0x28>
 8001f44:	4b06      	ldr	r3, [pc, #24]	@ (8001f60 <RCC_GetSystemClock+0x40>)
 8001f46:	e002      	b.n	8001f4e <RCC_GetSystemClock+0x2e>
    return Get_Output_CLK();              // PLL
 8001f48:	f7ff ff8f 	bl	8001e6a <Get_Output_CLK>
 8001f4c:	4603      	mov	r3, r0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	40023800 	.word	0x40023800
 8001f5c:	00f42400 	.word	0x00f42400
 8001f60:	007a1200 	.word	0x007a1200

08001f64 <DWT_Init>:

void DWT_Init(void) {
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
    // Enable TRC (Trace and Debug)
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001f68:	4b09      	ldr	r3, [pc, #36]	@ (8001f90 <DWT_Init+0x2c>)
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	4a08      	ldr	r2, [pc, #32]	@ (8001f90 <DWT_Init+0x2c>)
 8001f6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f72:	60d3      	str	r3, [r2, #12]

    // Reset Cycle Counter
    DWT->CYCCNT = 0;
 8001f74:	4b07      	ldr	r3, [pc, #28]	@ (8001f94 <DWT_Init+0x30>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	605a      	str	r2, [r3, #4]

    // Enable Cycle Counter
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001f7a:	4b06      	ldr	r3, [pc, #24]	@ (8001f94 <DWT_Init+0x30>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a05      	ldr	r2, [pc, #20]	@ (8001f94 <DWT_Init+0x30>)
 8001f80:	f043 0301 	orr.w	r3, r3, #1
 8001f84:	6013      	str	r3, [r2, #0]
}
 8001f86:	bf00      	nop
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr
 8001f90:	e000edf0 	.word	0xe000edf0
 8001f94:	e0001000 	.word	0xe0001000

08001f98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	607b      	str	r3, [r7, #4]
 8001fa2:	4b10      	ldr	r3, [pc, #64]	@ (8001fe4 <HAL_MspInit+0x4c>)
 8001fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fa6:	4a0f      	ldr	r2, [pc, #60]	@ (8001fe4 <HAL_MspInit+0x4c>)
 8001fa8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fac:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fae:	4b0d      	ldr	r3, [pc, #52]	@ (8001fe4 <HAL_MspInit+0x4c>)
 8001fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fb6:	607b      	str	r3, [r7, #4]
 8001fb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	603b      	str	r3, [r7, #0]
 8001fbe:	4b09      	ldr	r3, [pc, #36]	@ (8001fe4 <HAL_MspInit+0x4c>)
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc2:	4a08      	ldr	r2, [pc, #32]	@ (8001fe4 <HAL_MspInit+0x4c>)
 8001fc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fca:	4b06      	ldr	r3, [pc, #24]	@ (8001fe4 <HAL_MspInit+0x4c>)
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fd2:	603b      	str	r3, [r7, #0]
 8001fd4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fd6:	bf00      	nop
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	40023800 	.word	0x40023800

08001fe8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fec:	bf00      	nop
 8001fee:	e7fd      	b.n	8001fec <NMI_Handler+0x4>

08001ff0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ff4:	bf00      	nop
 8001ff6:	e7fd      	b.n	8001ff4 <HardFault_Handler+0x4>

08001ff8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ffc:	bf00      	nop
 8001ffe:	e7fd      	b.n	8001ffc <MemManage_Handler+0x4>

08002000 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002004:	bf00      	nop
 8002006:	e7fd      	b.n	8002004 <BusFault_Handler+0x4>

08002008 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800200c:	bf00      	nop
 800200e:	e7fd      	b.n	800200c <UsageFault_Handler+0x4>

08002010 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002014:	bf00      	nop
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr

0800201e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800201e:	b480      	push	{r7}
 8002020:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002022:	bf00      	nop
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002030:	bf00      	nop
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr

0800203a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800203a:	b580      	push	{r7, lr}
 800203c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800203e:	f000 f8e9 	bl	8002214 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002042:	bf00      	nop
 8002044:	bd80      	pop	{r7, pc}

08002046 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002046:	b480      	push	{r7}
 8002048:	af00      	add	r7, sp, #0
  return 1;
 800204a:	2301      	movs	r3, #1
}
 800204c:	4618      	mov	r0, r3
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr

08002056 <_kill>:

int _kill(int pid, int sig)
{
 8002056:	b580      	push	{r7, lr}
 8002058:	b082      	sub	sp, #8
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
 800205e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002060:	f001 f826 	bl	80030b0 <__errno>
 8002064:	4603      	mov	r3, r0
 8002066:	2216      	movs	r2, #22
 8002068:	601a      	str	r2, [r3, #0]
  return -1;
 800206a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800206e:	4618      	mov	r0, r3
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <_exit>:

void _exit (int status)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b082      	sub	sp, #8
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800207e:	f04f 31ff 	mov.w	r1, #4294967295
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f7ff ffe7 	bl	8002056 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002088:	bf00      	nop
 800208a:	e7fd      	b.n	8002088 <_exit+0x12>

0800208c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b086      	sub	sp, #24
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002094:	4a14      	ldr	r2, [pc, #80]	@ (80020e8 <_sbrk+0x5c>)
 8002096:	4b15      	ldr	r3, [pc, #84]	@ (80020ec <_sbrk+0x60>)
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020a0:	4b13      	ldr	r3, [pc, #76]	@ (80020f0 <_sbrk+0x64>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d102      	bne.n	80020ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020a8:	4b11      	ldr	r3, [pc, #68]	@ (80020f0 <_sbrk+0x64>)
 80020aa:	4a12      	ldr	r2, [pc, #72]	@ (80020f4 <_sbrk+0x68>)
 80020ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020ae:	4b10      	ldr	r3, [pc, #64]	@ (80020f0 <_sbrk+0x64>)
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4413      	add	r3, r2
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d207      	bcs.n	80020cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020bc:	f000 fff8 	bl	80030b0 <__errno>
 80020c0:	4603      	mov	r3, r0
 80020c2:	220c      	movs	r2, #12
 80020c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020c6:	f04f 33ff 	mov.w	r3, #4294967295
 80020ca:	e009      	b.n	80020e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020cc:	4b08      	ldr	r3, [pc, #32]	@ (80020f0 <_sbrk+0x64>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020d2:	4b07      	ldr	r3, [pc, #28]	@ (80020f0 <_sbrk+0x64>)
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4413      	add	r3, r2
 80020da:	4a05      	ldr	r2, [pc, #20]	@ (80020f0 <_sbrk+0x64>)
 80020dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020de:	68fb      	ldr	r3, [r7, #12]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3718      	adds	r7, #24
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	20018000 	.word	0x20018000
 80020ec:	00000400 	.word	0x00000400
 80020f0:	20000164 	.word	0x20000164
 80020f4:	200002b8 	.word	0x200002b8

080020f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020fc:	4b06      	ldr	r3, [pc, #24]	@ (8002118 <SystemInit+0x20>)
 80020fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002102:	4a05      	ldr	r2, [pc, #20]	@ (8002118 <SystemInit+0x20>)
 8002104:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002108:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800210c:	bf00      	nop
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	e000ed00 	.word	0xe000ed00

0800211c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800211c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002154 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002120:	f7ff ffea 	bl	80020f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002124:	480c      	ldr	r0, [pc, #48]	@ (8002158 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002126:	490d      	ldr	r1, [pc, #52]	@ (800215c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002128:	4a0d      	ldr	r2, [pc, #52]	@ (8002160 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800212a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800212c:	e002      	b.n	8002134 <LoopCopyDataInit>

0800212e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800212e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002130:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002132:	3304      	adds	r3, #4

08002134 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002134:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002136:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002138:	d3f9      	bcc.n	800212e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800213a:	4a0a      	ldr	r2, [pc, #40]	@ (8002164 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800213c:	4c0a      	ldr	r4, [pc, #40]	@ (8002168 <LoopFillZerobss+0x22>)
  movs r3, #0
 800213e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002140:	e001      	b.n	8002146 <LoopFillZerobss>

08002142 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002142:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002144:	3204      	adds	r2, #4

08002146 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002146:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002148:	d3fb      	bcc.n	8002142 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800214a:	f000 ffb7 	bl	80030bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800214e:	f7ff fd65 	bl	8001c1c <main>
  bx  lr    
 8002152:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002154:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002158:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800215c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8002160:	0800327c 	.word	0x0800327c
  ldr r2, =_sbss
 8002164:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8002168:	200002b8 	.word	0x200002b8

0800216c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800216c:	e7fe      	b.n	800216c <ADC_IRQHandler>
	...

08002170 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002174:	4b0e      	ldr	r3, [pc, #56]	@ (80021b0 <HAL_Init+0x40>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a0d      	ldr	r2, [pc, #52]	@ (80021b0 <HAL_Init+0x40>)
 800217a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800217e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002180:	4b0b      	ldr	r3, [pc, #44]	@ (80021b0 <HAL_Init+0x40>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a0a      	ldr	r2, [pc, #40]	@ (80021b0 <HAL_Init+0x40>)
 8002186:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800218a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800218c:	4b08      	ldr	r3, [pc, #32]	@ (80021b0 <HAL_Init+0x40>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a07      	ldr	r2, [pc, #28]	@ (80021b0 <HAL_Init+0x40>)
 8002192:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002196:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002198:	2003      	movs	r0, #3
 800219a:	f000 f90d 	bl	80023b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800219e:	200f      	movs	r0, #15
 80021a0:	f000 f808 	bl	80021b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021a4:	f7ff fef8 	bl	8001f98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	40023c00 	.word	0x40023c00

080021b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021bc:	4b12      	ldr	r3, [pc, #72]	@ (8002208 <HAL_InitTick+0x54>)
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	4b12      	ldr	r3, [pc, #72]	@ (800220c <HAL_InitTick+0x58>)
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	4619      	mov	r1, r3
 80021c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80021ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d2:	4618      	mov	r0, r3
 80021d4:	f000 f917 	bl	8002406 <HAL_SYSTICK_Config>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e00e      	b.n	8002200 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2b0f      	cmp	r3, #15
 80021e6:	d80a      	bhi.n	80021fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021e8:	2200      	movs	r2, #0
 80021ea:	6879      	ldr	r1, [r7, #4]
 80021ec:	f04f 30ff 	mov.w	r0, #4294967295
 80021f0:	f000 f8ed 	bl	80023ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021f4:	4a06      	ldr	r2, [pc, #24]	@ (8002210 <HAL_InitTick+0x5c>)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021fa:	2300      	movs	r3, #0
 80021fc:	e000      	b.n	8002200 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
}
 8002200:	4618      	mov	r0, r3
 8002202:	3708      	adds	r7, #8
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	20000024 	.word	0x20000024
 800220c:	2000002c 	.word	0x2000002c
 8002210:	20000028 	.word	0x20000028

08002214 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002218:	4b06      	ldr	r3, [pc, #24]	@ (8002234 <HAL_IncTick+0x20>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	461a      	mov	r2, r3
 800221e:	4b06      	ldr	r3, [pc, #24]	@ (8002238 <HAL_IncTick+0x24>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4413      	add	r3, r2
 8002224:	4a04      	ldr	r2, [pc, #16]	@ (8002238 <HAL_IncTick+0x24>)
 8002226:	6013      	str	r3, [r2, #0]
}
 8002228:	bf00      	nop
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	2000002c 	.word	0x2000002c
 8002238:	20000168 	.word	0x20000168

0800223c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  return uwTick;
 8002240:	4b03      	ldr	r3, [pc, #12]	@ (8002250 <HAL_GetTick+0x14>)
 8002242:	681b      	ldr	r3, [r3, #0]
}
 8002244:	4618      	mov	r0, r3
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	20000168 	.word	0x20000168

08002254 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002254:	b480      	push	{r7}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f003 0307 	and.w	r3, r3, #7
 8002262:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002264:	4b0c      	ldr	r3, [pc, #48]	@ (8002298 <__NVIC_SetPriorityGrouping+0x44>)
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800226a:	68ba      	ldr	r2, [r7, #8]
 800226c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002270:	4013      	ands	r3, r2
 8002272:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800227c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002280:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002284:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002286:	4a04      	ldr	r2, [pc, #16]	@ (8002298 <__NVIC_SetPriorityGrouping+0x44>)
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	60d3      	str	r3, [r2, #12]
}
 800228c:	bf00      	nop
 800228e:	3714      	adds	r7, #20
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr
 8002298:	e000ed00 	.word	0xe000ed00

0800229c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022a0:	4b04      	ldr	r3, [pc, #16]	@ (80022b4 <__NVIC_GetPriorityGrouping+0x18>)
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	0a1b      	lsrs	r3, r3, #8
 80022a6:	f003 0307 	and.w	r3, r3, #7
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr
 80022b4:	e000ed00 	.word	0xe000ed00

080022b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	4603      	mov	r3, r0
 80022c0:	6039      	str	r1, [r7, #0]
 80022c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	db0a      	blt.n	80022e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	b2da      	uxtb	r2, r3
 80022d0:	490c      	ldr	r1, [pc, #48]	@ (8002304 <__NVIC_SetPriority+0x4c>)
 80022d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d6:	0112      	lsls	r2, r2, #4
 80022d8:	b2d2      	uxtb	r2, r2
 80022da:	440b      	add	r3, r1
 80022dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022e0:	e00a      	b.n	80022f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	b2da      	uxtb	r2, r3
 80022e6:	4908      	ldr	r1, [pc, #32]	@ (8002308 <__NVIC_SetPriority+0x50>)
 80022e8:	79fb      	ldrb	r3, [r7, #7]
 80022ea:	f003 030f 	and.w	r3, r3, #15
 80022ee:	3b04      	subs	r3, #4
 80022f0:	0112      	lsls	r2, r2, #4
 80022f2:	b2d2      	uxtb	r2, r2
 80022f4:	440b      	add	r3, r1
 80022f6:	761a      	strb	r2, [r3, #24]
}
 80022f8:	bf00      	nop
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr
 8002304:	e000e100 	.word	0xe000e100
 8002308:	e000ed00 	.word	0xe000ed00

0800230c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800230c:	b480      	push	{r7}
 800230e:	b089      	sub	sp, #36	@ 0x24
 8002310:	af00      	add	r7, sp, #0
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	60b9      	str	r1, [r7, #8]
 8002316:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f003 0307 	and.w	r3, r3, #7
 800231e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	f1c3 0307 	rsb	r3, r3, #7
 8002326:	2b04      	cmp	r3, #4
 8002328:	bf28      	it	cs
 800232a:	2304      	movcs	r3, #4
 800232c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	3304      	adds	r3, #4
 8002332:	2b06      	cmp	r3, #6
 8002334:	d902      	bls.n	800233c <NVIC_EncodePriority+0x30>
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	3b03      	subs	r3, #3
 800233a:	e000      	b.n	800233e <NVIC_EncodePriority+0x32>
 800233c:	2300      	movs	r3, #0
 800233e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002340:	f04f 32ff 	mov.w	r2, #4294967295
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
 800234a:	43da      	mvns	r2, r3
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	401a      	ands	r2, r3
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002354:	f04f 31ff 	mov.w	r1, #4294967295
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	fa01 f303 	lsl.w	r3, r1, r3
 800235e:	43d9      	mvns	r1, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002364:	4313      	orrs	r3, r2
         );
}
 8002366:	4618      	mov	r0, r3
 8002368:	3724      	adds	r7, #36	@ 0x24
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
	...

08002374 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	3b01      	subs	r3, #1
 8002380:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002384:	d301      	bcc.n	800238a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002386:	2301      	movs	r3, #1
 8002388:	e00f      	b.n	80023aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800238a:	4a0a      	ldr	r2, [pc, #40]	@ (80023b4 <SysTick_Config+0x40>)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	3b01      	subs	r3, #1
 8002390:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002392:	210f      	movs	r1, #15
 8002394:	f04f 30ff 	mov.w	r0, #4294967295
 8002398:	f7ff ff8e 	bl	80022b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800239c:	4b05      	ldr	r3, [pc, #20]	@ (80023b4 <SysTick_Config+0x40>)
 800239e:	2200      	movs	r2, #0
 80023a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023a2:	4b04      	ldr	r3, [pc, #16]	@ (80023b4 <SysTick_Config+0x40>)
 80023a4:	2207      	movs	r2, #7
 80023a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3708      	adds	r7, #8
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	e000e010 	.word	0xe000e010

080023b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f7ff ff47 	bl	8002254 <__NVIC_SetPriorityGrouping>
}
 80023c6:	bf00      	nop
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}

080023ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023ce:	b580      	push	{r7, lr}
 80023d0:	b086      	sub	sp, #24
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	4603      	mov	r3, r0
 80023d6:	60b9      	str	r1, [r7, #8]
 80023d8:	607a      	str	r2, [r7, #4]
 80023da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023dc:	2300      	movs	r3, #0
 80023de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023e0:	f7ff ff5c 	bl	800229c <__NVIC_GetPriorityGrouping>
 80023e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	68b9      	ldr	r1, [r7, #8]
 80023ea:	6978      	ldr	r0, [r7, #20]
 80023ec:	f7ff ff8e 	bl	800230c <NVIC_EncodePriority>
 80023f0:	4602      	mov	r2, r0
 80023f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023f6:	4611      	mov	r1, r2
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7ff ff5d 	bl	80022b8 <__NVIC_SetPriority>
}
 80023fe:	bf00      	nop
 8002400:	3718      	adds	r7, #24
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002406:	b580      	push	{r7, lr}
 8002408:	b082      	sub	sp, #8
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f7ff ffb0 	bl	8002374 <SysTick_Config>
 8002414:	4603      	mov	r3, r0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
	...

08002420 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b086      	sub	sp, #24
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e267      	b.n	8002902 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	2b00      	cmp	r3, #0
 800243c:	d075      	beq.n	800252a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800243e:	4b88      	ldr	r3, [pc, #544]	@ (8002660 <HAL_RCC_OscConfig+0x240>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f003 030c 	and.w	r3, r3, #12
 8002446:	2b04      	cmp	r3, #4
 8002448:	d00c      	beq.n	8002464 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800244a:	4b85      	ldr	r3, [pc, #532]	@ (8002660 <HAL_RCC_OscConfig+0x240>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002452:	2b08      	cmp	r3, #8
 8002454:	d112      	bne.n	800247c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002456:	4b82      	ldr	r3, [pc, #520]	@ (8002660 <HAL_RCC_OscConfig+0x240>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800245e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002462:	d10b      	bne.n	800247c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002464:	4b7e      	ldr	r3, [pc, #504]	@ (8002660 <HAL_RCC_OscConfig+0x240>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d05b      	beq.n	8002528 <HAL_RCC_OscConfig+0x108>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d157      	bne.n	8002528 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e242      	b.n	8002902 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002484:	d106      	bne.n	8002494 <HAL_RCC_OscConfig+0x74>
 8002486:	4b76      	ldr	r3, [pc, #472]	@ (8002660 <HAL_RCC_OscConfig+0x240>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a75      	ldr	r2, [pc, #468]	@ (8002660 <HAL_RCC_OscConfig+0x240>)
 800248c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002490:	6013      	str	r3, [r2, #0]
 8002492:	e01d      	b.n	80024d0 <HAL_RCC_OscConfig+0xb0>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800249c:	d10c      	bne.n	80024b8 <HAL_RCC_OscConfig+0x98>
 800249e:	4b70      	ldr	r3, [pc, #448]	@ (8002660 <HAL_RCC_OscConfig+0x240>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a6f      	ldr	r2, [pc, #444]	@ (8002660 <HAL_RCC_OscConfig+0x240>)
 80024a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024a8:	6013      	str	r3, [r2, #0]
 80024aa:	4b6d      	ldr	r3, [pc, #436]	@ (8002660 <HAL_RCC_OscConfig+0x240>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a6c      	ldr	r2, [pc, #432]	@ (8002660 <HAL_RCC_OscConfig+0x240>)
 80024b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024b4:	6013      	str	r3, [r2, #0]
 80024b6:	e00b      	b.n	80024d0 <HAL_RCC_OscConfig+0xb0>
 80024b8:	4b69      	ldr	r3, [pc, #420]	@ (8002660 <HAL_RCC_OscConfig+0x240>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a68      	ldr	r2, [pc, #416]	@ (8002660 <HAL_RCC_OscConfig+0x240>)
 80024be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024c2:	6013      	str	r3, [r2, #0]
 80024c4:	4b66      	ldr	r3, [pc, #408]	@ (8002660 <HAL_RCC_OscConfig+0x240>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a65      	ldr	r2, [pc, #404]	@ (8002660 <HAL_RCC_OscConfig+0x240>)
 80024ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d013      	beq.n	8002500 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d8:	f7ff feb0 	bl	800223c <HAL_GetTick>
 80024dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024de:	e008      	b.n	80024f2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024e0:	f7ff feac 	bl	800223c <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b64      	cmp	r3, #100	@ 0x64
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e207      	b.n	8002902 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024f2:	4b5b      	ldr	r3, [pc, #364]	@ (8002660 <HAL_RCC_OscConfig+0x240>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d0f0      	beq.n	80024e0 <HAL_RCC_OscConfig+0xc0>
 80024fe:	e014      	b.n	800252a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002500:	f7ff fe9c 	bl	800223c <HAL_GetTick>
 8002504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002506:	e008      	b.n	800251a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002508:	f7ff fe98 	bl	800223c <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b64      	cmp	r3, #100	@ 0x64
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e1f3      	b.n	8002902 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800251a:	4b51      	ldr	r3, [pc, #324]	@ (8002660 <HAL_RCC_OscConfig+0x240>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d1f0      	bne.n	8002508 <HAL_RCC_OscConfig+0xe8>
 8002526:	e000      	b.n	800252a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002528:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d063      	beq.n	80025fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002536:	4b4a      	ldr	r3, [pc, #296]	@ (8002660 <HAL_RCC_OscConfig+0x240>)
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f003 030c 	and.w	r3, r3, #12
 800253e:	2b00      	cmp	r3, #0
 8002540:	d00b      	beq.n	800255a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002542:	4b47      	ldr	r3, [pc, #284]	@ (8002660 <HAL_RCC_OscConfig+0x240>)
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800254a:	2b08      	cmp	r3, #8
 800254c:	d11c      	bne.n	8002588 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800254e:	4b44      	ldr	r3, [pc, #272]	@ (8002660 <HAL_RCC_OscConfig+0x240>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d116      	bne.n	8002588 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800255a:	4b41      	ldr	r3, [pc, #260]	@ (8002660 <HAL_RCC_OscConfig+0x240>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	2b00      	cmp	r3, #0
 8002564:	d005      	beq.n	8002572 <HAL_RCC_OscConfig+0x152>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d001      	beq.n	8002572 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e1c7      	b.n	8002902 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002572:	4b3b      	ldr	r3, [pc, #236]	@ (8002660 <HAL_RCC_OscConfig+0x240>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	00db      	lsls	r3, r3, #3
 8002580:	4937      	ldr	r1, [pc, #220]	@ (8002660 <HAL_RCC_OscConfig+0x240>)
 8002582:	4313      	orrs	r3, r2
 8002584:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002586:	e03a      	b.n	80025fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d020      	beq.n	80025d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002590:	4b34      	ldr	r3, [pc, #208]	@ (8002664 <HAL_RCC_OscConfig+0x244>)
 8002592:	2201      	movs	r2, #1
 8002594:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002596:	f7ff fe51 	bl	800223c <HAL_GetTick>
 800259a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800259c:	e008      	b.n	80025b0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800259e:	f7ff fe4d 	bl	800223c <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d901      	bls.n	80025b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e1a8      	b.n	8002902 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025b0:	4b2b      	ldr	r3, [pc, #172]	@ (8002660 <HAL_RCC_OscConfig+0x240>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0302 	and.w	r3, r3, #2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d0f0      	beq.n	800259e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025bc:	4b28      	ldr	r3, [pc, #160]	@ (8002660 <HAL_RCC_OscConfig+0x240>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	691b      	ldr	r3, [r3, #16]
 80025c8:	00db      	lsls	r3, r3, #3
 80025ca:	4925      	ldr	r1, [pc, #148]	@ (8002660 <HAL_RCC_OscConfig+0x240>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	600b      	str	r3, [r1, #0]
 80025d0:	e015      	b.n	80025fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025d2:	4b24      	ldr	r3, [pc, #144]	@ (8002664 <HAL_RCC_OscConfig+0x244>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d8:	f7ff fe30 	bl	800223c <HAL_GetTick>
 80025dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025e0:	f7ff fe2c 	bl	800223c <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e187      	b.n	8002902 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025f2:	4b1b      	ldr	r3, [pc, #108]	@ (8002660 <HAL_RCC_OscConfig+0x240>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d1f0      	bne.n	80025e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0308 	and.w	r3, r3, #8
 8002606:	2b00      	cmp	r3, #0
 8002608:	d036      	beq.n	8002678 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	695b      	ldr	r3, [r3, #20]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d016      	beq.n	8002640 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002612:	4b15      	ldr	r3, [pc, #84]	@ (8002668 <HAL_RCC_OscConfig+0x248>)
 8002614:	2201      	movs	r2, #1
 8002616:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002618:	f7ff fe10 	bl	800223c <HAL_GetTick>
 800261c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800261e:	e008      	b.n	8002632 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002620:	f7ff fe0c 	bl	800223c <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b02      	cmp	r3, #2
 800262c:	d901      	bls.n	8002632 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e167      	b.n	8002902 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002632:	4b0b      	ldr	r3, [pc, #44]	@ (8002660 <HAL_RCC_OscConfig+0x240>)
 8002634:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d0f0      	beq.n	8002620 <HAL_RCC_OscConfig+0x200>
 800263e:	e01b      	b.n	8002678 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002640:	4b09      	ldr	r3, [pc, #36]	@ (8002668 <HAL_RCC_OscConfig+0x248>)
 8002642:	2200      	movs	r2, #0
 8002644:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002646:	f7ff fdf9 	bl	800223c <HAL_GetTick>
 800264a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800264c:	e00e      	b.n	800266c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800264e:	f7ff fdf5 	bl	800223c <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d907      	bls.n	800266c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e150      	b.n	8002902 <HAL_RCC_OscConfig+0x4e2>
 8002660:	40023800 	.word	0x40023800
 8002664:	42470000 	.word	0x42470000
 8002668:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800266c:	4b88      	ldr	r3, [pc, #544]	@ (8002890 <HAL_RCC_OscConfig+0x470>)
 800266e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002670:	f003 0302 	and.w	r3, r3, #2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d1ea      	bne.n	800264e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0304 	and.w	r3, r3, #4
 8002680:	2b00      	cmp	r3, #0
 8002682:	f000 8097 	beq.w	80027b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002686:	2300      	movs	r3, #0
 8002688:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800268a:	4b81      	ldr	r3, [pc, #516]	@ (8002890 <HAL_RCC_OscConfig+0x470>)
 800268c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800268e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d10f      	bne.n	80026b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002696:	2300      	movs	r3, #0
 8002698:	60bb      	str	r3, [r7, #8]
 800269a:	4b7d      	ldr	r3, [pc, #500]	@ (8002890 <HAL_RCC_OscConfig+0x470>)
 800269c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269e:	4a7c      	ldr	r2, [pc, #496]	@ (8002890 <HAL_RCC_OscConfig+0x470>)
 80026a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80026a6:	4b7a      	ldr	r3, [pc, #488]	@ (8002890 <HAL_RCC_OscConfig+0x470>)
 80026a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026ae:	60bb      	str	r3, [r7, #8]
 80026b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026b2:	2301      	movs	r3, #1
 80026b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b6:	4b77      	ldr	r3, [pc, #476]	@ (8002894 <HAL_RCC_OscConfig+0x474>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d118      	bne.n	80026f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026c2:	4b74      	ldr	r3, [pc, #464]	@ (8002894 <HAL_RCC_OscConfig+0x474>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a73      	ldr	r2, [pc, #460]	@ (8002894 <HAL_RCC_OscConfig+0x474>)
 80026c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026ce:	f7ff fdb5 	bl	800223c <HAL_GetTick>
 80026d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d4:	e008      	b.n	80026e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026d6:	f7ff fdb1 	bl	800223c <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d901      	bls.n	80026e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e10c      	b.n	8002902 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e8:	4b6a      	ldr	r3, [pc, #424]	@ (8002894 <HAL_RCC_OscConfig+0x474>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d0f0      	beq.n	80026d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d106      	bne.n	800270a <HAL_RCC_OscConfig+0x2ea>
 80026fc:	4b64      	ldr	r3, [pc, #400]	@ (8002890 <HAL_RCC_OscConfig+0x470>)
 80026fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002700:	4a63      	ldr	r2, [pc, #396]	@ (8002890 <HAL_RCC_OscConfig+0x470>)
 8002702:	f043 0301 	orr.w	r3, r3, #1
 8002706:	6713      	str	r3, [r2, #112]	@ 0x70
 8002708:	e01c      	b.n	8002744 <HAL_RCC_OscConfig+0x324>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	2b05      	cmp	r3, #5
 8002710:	d10c      	bne.n	800272c <HAL_RCC_OscConfig+0x30c>
 8002712:	4b5f      	ldr	r3, [pc, #380]	@ (8002890 <HAL_RCC_OscConfig+0x470>)
 8002714:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002716:	4a5e      	ldr	r2, [pc, #376]	@ (8002890 <HAL_RCC_OscConfig+0x470>)
 8002718:	f043 0304 	orr.w	r3, r3, #4
 800271c:	6713      	str	r3, [r2, #112]	@ 0x70
 800271e:	4b5c      	ldr	r3, [pc, #368]	@ (8002890 <HAL_RCC_OscConfig+0x470>)
 8002720:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002722:	4a5b      	ldr	r2, [pc, #364]	@ (8002890 <HAL_RCC_OscConfig+0x470>)
 8002724:	f043 0301 	orr.w	r3, r3, #1
 8002728:	6713      	str	r3, [r2, #112]	@ 0x70
 800272a:	e00b      	b.n	8002744 <HAL_RCC_OscConfig+0x324>
 800272c:	4b58      	ldr	r3, [pc, #352]	@ (8002890 <HAL_RCC_OscConfig+0x470>)
 800272e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002730:	4a57      	ldr	r2, [pc, #348]	@ (8002890 <HAL_RCC_OscConfig+0x470>)
 8002732:	f023 0301 	bic.w	r3, r3, #1
 8002736:	6713      	str	r3, [r2, #112]	@ 0x70
 8002738:	4b55      	ldr	r3, [pc, #340]	@ (8002890 <HAL_RCC_OscConfig+0x470>)
 800273a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800273c:	4a54      	ldr	r2, [pc, #336]	@ (8002890 <HAL_RCC_OscConfig+0x470>)
 800273e:	f023 0304 	bic.w	r3, r3, #4
 8002742:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d015      	beq.n	8002778 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800274c:	f7ff fd76 	bl	800223c <HAL_GetTick>
 8002750:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002752:	e00a      	b.n	800276a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002754:	f7ff fd72 	bl	800223c <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002762:	4293      	cmp	r3, r2
 8002764:	d901      	bls.n	800276a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e0cb      	b.n	8002902 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800276a:	4b49      	ldr	r3, [pc, #292]	@ (8002890 <HAL_RCC_OscConfig+0x470>)
 800276c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d0ee      	beq.n	8002754 <HAL_RCC_OscConfig+0x334>
 8002776:	e014      	b.n	80027a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002778:	f7ff fd60 	bl	800223c <HAL_GetTick>
 800277c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800277e:	e00a      	b.n	8002796 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002780:	f7ff fd5c 	bl	800223c <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800278e:	4293      	cmp	r3, r2
 8002790:	d901      	bls.n	8002796 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e0b5      	b.n	8002902 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002796:	4b3e      	ldr	r3, [pc, #248]	@ (8002890 <HAL_RCC_OscConfig+0x470>)
 8002798:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1ee      	bne.n	8002780 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80027a2:	7dfb      	ldrb	r3, [r7, #23]
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d105      	bne.n	80027b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027a8:	4b39      	ldr	r3, [pc, #228]	@ (8002890 <HAL_RCC_OscConfig+0x470>)
 80027aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ac:	4a38      	ldr	r2, [pc, #224]	@ (8002890 <HAL_RCC_OscConfig+0x470>)
 80027ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027b2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	699b      	ldr	r3, [r3, #24]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	f000 80a1 	beq.w	8002900 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027be:	4b34      	ldr	r3, [pc, #208]	@ (8002890 <HAL_RCC_OscConfig+0x470>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f003 030c 	and.w	r3, r3, #12
 80027c6:	2b08      	cmp	r3, #8
 80027c8:	d05c      	beq.n	8002884 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	699b      	ldr	r3, [r3, #24]
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d141      	bne.n	8002856 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027d2:	4b31      	ldr	r3, [pc, #196]	@ (8002898 <HAL_RCC_OscConfig+0x478>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d8:	f7ff fd30 	bl	800223c <HAL_GetTick>
 80027dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027de:	e008      	b.n	80027f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027e0:	f7ff fd2c 	bl	800223c <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e087      	b.n	8002902 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027f2:	4b27      	ldr	r3, [pc, #156]	@ (8002890 <HAL_RCC_OscConfig+0x470>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d1f0      	bne.n	80027e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	69da      	ldr	r2, [r3, #28]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a1b      	ldr	r3, [r3, #32]
 8002806:	431a      	orrs	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800280c:	019b      	lsls	r3, r3, #6
 800280e:	431a      	orrs	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002814:	085b      	lsrs	r3, r3, #1
 8002816:	3b01      	subs	r3, #1
 8002818:	041b      	lsls	r3, r3, #16
 800281a:	431a      	orrs	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002820:	061b      	lsls	r3, r3, #24
 8002822:	491b      	ldr	r1, [pc, #108]	@ (8002890 <HAL_RCC_OscConfig+0x470>)
 8002824:	4313      	orrs	r3, r2
 8002826:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002828:	4b1b      	ldr	r3, [pc, #108]	@ (8002898 <HAL_RCC_OscConfig+0x478>)
 800282a:	2201      	movs	r2, #1
 800282c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800282e:	f7ff fd05 	bl	800223c <HAL_GetTick>
 8002832:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002834:	e008      	b.n	8002848 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002836:	f7ff fd01 	bl	800223c <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	2b02      	cmp	r3, #2
 8002842:	d901      	bls.n	8002848 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e05c      	b.n	8002902 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002848:	4b11      	ldr	r3, [pc, #68]	@ (8002890 <HAL_RCC_OscConfig+0x470>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d0f0      	beq.n	8002836 <HAL_RCC_OscConfig+0x416>
 8002854:	e054      	b.n	8002900 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002856:	4b10      	ldr	r3, [pc, #64]	@ (8002898 <HAL_RCC_OscConfig+0x478>)
 8002858:	2200      	movs	r2, #0
 800285a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800285c:	f7ff fcee 	bl	800223c <HAL_GetTick>
 8002860:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002862:	e008      	b.n	8002876 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002864:	f7ff fcea 	bl	800223c <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b02      	cmp	r3, #2
 8002870:	d901      	bls.n	8002876 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e045      	b.n	8002902 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002876:	4b06      	ldr	r3, [pc, #24]	@ (8002890 <HAL_RCC_OscConfig+0x470>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d1f0      	bne.n	8002864 <HAL_RCC_OscConfig+0x444>
 8002882:	e03d      	b.n	8002900 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	2b01      	cmp	r3, #1
 800288a:	d107      	bne.n	800289c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e038      	b.n	8002902 <HAL_RCC_OscConfig+0x4e2>
 8002890:	40023800 	.word	0x40023800
 8002894:	40007000 	.word	0x40007000
 8002898:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800289c:	4b1b      	ldr	r3, [pc, #108]	@ (800290c <HAL_RCC_OscConfig+0x4ec>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	699b      	ldr	r3, [r3, #24]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d028      	beq.n	80028fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d121      	bne.n	80028fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d11a      	bne.n	80028fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80028cc:	4013      	ands	r3, r2
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80028d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d111      	bne.n	80028fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028e2:	085b      	lsrs	r3, r3, #1
 80028e4:	3b01      	subs	r3, #1
 80028e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d107      	bne.n	80028fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d001      	beq.n	8002900 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e000      	b.n	8002902 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3718      	adds	r7, #24
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	40023800 	.word	0x40023800

08002910 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d101      	bne.n	8002924 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e0cc      	b.n	8002abe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002924:	4b68      	ldr	r3, [pc, #416]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0307 	and.w	r3, r3, #7
 800292c:	683a      	ldr	r2, [r7, #0]
 800292e:	429a      	cmp	r2, r3
 8002930:	d90c      	bls.n	800294c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002932:	4b65      	ldr	r3, [pc, #404]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8002934:	683a      	ldr	r2, [r7, #0]
 8002936:	b2d2      	uxtb	r2, r2
 8002938:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800293a:	4b63      	ldr	r3, [pc, #396]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1b8>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0307 	and.w	r3, r3, #7
 8002942:	683a      	ldr	r2, [r7, #0]
 8002944:	429a      	cmp	r2, r3
 8002946:	d001      	beq.n	800294c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e0b8      	b.n	8002abe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	2b00      	cmp	r3, #0
 8002956:	d020      	beq.n	800299a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0304 	and.w	r3, r3, #4
 8002960:	2b00      	cmp	r3, #0
 8002962:	d005      	beq.n	8002970 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002964:	4b59      	ldr	r3, [pc, #356]	@ (8002acc <HAL_RCC_ClockConfig+0x1bc>)
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	4a58      	ldr	r2, [pc, #352]	@ (8002acc <HAL_RCC_ClockConfig+0x1bc>)
 800296a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800296e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0308 	and.w	r3, r3, #8
 8002978:	2b00      	cmp	r3, #0
 800297a:	d005      	beq.n	8002988 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800297c:	4b53      	ldr	r3, [pc, #332]	@ (8002acc <HAL_RCC_ClockConfig+0x1bc>)
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	4a52      	ldr	r2, [pc, #328]	@ (8002acc <HAL_RCC_ClockConfig+0x1bc>)
 8002982:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002986:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002988:	4b50      	ldr	r3, [pc, #320]	@ (8002acc <HAL_RCC_ClockConfig+0x1bc>)
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	494d      	ldr	r1, [pc, #308]	@ (8002acc <HAL_RCC_ClockConfig+0x1bc>)
 8002996:	4313      	orrs	r3, r2
 8002998:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0301 	and.w	r3, r3, #1
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d044      	beq.n	8002a30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d107      	bne.n	80029be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ae:	4b47      	ldr	r3, [pc, #284]	@ (8002acc <HAL_RCC_ClockConfig+0x1bc>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d119      	bne.n	80029ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e07f      	b.n	8002abe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d003      	beq.n	80029ce <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029ca:	2b03      	cmp	r3, #3
 80029cc:	d107      	bne.n	80029de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029ce:	4b3f      	ldr	r3, [pc, #252]	@ (8002acc <HAL_RCC_ClockConfig+0x1bc>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d109      	bne.n	80029ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e06f      	b.n	8002abe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029de:	4b3b      	ldr	r3, [pc, #236]	@ (8002acc <HAL_RCC_ClockConfig+0x1bc>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d101      	bne.n	80029ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e067      	b.n	8002abe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029ee:	4b37      	ldr	r3, [pc, #220]	@ (8002acc <HAL_RCC_ClockConfig+0x1bc>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f023 0203 	bic.w	r2, r3, #3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	4934      	ldr	r1, [pc, #208]	@ (8002acc <HAL_RCC_ClockConfig+0x1bc>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a00:	f7ff fc1c 	bl	800223c <HAL_GetTick>
 8002a04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a06:	e00a      	b.n	8002a1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a08:	f7ff fc18 	bl	800223c <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e04f      	b.n	8002abe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a1e:	4b2b      	ldr	r3, [pc, #172]	@ (8002acc <HAL_RCC_ClockConfig+0x1bc>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f003 020c 	and.w	r2, r3, #12
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d1eb      	bne.n	8002a08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a30:	4b25      	ldr	r3, [pc, #148]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0307 	and.w	r3, r3, #7
 8002a38:	683a      	ldr	r2, [r7, #0]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d20c      	bcs.n	8002a58 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a3e:	4b22      	ldr	r3, [pc, #136]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a40:	683a      	ldr	r2, [r7, #0]
 8002a42:	b2d2      	uxtb	r2, r2
 8002a44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a46:	4b20      	ldr	r3, [pc, #128]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0307 	and.w	r3, r3, #7
 8002a4e:	683a      	ldr	r2, [r7, #0]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d001      	beq.n	8002a58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e032      	b.n	8002abe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0304 	and.w	r3, r3, #4
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d008      	beq.n	8002a76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a64:	4b19      	ldr	r3, [pc, #100]	@ (8002acc <HAL_RCC_ClockConfig+0x1bc>)
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	4916      	ldr	r1, [pc, #88]	@ (8002acc <HAL_RCC_ClockConfig+0x1bc>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0308 	and.w	r3, r3, #8
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d009      	beq.n	8002a96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a82:	4b12      	ldr	r3, [pc, #72]	@ (8002acc <HAL_RCC_ClockConfig+0x1bc>)
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	00db      	lsls	r3, r3, #3
 8002a90:	490e      	ldr	r1, [pc, #56]	@ (8002acc <HAL_RCC_ClockConfig+0x1bc>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a96:	f000 f821 	bl	8002adc <HAL_RCC_GetSysClockFreq>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	4b0b      	ldr	r3, [pc, #44]	@ (8002acc <HAL_RCC_ClockConfig+0x1bc>)
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	091b      	lsrs	r3, r3, #4
 8002aa2:	f003 030f 	and.w	r3, r3, #15
 8002aa6:	490a      	ldr	r1, [pc, #40]	@ (8002ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8002aa8:	5ccb      	ldrb	r3, [r1, r3]
 8002aaa:	fa22 f303 	lsr.w	r3, r2, r3
 8002aae:	4a09      	ldr	r2, [pc, #36]	@ (8002ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ab0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002ab2:	4b09      	ldr	r3, [pc, #36]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7ff fb7c 	bl	80021b4 <HAL_InitTick>

  return HAL_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3710      	adds	r7, #16
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	40023c00 	.word	0x40023c00
 8002acc:	40023800 	.word	0x40023800
 8002ad0:	08003210 	.word	0x08003210
 8002ad4:	20000024 	.word	0x20000024
 8002ad8:	20000028 	.word	0x20000028

08002adc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002adc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ae0:	b090      	sub	sp, #64	@ 0x40
 8002ae2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002aec:	2300      	movs	r3, #0
 8002aee:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002af0:	2300      	movs	r3, #0
 8002af2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002af4:	4b59      	ldr	r3, [pc, #356]	@ (8002c5c <HAL_RCC_GetSysClockFreq+0x180>)
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f003 030c 	and.w	r3, r3, #12
 8002afc:	2b08      	cmp	r3, #8
 8002afe:	d00d      	beq.n	8002b1c <HAL_RCC_GetSysClockFreq+0x40>
 8002b00:	2b08      	cmp	r3, #8
 8002b02:	f200 80a1 	bhi.w	8002c48 <HAL_RCC_GetSysClockFreq+0x16c>
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d002      	beq.n	8002b10 <HAL_RCC_GetSysClockFreq+0x34>
 8002b0a:	2b04      	cmp	r3, #4
 8002b0c:	d003      	beq.n	8002b16 <HAL_RCC_GetSysClockFreq+0x3a>
 8002b0e:	e09b      	b.n	8002c48 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b10:	4b53      	ldr	r3, [pc, #332]	@ (8002c60 <HAL_RCC_GetSysClockFreq+0x184>)
 8002b12:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002b14:	e09b      	b.n	8002c4e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b16:	4b53      	ldr	r3, [pc, #332]	@ (8002c64 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b18:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002b1a:	e098      	b.n	8002c4e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b1c:	4b4f      	ldr	r3, [pc, #316]	@ (8002c5c <HAL_RCC_GetSysClockFreq+0x180>)
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b24:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b26:	4b4d      	ldr	r3, [pc, #308]	@ (8002c5c <HAL_RCC_GetSysClockFreq+0x180>)
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d028      	beq.n	8002b84 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b32:	4b4a      	ldr	r3, [pc, #296]	@ (8002c5c <HAL_RCC_GetSysClockFreq+0x180>)
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	099b      	lsrs	r3, r3, #6
 8002b38:	2200      	movs	r2, #0
 8002b3a:	623b      	str	r3, [r7, #32]
 8002b3c:	627a      	str	r2, [r7, #36]	@ 0x24
 8002b3e:	6a3b      	ldr	r3, [r7, #32]
 8002b40:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002b44:	2100      	movs	r1, #0
 8002b46:	4b47      	ldr	r3, [pc, #284]	@ (8002c64 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b48:	fb03 f201 	mul.w	r2, r3, r1
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	fb00 f303 	mul.w	r3, r0, r3
 8002b52:	4413      	add	r3, r2
 8002b54:	4a43      	ldr	r2, [pc, #268]	@ (8002c64 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b56:	fba0 1202 	umull	r1, r2, r0, r2
 8002b5a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002b5c:	460a      	mov	r2, r1
 8002b5e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002b60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b62:	4413      	add	r3, r2
 8002b64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b68:	2200      	movs	r2, #0
 8002b6a:	61bb      	str	r3, [r7, #24]
 8002b6c:	61fa      	str	r2, [r7, #28]
 8002b6e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b72:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002b76:	f7fd ff23 	bl	80009c0 <__aeabi_uldivmod>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	4613      	mov	r3, r2
 8002b80:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b82:	e053      	b.n	8002c2c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b84:	4b35      	ldr	r3, [pc, #212]	@ (8002c5c <HAL_RCC_GetSysClockFreq+0x180>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	099b      	lsrs	r3, r3, #6
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	613b      	str	r3, [r7, #16]
 8002b8e:	617a      	str	r2, [r7, #20]
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002b96:	f04f 0b00 	mov.w	fp, #0
 8002b9a:	4652      	mov	r2, sl
 8002b9c:	465b      	mov	r3, fp
 8002b9e:	f04f 0000 	mov.w	r0, #0
 8002ba2:	f04f 0100 	mov.w	r1, #0
 8002ba6:	0159      	lsls	r1, r3, #5
 8002ba8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bac:	0150      	lsls	r0, r2, #5
 8002bae:	4602      	mov	r2, r0
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	ebb2 080a 	subs.w	r8, r2, sl
 8002bb6:	eb63 090b 	sbc.w	r9, r3, fp
 8002bba:	f04f 0200 	mov.w	r2, #0
 8002bbe:	f04f 0300 	mov.w	r3, #0
 8002bc2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002bc6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002bca:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002bce:	ebb2 0408 	subs.w	r4, r2, r8
 8002bd2:	eb63 0509 	sbc.w	r5, r3, r9
 8002bd6:	f04f 0200 	mov.w	r2, #0
 8002bda:	f04f 0300 	mov.w	r3, #0
 8002bde:	00eb      	lsls	r3, r5, #3
 8002be0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002be4:	00e2      	lsls	r2, r4, #3
 8002be6:	4614      	mov	r4, r2
 8002be8:	461d      	mov	r5, r3
 8002bea:	eb14 030a 	adds.w	r3, r4, sl
 8002bee:	603b      	str	r3, [r7, #0]
 8002bf0:	eb45 030b 	adc.w	r3, r5, fp
 8002bf4:	607b      	str	r3, [r7, #4]
 8002bf6:	f04f 0200 	mov.w	r2, #0
 8002bfa:	f04f 0300 	mov.w	r3, #0
 8002bfe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c02:	4629      	mov	r1, r5
 8002c04:	028b      	lsls	r3, r1, #10
 8002c06:	4621      	mov	r1, r4
 8002c08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c0c:	4621      	mov	r1, r4
 8002c0e:	028a      	lsls	r2, r1, #10
 8002c10:	4610      	mov	r0, r2
 8002c12:	4619      	mov	r1, r3
 8002c14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c16:	2200      	movs	r2, #0
 8002c18:	60bb      	str	r3, [r7, #8]
 8002c1a:	60fa      	str	r2, [r7, #12]
 8002c1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c20:	f7fd fece 	bl	80009c0 <__aeabi_uldivmod>
 8002c24:	4602      	mov	r2, r0
 8002c26:	460b      	mov	r3, r1
 8002c28:	4613      	mov	r3, r2
 8002c2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8002c5c <HAL_RCC_GetSysClockFreq+0x180>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	0c1b      	lsrs	r3, r3, #16
 8002c32:	f003 0303 	and.w	r3, r3, #3
 8002c36:	3301      	adds	r3, #1
 8002c38:	005b      	lsls	r3, r3, #1
 8002c3a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002c3c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c44:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002c46:	e002      	b.n	8002c4e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c48:	4b05      	ldr	r3, [pc, #20]	@ (8002c60 <HAL_RCC_GetSysClockFreq+0x184>)
 8002c4a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002c4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3740      	adds	r7, #64	@ 0x40
 8002c54:	46bd      	mov	sp, r7
 8002c56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c5a:	bf00      	nop
 8002c5c:	40023800 	.word	0x40023800
 8002c60:	00f42400 	.word	0x00f42400
 8002c64:	017d7840 	.word	0x017d7840

08002c68 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 8002c68:	b10a      	cbz	r2, 8002c6e <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 8002c6a:	f000 ba4d 	b.w	8003108 <memcpy>
 8002c6e:	4770      	bx	lr

08002c70 <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
 8002c70:	b10a      	cbz	r2, 8002c76 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6>
 8002c72:	f000 b9b1 	b.w	8002fd8 <memcmp>
 8002c76:	4610      	mov	r0, r2
 8002c78:	4770      	bx	lr

08002c7a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_S_allocateERS3_j>:
 8002c7a:	1e08      	subs	r0, r1, #0
 8002c7c:	b508      	push	{r3, lr}
 8002c7e:	da01      	bge.n	8002c84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_S_allocateERS3_j+0xa>
 8002c80:	f000 f8d3 	bl	8002e2a <_ZSt17__throw_bad_allocv>
 8002c84:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002c88:	f000 b8be 	b.w	8002e08 <_Znwj>

08002c8c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>:
 8002c8c:	f850 3b08 	ldr.w	r3, [r0], #8
 8002c90:	1a1b      	subs	r3, r3, r0
 8002c92:	4258      	negs	r0, r3
 8002c94:	4158      	adcs	r0, r3
 8002c96:	4770      	bx	lr

08002c98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8002c98:	680b      	ldr	r3, [r1, #0]
 8002c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c9e:	b510      	push	{r4, lr}
 8002ca0:	d302      	bcc.n	8002ca8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8002ca2:	480b      	ldr	r0, [pc, #44]	@ (8002cd0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x38>)
 8002ca4:	f000 f8c7 	bl	8002e36 <_ZSt20__throw_length_errorPKc>
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d90b      	bls.n	8002cc4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8002cac:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8002cb0:	ea4f 0442 	mov.w	r4, r2, lsl #1
 8002cb4:	d206      	bcs.n	8002cc4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8002cb6:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8002cba:	bf2a      	itet	cs
 8002cbc:	f06f 4340 	mvncs.w	r3, #3221225472	@ 0xc0000000
 8002cc0:	600c      	strcc	r4, [r1, #0]
 8002cc2:	600b      	strcs	r3, [r1, #0]
 8002cc4:	6809      	ldr	r1, [r1, #0]
 8002cc6:	3101      	adds	r1, #1
 8002cc8:	f7ff ffd7 	bl	8002c7a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_S_allocateERS3_j>
 8002ccc:	bd10      	pop	{r4, pc}
 8002cce:	bf00      	nop
 8002cd0:	08003220 	.word	0x08003220

08002cd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_destroyEj>:
 8002cd4:	6800      	ldr	r0, [r0, #0]
 8002cd6:	f000 b895 	b.w	8002e04 <_ZdlPv>

08002cda <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8002cda:	b510      	push	{r4, lr}
 8002cdc:	4604      	mov	r4, r0
 8002cde:	f7ff ffd5 	bl	8002c8c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8002ce2:	b918      	cbnz	r0, 8002cec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x12>
 8002ce4:	68a1      	ldr	r1, [r4, #8]
 8002ce6:	4620      	mov	r0, r4
 8002ce8:	f7ff fff4 	bl	8002cd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_destroyEj>
 8002cec:	bd10      	pop	{r4, pc}

08002cee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8002cee:	2a01      	cmp	r2, #1
 8002cf0:	b410      	push	{r4}
 8002cf2:	d104      	bne.n	8002cfe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 8002cf4:	780a      	ldrb	r2, [r1, #0]
 8002cf6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002cfa:	7002      	strb	r2, [r0, #0]
 8002cfc:	4770      	bx	lr
 8002cfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002d02:	f7ff bfb1 	b.w	8002c68 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

08002d06 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 8002d06:	b508      	push	{r3, lr}
 8002d08:	1a52      	subs	r2, r2, r1
 8002d0a:	f7ff fff0 	bl	8002cee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8002d0e:	bd08      	pop	{r3, pc}

08002d10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8002d10:	b508      	push	{r3, lr}
 8002d12:	1a52      	subs	r2, r2, r1
 8002d14:	f7ff ffeb 	bl	8002cee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8002d18:	bd08      	pop	{r3, pc}

08002d1a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8002d1a:	b510      	push	{r4, lr}
 8002d1c:	4604      	mov	r4, r0
 8002d1e:	f7ff ffdc 	bl	8002cda <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8002d22:	4620      	mov	r0, r4
 8002d24:	bd10      	pop	{r4, pc}

08002d26 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>:
 8002d26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d28:	6847      	ldr	r7, [r0, #4]
 8002d2a:	4605      	mov	r5, r0
 8002d2c:	4608      	mov	r0, r1
 8002d2e:	460e      	mov	r6, r1
 8002d30:	f7fd fa50 	bl	80001d4 <strlen>
 8002d34:	4287      	cmp	r7, r0
 8002d36:	4604      	mov	r4, r0
 8002d38:	463a      	mov	r2, r7
 8002d3a:	4631      	mov	r1, r6
 8002d3c:	bf28      	it	cs
 8002d3e:	4602      	movcs	r2, r0
 8002d40:	6828      	ldr	r0, [r5, #0]
 8002d42:	f7ff ff95 	bl	8002c70 <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 8002d46:	b900      	cbnz	r0, 8002d4a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc+0x24>
 8002d48:	1b38      	subs	r0, r7, r4
 8002d4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002d4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 8002d4c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002d4e:	1a53      	subs	r3, r2, r1
 8002d50:	2b0f      	cmp	r3, #15
 8002d52:	4604      	mov	r4, r0
 8002d54:	460d      	mov	r5, r1
 8002d56:	4616      	mov	r6, r2
 8002d58:	9301      	str	r3, [sp, #4]
 8002d5a:	d906      	bls.n	8002d6a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x1e>
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	a901      	add	r1, sp, #4
 8002d60:	f7ff ff9a 	bl	8002c98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8002d64:	9b01      	ldr	r3, [sp, #4]
 8002d66:	6020      	str	r0, [r4, #0]
 8002d68:	60a3      	str	r3, [r4, #8]
 8002d6a:	4632      	mov	r2, r6
 8002d6c:	4629      	mov	r1, r5
 8002d6e:	6820      	ldr	r0, [r4, #0]
 8002d70:	f7ff ffc9 	bl	8002d06 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 8002d74:	9b01      	ldr	r3, [sp, #4]
 8002d76:	6822      	ldr	r2, [r4, #0]
 8002d78:	6063      	str	r3, [r4, #4]
 8002d7a:	2100      	movs	r1, #0
 8002d7c:	54d1      	strb	r1, [r2, r3]
 8002d7e:	b002      	add	sp, #8
 8002d80:	bd70      	pop	{r4, r5, r6, pc}

08002d82 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 8002d82:	f100 0208 	add.w	r2, r0, #8
 8002d86:	b510      	push	{r4, lr}
 8002d88:	6002      	str	r2, [r0, #0]
 8002d8a:	e9d1 1200 	ldrd	r1, r2, [r1]
 8002d8e:	4604      	mov	r4, r0
 8002d90:	f04f 0300 	mov.w	r3, #0
 8002d94:	440a      	add	r2, r1
 8002d96:	f7ff ffd9 	bl	8002d4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 8002d9a:	4620      	mov	r0, r4
 8002d9c:	bd10      	pop	{r4, pc}

08002d9e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8002d9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002da0:	1a53      	subs	r3, r2, r1
 8002da2:	2b0f      	cmp	r3, #15
 8002da4:	4604      	mov	r4, r0
 8002da6:	460d      	mov	r5, r1
 8002da8:	4616      	mov	r6, r2
 8002daa:	9301      	str	r3, [sp, #4]
 8002dac:	d906      	bls.n	8002dbc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x1e>
 8002dae:	2200      	movs	r2, #0
 8002db0:	a901      	add	r1, sp, #4
 8002db2:	f7ff ff71 	bl	8002c98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8002db6:	9b01      	ldr	r3, [sp, #4]
 8002db8:	6020      	str	r0, [r4, #0]
 8002dba:	60a3      	str	r3, [r4, #8]
 8002dbc:	4632      	mov	r2, r6
 8002dbe:	4629      	mov	r1, r5
 8002dc0:	6820      	ldr	r0, [r4, #0]
 8002dc2:	f7ff ffa5 	bl	8002d10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8002dc6:	9b01      	ldr	r3, [sp, #4]
 8002dc8:	6822      	ldr	r2, [r4, #0]
 8002dca:	6063      	str	r3, [r4, #4]
 8002dcc:	2100      	movs	r1, #0
 8002dce:	54d1      	strb	r1, [r2, r3]
 8002dd0:	b002      	add	sp, #8
 8002dd2:	bd70      	pop	{r4, r5, r6, pc}

08002dd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8002dd4:	b538      	push	{r3, r4, r5, lr}
 8002dd6:	f100 0308 	add.w	r3, r0, #8
 8002dda:	4604      	mov	r4, r0
 8002ddc:	6003      	str	r3, [r0, #0]
 8002dde:	460d      	mov	r5, r1
 8002de0:	b911      	cbnz	r1, 8002de8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x14>
 8002de2:	4807      	ldr	r0, [pc, #28]	@ (8002e00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x2c>)
 8002de4:	f000 f824 	bl	8002e30 <_ZSt19__throw_logic_errorPKc>
 8002de8:	4608      	mov	r0, r1
 8002dea:	f7fd f9f3 	bl	80001d4 <strlen>
 8002dee:	f04f 0300 	mov.w	r3, #0
 8002df2:	182a      	adds	r2, r5, r0
 8002df4:	4629      	mov	r1, r5
 8002df6:	4620      	mov	r0, r4
 8002df8:	f7ff ffd1 	bl	8002d9e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8002dfc:	4620      	mov	r0, r4
 8002dfe:	bd38      	pop	{r3, r4, r5, pc}
 8002e00:	08003238 	.word	0x08003238

08002e04 <_ZdlPv>:
 8002e04:	f000 b832 	b.w	8002e6c <free>

08002e08 <_Znwj>:
 8002e08:	2801      	cmp	r0, #1
 8002e0a:	bf38      	it	cc
 8002e0c:	2001      	movcc	r0, #1
 8002e0e:	b510      	push	{r4, lr}
 8002e10:	4604      	mov	r4, r0
 8002e12:	4620      	mov	r0, r4
 8002e14:	f000 f822 	bl	8002e5c <malloc>
 8002e18:	b100      	cbz	r0, 8002e1c <_Znwj+0x14>
 8002e1a:	bd10      	pop	{r4, pc}
 8002e1c:	f000 f80e 	bl	8002e3c <_ZSt15get_new_handlerv>
 8002e20:	b908      	cbnz	r0, 8002e26 <_Znwj+0x1e>
 8002e22:	f000 f813 	bl	8002e4c <abort>
 8002e26:	4780      	blx	r0
 8002e28:	e7f3      	b.n	8002e12 <_Znwj+0xa>

08002e2a <_ZSt17__throw_bad_allocv>:
 8002e2a:	b508      	push	{r3, lr}
 8002e2c:	f000 f80e 	bl	8002e4c <abort>

08002e30 <_ZSt19__throw_logic_errorPKc>:
 8002e30:	b508      	push	{r3, lr}
 8002e32:	f000 f80b 	bl	8002e4c <abort>

08002e36 <_ZSt20__throw_length_errorPKc>:
 8002e36:	b508      	push	{r3, lr}
 8002e38:	f000 f808 	bl	8002e4c <abort>

08002e3c <_ZSt15get_new_handlerv>:
 8002e3c:	4b02      	ldr	r3, [pc, #8]	@ (8002e48 <_ZSt15get_new_handlerv+0xc>)
 8002e3e:	6818      	ldr	r0, [r3, #0]
 8002e40:	f3bf 8f5b 	dmb	ish
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	2000016c 	.word	0x2000016c

08002e4c <abort>:
 8002e4c:	b508      	push	{r3, lr}
 8002e4e:	2006      	movs	r0, #6
 8002e50:	f000 f902 	bl	8003058 <raise>
 8002e54:	2001      	movs	r0, #1
 8002e56:	f7ff f90e 	bl	8002076 <_exit>
	...

08002e5c <malloc>:
 8002e5c:	4b02      	ldr	r3, [pc, #8]	@ (8002e68 <malloc+0xc>)
 8002e5e:	4601      	mov	r1, r0
 8002e60:	6818      	ldr	r0, [r3, #0]
 8002e62:	f000 b82d 	b.w	8002ec0 <_malloc_r>
 8002e66:	bf00      	nop
 8002e68:	20000030 	.word	0x20000030

08002e6c <free>:
 8002e6c:	4b02      	ldr	r3, [pc, #8]	@ (8002e78 <free+0xc>)
 8002e6e:	4601      	mov	r1, r0
 8002e70:	6818      	ldr	r0, [r3, #0]
 8002e72:	f000 b957 	b.w	8003124 <_free_r>
 8002e76:	bf00      	nop
 8002e78:	20000030 	.word	0x20000030

08002e7c <sbrk_aligned>:
 8002e7c:	b570      	push	{r4, r5, r6, lr}
 8002e7e:	4e0f      	ldr	r6, [pc, #60]	@ (8002ebc <sbrk_aligned+0x40>)
 8002e80:	460c      	mov	r4, r1
 8002e82:	6831      	ldr	r1, [r6, #0]
 8002e84:	4605      	mov	r5, r0
 8002e86:	b911      	cbnz	r1, 8002e8e <sbrk_aligned+0x12>
 8002e88:	f000 f902 	bl	8003090 <_sbrk_r>
 8002e8c:	6030      	str	r0, [r6, #0]
 8002e8e:	4621      	mov	r1, r4
 8002e90:	4628      	mov	r0, r5
 8002e92:	f000 f8fd 	bl	8003090 <_sbrk_r>
 8002e96:	1c43      	adds	r3, r0, #1
 8002e98:	d103      	bne.n	8002ea2 <sbrk_aligned+0x26>
 8002e9a:	f04f 34ff 	mov.w	r4, #4294967295
 8002e9e:	4620      	mov	r0, r4
 8002ea0:	bd70      	pop	{r4, r5, r6, pc}
 8002ea2:	1cc4      	adds	r4, r0, #3
 8002ea4:	f024 0403 	bic.w	r4, r4, #3
 8002ea8:	42a0      	cmp	r0, r4
 8002eaa:	d0f8      	beq.n	8002e9e <sbrk_aligned+0x22>
 8002eac:	1a21      	subs	r1, r4, r0
 8002eae:	4628      	mov	r0, r5
 8002eb0:	f000 f8ee 	bl	8003090 <_sbrk_r>
 8002eb4:	3001      	adds	r0, #1
 8002eb6:	d1f2      	bne.n	8002e9e <sbrk_aligned+0x22>
 8002eb8:	e7ef      	b.n	8002e9a <sbrk_aligned+0x1e>
 8002eba:	bf00      	nop
 8002ebc:	20000170 	.word	0x20000170

08002ec0 <_malloc_r>:
 8002ec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ec4:	1ccd      	adds	r5, r1, #3
 8002ec6:	f025 0503 	bic.w	r5, r5, #3
 8002eca:	3508      	adds	r5, #8
 8002ecc:	2d0c      	cmp	r5, #12
 8002ece:	bf38      	it	cc
 8002ed0:	250c      	movcc	r5, #12
 8002ed2:	2d00      	cmp	r5, #0
 8002ed4:	4606      	mov	r6, r0
 8002ed6:	db01      	blt.n	8002edc <_malloc_r+0x1c>
 8002ed8:	42a9      	cmp	r1, r5
 8002eda:	d904      	bls.n	8002ee6 <_malloc_r+0x26>
 8002edc:	230c      	movs	r3, #12
 8002ede:	6033      	str	r3, [r6, #0]
 8002ee0:	2000      	movs	r0, #0
 8002ee2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002ee6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002fbc <_malloc_r+0xfc>
 8002eea:	f000 f869 	bl	8002fc0 <__malloc_lock>
 8002eee:	f8d8 3000 	ldr.w	r3, [r8]
 8002ef2:	461c      	mov	r4, r3
 8002ef4:	bb44      	cbnz	r4, 8002f48 <_malloc_r+0x88>
 8002ef6:	4629      	mov	r1, r5
 8002ef8:	4630      	mov	r0, r6
 8002efa:	f7ff ffbf 	bl	8002e7c <sbrk_aligned>
 8002efe:	1c43      	adds	r3, r0, #1
 8002f00:	4604      	mov	r4, r0
 8002f02:	d158      	bne.n	8002fb6 <_malloc_r+0xf6>
 8002f04:	f8d8 4000 	ldr.w	r4, [r8]
 8002f08:	4627      	mov	r7, r4
 8002f0a:	2f00      	cmp	r7, #0
 8002f0c:	d143      	bne.n	8002f96 <_malloc_r+0xd6>
 8002f0e:	2c00      	cmp	r4, #0
 8002f10:	d04b      	beq.n	8002faa <_malloc_r+0xea>
 8002f12:	6823      	ldr	r3, [r4, #0]
 8002f14:	4639      	mov	r1, r7
 8002f16:	4630      	mov	r0, r6
 8002f18:	eb04 0903 	add.w	r9, r4, r3
 8002f1c:	f000 f8b8 	bl	8003090 <_sbrk_r>
 8002f20:	4581      	cmp	r9, r0
 8002f22:	d142      	bne.n	8002faa <_malloc_r+0xea>
 8002f24:	6821      	ldr	r1, [r4, #0]
 8002f26:	1a6d      	subs	r5, r5, r1
 8002f28:	4629      	mov	r1, r5
 8002f2a:	4630      	mov	r0, r6
 8002f2c:	f7ff ffa6 	bl	8002e7c <sbrk_aligned>
 8002f30:	3001      	adds	r0, #1
 8002f32:	d03a      	beq.n	8002faa <_malloc_r+0xea>
 8002f34:	6823      	ldr	r3, [r4, #0]
 8002f36:	442b      	add	r3, r5
 8002f38:	6023      	str	r3, [r4, #0]
 8002f3a:	f8d8 3000 	ldr.w	r3, [r8]
 8002f3e:	685a      	ldr	r2, [r3, #4]
 8002f40:	bb62      	cbnz	r2, 8002f9c <_malloc_r+0xdc>
 8002f42:	f8c8 7000 	str.w	r7, [r8]
 8002f46:	e00f      	b.n	8002f68 <_malloc_r+0xa8>
 8002f48:	6822      	ldr	r2, [r4, #0]
 8002f4a:	1b52      	subs	r2, r2, r5
 8002f4c:	d420      	bmi.n	8002f90 <_malloc_r+0xd0>
 8002f4e:	2a0b      	cmp	r2, #11
 8002f50:	d917      	bls.n	8002f82 <_malloc_r+0xc2>
 8002f52:	1961      	adds	r1, r4, r5
 8002f54:	42a3      	cmp	r3, r4
 8002f56:	6025      	str	r5, [r4, #0]
 8002f58:	bf18      	it	ne
 8002f5a:	6059      	strne	r1, [r3, #4]
 8002f5c:	6863      	ldr	r3, [r4, #4]
 8002f5e:	bf08      	it	eq
 8002f60:	f8c8 1000 	streq.w	r1, [r8]
 8002f64:	5162      	str	r2, [r4, r5]
 8002f66:	604b      	str	r3, [r1, #4]
 8002f68:	4630      	mov	r0, r6
 8002f6a:	f000 f82f 	bl	8002fcc <__malloc_unlock>
 8002f6e:	f104 000b 	add.w	r0, r4, #11
 8002f72:	1d23      	adds	r3, r4, #4
 8002f74:	f020 0007 	bic.w	r0, r0, #7
 8002f78:	1ac2      	subs	r2, r0, r3
 8002f7a:	bf1c      	itt	ne
 8002f7c:	1a1b      	subne	r3, r3, r0
 8002f7e:	50a3      	strne	r3, [r4, r2]
 8002f80:	e7af      	b.n	8002ee2 <_malloc_r+0x22>
 8002f82:	6862      	ldr	r2, [r4, #4]
 8002f84:	42a3      	cmp	r3, r4
 8002f86:	bf0c      	ite	eq
 8002f88:	f8c8 2000 	streq.w	r2, [r8]
 8002f8c:	605a      	strne	r2, [r3, #4]
 8002f8e:	e7eb      	b.n	8002f68 <_malloc_r+0xa8>
 8002f90:	4623      	mov	r3, r4
 8002f92:	6864      	ldr	r4, [r4, #4]
 8002f94:	e7ae      	b.n	8002ef4 <_malloc_r+0x34>
 8002f96:	463c      	mov	r4, r7
 8002f98:	687f      	ldr	r7, [r7, #4]
 8002f9a:	e7b6      	b.n	8002f0a <_malloc_r+0x4a>
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	42a3      	cmp	r3, r4
 8002fa2:	d1fb      	bne.n	8002f9c <_malloc_r+0xdc>
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	6053      	str	r3, [r2, #4]
 8002fa8:	e7de      	b.n	8002f68 <_malloc_r+0xa8>
 8002faa:	230c      	movs	r3, #12
 8002fac:	6033      	str	r3, [r6, #0]
 8002fae:	4630      	mov	r0, r6
 8002fb0:	f000 f80c 	bl	8002fcc <__malloc_unlock>
 8002fb4:	e794      	b.n	8002ee0 <_malloc_r+0x20>
 8002fb6:	6005      	str	r5, [r0, #0]
 8002fb8:	e7d6      	b.n	8002f68 <_malloc_r+0xa8>
 8002fba:	bf00      	nop
 8002fbc:	20000174 	.word	0x20000174

08002fc0 <__malloc_lock>:
 8002fc0:	4801      	ldr	r0, [pc, #4]	@ (8002fc8 <__malloc_lock+0x8>)
 8002fc2:	f000 b89f 	b.w	8003104 <__retarget_lock_acquire_recursive>
 8002fc6:	bf00      	nop
 8002fc8:	200002b4 	.word	0x200002b4

08002fcc <__malloc_unlock>:
 8002fcc:	4801      	ldr	r0, [pc, #4]	@ (8002fd4 <__malloc_unlock+0x8>)
 8002fce:	f000 b89a 	b.w	8003106 <__retarget_lock_release_recursive>
 8002fd2:	bf00      	nop
 8002fd4:	200002b4 	.word	0x200002b4

08002fd8 <memcmp>:
 8002fd8:	b510      	push	{r4, lr}
 8002fda:	3901      	subs	r1, #1
 8002fdc:	4402      	add	r2, r0
 8002fde:	4290      	cmp	r0, r2
 8002fe0:	d101      	bne.n	8002fe6 <memcmp+0xe>
 8002fe2:	2000      	movs	r0, #0
 8002fe4:	e005      	b.n	8002ff2 <memcmp+0x1a>
 8002fe6:	7803      	ldrb	r3, [r0, #0]
 8002fe8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8002fec:	42a3      	cmp	r3, r4
 8002fee:	d001      	beq.n	8002ff4 <memcmp+0x1c>
 8002ff0:	1b18      	subs	r0, r3, r4
 8002ff2:	bd10      	pop	{r4, pc}
 8002ff4:	3001      	adds	r0, #1
 8002ff6:	e7f2      	b.n	8002fde <memcmp+0x6>

08002ff8 <memset>:
 8002ff8:	4402      	add	r2, r0
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d100      	bne.n	8003002 <memset+0xa>
 8003000:	4770      	bx	lr
 8003002:	f803 1b01 	strb.w	r1, [r3], #1
 8003006:	e7f9      	b.n	8002ffc <memset+0x4>

08003008 <_raise_r>:
 8003008:	291f      	cmp	r1, #31
 800300a:	b538      	push	{r3, r4, r5, lr}
 800300c:	4605      	mov	r5, r0
 800300e:	460c      	mov	r4, r1
 8003010:	d904      	bls.n	800301c <_raise_r+0x14>
 8003012:	2316      	movs	r3, #22
 8003014:	6003      	str	r3, [r0, #0]
 8003016:	f04f 30ff 	mov.w	r0, #4294967295
 800301a:	bd38      	pop	{r3, r4, r5, pc}
 800301c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800301e:	b112      	cbz	r2, 8003026 <_raise_r+0x1e>
 8003020:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003024:	b94b      	cbnz	r3, 800303a <_raise_r+0x32>
 8003026:	4628      	mov	r0, r5
 8003028:	f000 f830 	bl	800308c <_getpid_r>
 800302c:	4622      	mov	r2, r4
 800302e:	4601      	mov	r1, r0
 8003030:	4628      	mov	r0, r5
 8003032:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003036:	f000 b817 	b.w	8003068 <_kill_r>
 800303a:	2b01      	cmp	r3, #1
 800303c:	d00a      	beq.n	8003054 <_raise_r+0x4c>
 800303e:	1c59      	adds	r1, r3, #1
 8003040:	d103      	bne.n	800304a <_raise_r+0x42>
 8003042:	2316      	movs	r3, #22
 8003044:	6003      	str	r3, [r0, #0]
 8003046:	2001      	movs	r0, #1
 8003048:	e7e7      	b.n	800301a <_raise_r+0x12>
 800304a:	2100      	movs	r1, #0
 800304c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8003050:	4620      	mov	r0, r4
 8003052:	4798      	blx	r3
 8003054:	2000      	movs	r0, #0
 8003056:	e7e0      	b.n	800301a <_raise_r+0x12>

08003058 <raise>:
 8003058:	4b02      	ldr	r3, [pc, #8]	@ (8003064 <raise+0xc>)
 800305a:	4601      	mov	r1, r0
 800305c:	6818      	ldr	r0, [r3, #0]
 800305e:	f7ff bfd3 	b.w	8003008 <_raise_r>
 8003062:	bf00      	nop
 8003064:	20000030 	.word	0x20000030

08003068 <_kill_r>:
 8003068:	b538      	push	{r3, r4, r5, lr}
 800306a:	4d07      	ldr	r5, [pc, #28]	@ (8003088 <_kill_r+0x20>)
 800306c:	2300      	movs	r3, #0
 800306e:	4604      	mov	r4, r0
 8003070:	4608      	mov	r0, r1
 8003072:	4611      	mov	r1, r2
 8003074:	602b      	str	r3, [r5, #0]
 8003076:	f7fe ffee 	bl	8002056 <_kill>
 800307a:	1c43      	adds	r3, r0, #1
 800307c:	d102      	bne.n	8003084 <_kill_r+0x1c>
 800307e:	682b      	ldr	r3, [r5, #0]
 8003080:	b103      	cbz	r3, 8003084 <_kill_r+0x1c>
 8003082:	6023      	str	r3, [r4, #0]
 8003084:	bd38      	pop	{r3, r4, r5, pc}
 8003086:	bf00      	nop
 8003088:	200002b0 	.word	0x200002b0

0800308c <_getpid_r>:
 800308c:	f7fe bfdb 	b.w	8002046 <_getpid>

08003090 <_sbrk_r>:
 8003090:	b538      	push	{r3, r4, r5, lr}
 8003092:	4d06      	ldr	r5, [pc, #24]	@ (80030ac <_sbrk_r+0x1c>)
 8003094:	2300      	movs	r3, #0
 8003096:	4604      	mov	r4, r0
 8003098:	4608      	mov	r0, r1
 800309a:	602b      	str	r3, [r5, #0]
 800309c:	f7fe fff6 	bl	800208c <_sbrk>
 80030a0:	1c43      	adds	r3, r0, #1
 80030a2:	d102      	bne.n	80030aa <_sbrk_r+0x1a>
 80030a4:	682b      	ldr	r3, [r5, #0]
 80030a6:	b103      	cbz	r3, 80030aa <_sbrk_r+0x1a>
 80030a8:	6023      	str	r3, [r4, #0]
 80030aa:	bd38      	pop	{r3, r4, r5, pc}
 80030ac:	200002b0 	.word	0x200002b0

080030b0 <__errno>:
 80030b0:	4b01      	ldr	r3, [pc, #4]	@ (80030b8 <__errno+0x8>)
 80030b2:	6818      	ldr	r0, [r3, #0]
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	20000030 	.word	0x20000030

080030bc <__libc_init_array>:
 80030bc:	b570      	push	{r4, r5, r6, lr}
 80030be:	4d0d      	ldr	r5, [pc, #52]	@ (80030f4 <__libc_init_array+0x38>)
 80030c0:	4c0d      	ldr	r4, [pc, #52]	@ (80030f8 <__libc_init_array+0x3c>)
 80030c2:	1b64      	subs	r4, r4, r5
 80030c4:	10a4      	asrs	r4, r4, #2
 80030c6:	2600      	movs	r6, #0
 80030c8:	42a6      	cmp	r6, r4
 80030ca:	d109      	bne.n	80030e0 <__libc_init_array+0x24>
 80030cc:	4d0b      	ldr	r5, [pc, #44]	@ (80030fc <__libc_init_array+0x40>)
 80030ce:	4c0c      	ldr	r4, [pc, #48]	@ (8003100 <__libc_init_array+0x44>)
 80030d0:	f000 f872 	bl	80031b8 <_init>
 80030d4:	1b64      	subs	r4, r4, r5
 80030d6:	10a4      	asrs	r4, r4, #2
 80030d8:	2600      	movs	r6, #0
 80030da:	42a6      	cmp	r6, r4
 80030dc:	d105      	bne.n	80030ea <__libc_init_array+0x2e>
 80030de:	bd70      	pop	{r4, r5, r6, pc}
 80030e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80030e4:	4798      	blx	r3
 80030e6:	3601      	adds	r6, #1
 80030e8:	e7ee      	b.n	80030c8 <__libc_init_array+0xc>
 80030ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80030ee:	4798      	blx	r3
 80030f0:	3601      	adds	r6, #1
 80030f2:	e7f2      	b.n	80030da <__libc_init_array+0x1e>
 80030f4:	08003274 	.word	0x08003274
 80030f8:	08003274 	.word	0x08003274
 80030fc:	08003274 	.word	0x08003274
 8003100:	08003278 	.word	0x08003278

08003104 <__retarget_lock_acquire_recursive>:
 8003104:	4770      	bx	lr

08003106 <__retarget_lock_release_recursive>:
 8003106:	4770      	bx	lr

08003108 <memcpy>:
 8003108:	440a      	add	r2, r1
 800310a:	4291      	cmp	r1, r2
 800310c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003110:	d100      	bne.n	8003114 <memcpy+0xc>
 8003112:	4770      	bx	lr
 8003114:	b510      	push	{r4, lr}
 8003116:	f811 4b01 	ldrb.w	r4, [r1], #1
 800311a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800311e:	4291      	cmp	r1, r2
 8003120:	d1f9      	bne.n	8003116 <memcpy+0xe>
 8003122:	bd10      	pop	{r4, pc}

08003124 <_free_r>:
 8003124:	b538      	push	{r3, r4, r5, lr}
 8003126:	4605      	mov	r5, r0
 8003128:	2900      	cmp	r1, #0
 800312a:	d041      	beq.n	80031b0 <_free_r+0x8c>
 800312c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003130:	1f0c      	subs	r4, r1, #4
 8003132:	2b00      	cmp	r3, #0
 8003134:	bfb8      	it	lt
 8003136:	18e4      	addlt	r4, r4, r3
 8003138:	f7ff ff42 	bl	8002fc0 <__malloc_lock>
 800313c:	4a1d      	ldr	r2, [pc, #116]	@ (80031b4 <_free_r+0x90>)
 800313e:	6813      	ldr	r3, [r2, #0]
 8003140:	b933      	cbnz	r3, 8003150 <_free_r+0x2c>
 8003142:	6063      	str	r3, [r4, #4]
 8003144:	6014      	str	r4, [r2, #0]
 8003146:	4628      	mov	r0, r5
 8003148:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800314c:	f7ff bf3e 	b.w	8002fcc <__malloc_unlock>
 8003150:	42a3      	cmp	r3, r4
 8003152:	d908      	bls.n	8003166 <_free_r+0x42>
 8003154:	6820      	ldr	r0, [r4, #0]
 8003156:	1821      	adds	r1, r4, r0
 8003158:	428b      	cmp	r3, r1
 800315a:	bf01      	itttt	eq
 800315c:	6819      	ldreq	r1, [r3, #0]
 800315e:	685b      	ldreq	r3, [r3, #4]
 8003160:	1809      	addeq	r1, r1, r0
 8003162:	6021      	streq	r1, [r4, #0]
 8003164:	e7ed      	b.n	8003142 <_free_r+0x1e>
 8003166:	461a      	mov	r2, r3
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	b10b      	cbz	r3, 8003170 <_free_r+0x4c>
 800316c:	42a3      	cmp	r3, r4
 800316e:	d9fa      	bls.n	8003166 <_free_r+0x42>
 8003170:	6811      	ldr	r1, [r2, #0]
 8003172:	1850      	adds	r0, r2, r1
 8003174:	42a0      	cmp	r0, r4
 8003176:	d10b      	bne.n	8003190 <_free_r+0x6c>
 8003178:	6820      	ldr	r0, [r4, #0]
 800317a:	4401      	add	r1, r0
 800317c:	1850      	adds	r0, r2, r1
 800317e:	4283      	cmp	r3, r0
 8003180:	6011      	str	r1, [r2, #0]
 8003182:	d1e0      	bne.n	8003146 <_free_r+0x22>
 8003184:	6818      	ldr	r0, [r3, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	6053      	str	r3, [r2, #4]
 800318a:	4408      	add	r0, r1
 800318c:	6010      	str	r0, [r2, #0]
 800318e:	e7da      	b.n	8003146 <_free_r+0x22>
 8003190:	d902      	bls.n	8003198 <_free_r+0x74>
 8003192:	230c      	movs	r3, #12
 8003194:	602b      	str	r3, [r5, #0]
 8003196:	e7d6      	b.n	8003146 <_free_r+0x22>
 8003198:	6820      	ldr	r0, [r4, #0]
 800319a:	1821      	adds	r1, r4, r0
 800319c:	428b      	cmp	r3, r1
 800319e:	bf04      	itt	eq
 80031a0:	6819      	ldreq	r1, [r3, #0]
 80031a2:	685b      	ldreq	r3, [r3, #4]
 80031a4:	6063      	str	r3, [r4, #4]
 80031a6:	bf04      	itt	eq
 80031a8:	1809      	addeq	r1, r1, r0
 80031aa:	6021      	streq	r1, [r4, #0]
 80031ac:	6054      	str	r4, [r2, #4]
 80031ae:	e7ca      	b.n	8003146 <_free_r+0x22>
 80031b0:	bd38      	pop	{r3, r4, r5, pc}
 80031b2:	bf00      	nop
 80031b4:	20000174 	.word	0x20000174

080031b8 <_init>:
 80031b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031ba:	bf00      	nop
 80031bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031be:	bc08      	pop	{r3}
 80031c0:	469e      	mov	lr, r3
 80031c2:	4770      	bx	lr

080031c4 <_fini>:
 80031c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031c6:	bf00      	nop
 80031c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031ca:	bc08      	pop	{r3}
 80031cc:	469e      	mov	lr, r3
 80031ce:	4770      	bx	lr
